<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GraphQL 入门介绍</title>
    <url>/20190219-GraphQL-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/423536-20180526221257677-811829512.png" alt="使用graphQL的公司"></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>GraphQL是一种新的API标准，它提供了一种更高效、强大和灵活的数据提供方式。<a id="more"></a>它是由Facebook开发和开源，目前由来自世界各地的大公司和个人维护。GraphQL本质上是一种基于api的查询语言，现在大多数应用程序都需要从服务器中获取数据，这些数据存储可能存储在数据库中，API的职责是提供与应用程序需求相匹配的存储数据的接口。有的人经常把GraphQL和数据库技术相混淆，这是一个误解，GraphQL是api的查询语言，而不是数据库。从这个意义上说，它是数据库无关的，而且可以在使用API的任何环境中有效使用，我们可以理解为GraphQL是基于API之上的一层封装，目的是为了更好，更灵活的适用于业务的需求变化。 </p>
<h2 id="GraphQL出现的历史背景"><a href="#GraphQL出现的历史背景" class="headerlink" title="GraphQL出现的历史背景"></a>GraphQL出现的历史背景</h2><p>当提起API设计的时候，大家通常会想到SOAP，RESTful等设计方式，从2000年RESTful的理论被提出的时候，在业界引起了很大反响，因为这种设计理念更易于用户的使用，所以便很快的被大家所接受。我们知道REST是一种从服务器公开数据的流行方式。当REST的概念被提及出来时，客户端应用程序对数据的需求相对简单，而开发的速度并没有达到今天的水平。因此REST对于许多应用程序来说是非常适合的。然而在业务越发复杂，客户对系统的扩展性有了更高的要求时，API环境发生了巨大的变化。特别是从下面三个方面在挑战api设计的方式:</p>
<h3 id="1-移动端用户的爆发式增长需要更高效的数据加载"><a href="#1-移动端用户的爆发式增长需要更高效的数据加载" class="headerlink" title="1.移动端用户的爆发式增长需要更高效的数据加载"></a>1.移动端用户的爆发式增长需要更高效的数据加载</h3><p>Facebook开发GraphQL的最初原因是移动用户的增加、低功耗设备和松散的网络。GraphQL最小化了需要网络传输的数据量，从而极大地改善了在这些条件下运行的应用程序。</p>
<h3 id="2-各种不同的前端框架和平台"><a href="#2-各种不同的前端框架和平台" class="headerlink" title="2.各种不同的前端框架和平台"></a>2.各种不同的前端框架和平台</h3><p>前端框架和平台运行客户端应用程序的异构环境使得我们在构建和维护一个符合所有需求的API变得困难，使用GraphQL每个客户机都可以精确地访问它需要的数据。</p>
<h3 id="3-在不同前端框架，不同平台下想要加快产品快速开发变的越来越难"><a href="#3-在不同前端框架，不同平台下想要加快产品快速开发变的越来越难" class="headerlink" title="3.在不同前端框架，不同平台下想要加快产品快速开发变的越来越难"></a>3.在不同前端框架，不同平台下想要加快产品快速开发变的越来越难</h3><p>持续部署已经成为许多公司的标准，快速的迭代和频繁的产品更新是必不可少的。对于REST api，服务器公开数据的方式常常需要修改，以满足客户端的特定需求和设计更改。这阻碍了快速开发实践和产品迭代。</p>
<p>GraphQL的出现不仅仅是针对开发人员的，Facebook在2012年开始在其native mobile apps中使用GraphQL。但有趣的是GraphQL大部分都是在web技术的背景下使用的，并且在native mobile 领域中只得到很少的支持。 Facebook第一次公开谈论GraphQL是在宣布开源计划后不久的2015年React峰会的时候。因为Facebook总是在React的背景下谈GraphQL，所以对于没有React经验的开发人员来说，要理解GraphQL并不是一种仅限于React使用的技术可能还需要一段时间。即便是在这样的背景下诞生的GraphQL依然是一个快速增长的社区 ,事实上GraphQL是一种技术，可以在客户端与API通信的任何地方使用。有趣的是Netflix和Coursera等其他公司都在研究类似的想法以提高API的交互效率。Coursera设想了一种类似的技术，可以让客户指定其数据需求，而Netflix甚至将其解决方案称为Falcor。在GraphQL被开源之后，Coursera完全停止了他们在Falcor上的努力，并转到了GraphQL的学习上。目前已经有很多的公司在使用GraphQL（<a href="https://graphql.org/users/）。" target="_blank" rel="noopener">https://graphql.org/users/）。</a></p>
<h2 id="GraphQL和RESTful的区别"><a href="#GraphQL和RESTful的区别" class="headerlink" title="GraphQL和RESTful的区别"></a>GraphQL和RESTful的区别</h2><p>前面提到GraphQL可以理解为基于RESTful的一种封装，目的在于构建使Client更加易用的服务，可以说GraphQL是更好的RESTful设计。在过去的十多年中，REST已经成为设计web api的标准(虽然只是一个模糊的标准)。它提供了一些很棒的想法，比如无状态服务器和结构化的资源访问。然而REST api表现得过于僵化，无法跟上访问它们的客户的快速变化的需求。 GraphQL的开发是为了应付更多的灵活性和效率，它解决了与REST api交互时开发人员所经历的许多缺点和低效之处。 为了说明在从API获取数据时REST和GraphQL之间的主要区别，让我们考虑一个简单的示例场景：在blog应用程序中，应用程序需要显示特定用户的文章的标题。同一屏幕还显示该用户最后3个关注者的名称。REST和GraphQL如何解决这种情况?</p>
<p>使用REST API来现实时，我们通常可以通过访问多次请求来收集数据。比如在这个示例中，我们可以通过下面的三步来实现：</p>
<ol>
<li><p>通过 /user/<id>获取初始用户数据</id></p>
</li>
<li><p>通过/user/<id>/posts 返回用户的所有帖子</id></p>
</li>
<li><p>请求/user/<id>/followers，返回每个用户的关注者列表</id></p>
</li>
</ol>
<p>调用关系如下图所示：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/423536-20180526222144350-1979704702.png" alt><br>如果用GraphQL的话，我们只需要一次请求就可以完成上述的需求<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/423536-20180526222358046-671560965.png····" alt></p>
<p>在GraphQL的世界里我们不用多取数据，也不用担心数据取少了，我们只需要按需获取即可。</p>
<p>REST最常见的问题之一是API的返回数据过多或者过少，这是因为客户端下载数据的唯一方法是通过访问返回固定数据结构的endpoint，这就会导致我们设计API非常困难，因为它既要能够为客户提供精确的数据需求，又需要满足不同调用者的需求，这本身就是相互矛盾的。GraphQL的发明者Lee Byron提出了一个很重要的概念： “用图形来思考，而不是endpoint”</p>
<p>通过上述直观展示我们可以得出一下几点：</p>
<ol>
<li>获取了许多多余的数据</li>
</ol>
<p>通常情况下我们在调用一个通用API接口时，客户端获取的信息比应用程序中实际需要的要多。例如UI需要显示一个用户列表，而实际上只需要使用他们的名字。在REST API中通常会调用 /user 这个endpoint，并接收一个带有用户数据的JSON数组。但是这个响应可能包含更多关于返回的用户的信息，例如他们的生日或地址，而这些信息对客户来说是无用的，因为它只需要显示用户的名字。</p>
<ol start="2">
<li>获取的数据少于Client所需要的数据</li>
</ol>
<p>一般来说数据获取不足意味着某个特定的endpoint 没有提供客户端需要的足够信息，客户端将需要额外的请求来获取它所需要的一切。这可能会升级到客户端需要首先获取列表信息，然后需要对单条数据添加一个额外的请求以获取其他所需的数据，例如考虑其他Client 也需要显示每个用户的最后三个关注者，该API提供了额外的endpoint  /user/<userid>/followers，为了能够显示所需的信息，Client 必须向 /users endpoint 发出一个请求，然后点击/user/<user-id>/follwers endpoint 来获取单个用户的follwers信息。</user-id></userid></p>
<ol start="3">
<li>前端的快速产品迭代对API有很大的挑战</li>
</ol>
<p>REST api的一个常见模式是根据您在应用程序内部的展现逻辑来构造endpoint，这很方便，因为它允许客户端通过访问相应的endpoint获取特定视图的所有所需信息。 这种方法的主要缺点是它不允许前端的快速迭代。对于UI所做的每一个更改，现在都存在比以前更多(或更少)的数据的高风险。因此，需要对后端进行调整，以满足新的数据需求，这会降低生产力并显著降低将用户反馈集成到产品中的能力。 使用GraphQL这个问题就解决了。由于GraphQL的灵活性，无需在服务器上额外工作就可以在客户端上进行更改。由于客户端可以指定准确的数据需求，所以当前端的设计和数据需求发生变化时，并不需要后端API做出任何的修改就可以满足展现层的变化。</p>
<ol start="4">
<li>Schema和类型系统的好处</li>
</ol>
<p>GraphQL使用强大的Type System来定义API的功能。所有在API中公开的类型都是使用GraphQL schema Definition Language (SDL)在模式中编写的。该模式充当客户端和服务器之间的契约，以定义客户机如何访问数据。 一旦定义了模式，在前端和后端工作的团队就可以在没有进一步通信的情况下完成工作，因为他们都知道通过网络发送的数据的确切结构。 前端团队可以通过mock所需的数据结构来轻松测试他们的应用程序。一旦后端API实现完成，就可以对客户端应用程序进行切换来调用实际的API获取数据，这也可以使得我们实现更好的客户端和服务端的分离。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>我们可以看出GraphQL的出现可以使得我们后端API具有更大的灵活性以及扩展性以满足不同client对数据的需要，这大大丰富了API的数据提供的能力。 </p>
]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>GraphQL</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphQL初探：一种强大的DSQL</title>
    <url>/20190201-GraphQL%E5%88%9D%E6%8E%A2%EF%BC%9A%E4%B8%80%E7%A7%8D%E5%BC%BA%E5%A4%A7%E7%9A%84DSQL/</url>
    <content><![CDATA[<h2 id="初识GraphQL"><a href="#初识GraphQL" class="headerlink" title="初识GraphQL"></a>初识GraphQL</h2><p>GraphQL是一种强大的DSQL，是由Facebook开源的一种用于提供数据查询服务的抽象框架，在服务端API开发中，很多时候定义一个接口返回的数据相对固定的，如果想要获取更多的信息，或者仅需要某个接口的某个信息的时候，基于restful API的接口就显得不那么灵活了，对于这些需求，服务端要么再定义一个新的接口，返回合适的数据，要么客户端就得通过一个庞大的接口来获取一小部分信息，GraphQL的出现就是为了解决这些问题的，GraphQL并不是一门具体的语言实现的某种框架，它是一系列协议文档组成的项目，GraphQL是和语言无关的，而且到现在为止已经有很多语言的实现版本，可以在awesome-graphql看到哪些语言实现了GraphQL，如果想要了解具体的GraphQL定义，可以参考graphql。<a id="more"></a>本文以及本GraphQL系列将只关心Java版本的GraphQL实现，具体的Java版本的GraphQL可以参考graphql-java。下面是官方对GraphQL的描述，很简洁，但是很直观：<br><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs undefined">GraphQL is <span class="hljs-keyword">a</span> query language <span class="hljs-keyword">for</span> APIs <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> runtime <span class="hljs-keyword">for</span> fulfilling those queries <span class="hljs-keyword">with</span> your existing data.<br></code></pre></td></tr></table></figure></p>
<p>下面的图片展示了GraphQL的工作模型：<br><img data-src="https://upload-images.jianshu.io/upload_images/7853175-e192bff3bdadcade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="GraphQL的工作模型"></p>
<p>从这张图片可以看出，GraphQL的位置处于Client和DataSource之间，可以把这一层理解为服务端的API层，所谓API层，就是聚合多个数据源，进行一些业务逻辑的处理，然后提供一些接口给Client调用。而GraphQL就工作在这一层，它相当于是对DataSource的一层抽象，它可以承接Client的请求，然后根据GraphQL的执行引擎来从DataSource获取数据，然后进行处理之后返回json结果给Client，这和Restful的模式没有什么差别，但是GraphQL的强大之处在于GraphQL类似于MySql，Client发送的请求类似于Sql语句，这些Sql语句经过GraphQL解析执行之后返回具体的数据，所以GraphQL具有很好的动态性，Client可以根据不同的需求来使用不同的Sql语句来请求服务端，而GraphQL会解析这些Sql，并且精准的返回结果。这就完美的解决了文章开头提到的难题。使用GraphQL来做服务端API层的开发无疑会减轻服务端开发工程师的很多压力，而且对于Client来说也是很友好的，因为Client不需要想请求Restful接口一样只能获取相对固定的数据，Client可以根据自己的需求使用不同的查询语句来请求GraphQL，使用GraphQL会减少很多冗余的数据传输，并且可以减少很多服务端API层的接口开发工作，API层只需要开发GraphQL服务端，然后告诉Client这些数据的组织结构，然后Client就可以组装出合适的查询语句来请求数据。使用GraphQL进一步将前后端分离（Restful使得前后端分离），后端开发和前端开发可以各自进行，使用GraphQL很多时候服务端是在丰富可以提供的数据，或者优化聚合DataSource来提高响应速度。使用GraphQL还有很多优点，可以研究GraphQL并且使用GraphQL来开发服务端API来体验。本文剩下的内容将基于GraphQL-Java和Spring-boot来实现一个简单的应用，以此来说明使用GraphQL的方法以及使用GraphQL的优势。</p>
<p>需要补充的一点是，上面提到了GraphQL查询语句（上文使用了Sql代替，但不是Sql），这是一种类似于json的结构化数据，可以很轻易的理解它的本意，这也是GraphQL的一个优点，它的查询语句对工程师是很友好的。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs undefined">作者：缥缈止盈<br>链接：https:<span class="hljs-regexp">//</span>www.imooc.com<span class="hljs-regexp">/article/</span><span class="hljs-number">34617</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GraphQL</category>
      </categories>
      <tags>
        <tag>GraphQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP缓存机制及原理</title>
    <url>/20210105-HTTP%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Http 缓存机制作为 web 性能优化的重要手段，对于从事 Web 开发的同学们来说，应该是知识体系库中的一个基础环节，同时对于有志成为前端架构师的同学来说是必备的知识技能。<br>但是对于很多前端同学来说，仅仅只是知道浏览器会对请求的静态文件进行缓存，但是为什么被缓存，缓存是怎样生效的，却并不是很清楚。<br>在此，我会尝试用简单明了的文字，像大家系统的介绍HTTP缓存机制，期望对各位正确的理解前端缓存有所帮助。<br><a id="more"></a></p>
</blockquote>
<h2 id="在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文"><a href="#在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文" class="headerlink" title="在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文"></a>在介绍HTTP缓存之前，作为知识铺垫，先简单介绍一下HTTP报文</h2><p>HTTP报文就是浏览器和服务器间通信时发送及响应的数据块。<br>浏览器向服务器请求数据，发送请求(request)报文；服务器向浏览器返回数据，返回响应(response)报文。<br>报文信息主要分为两部分<br>1.包含属性的首部(header)————————–附加信息（cookie，缓存信息等）<font color="red">与缓存相关的规则信息，均包含在header中</font><br>2.包含数据的主体部分(body)———————–HTTP请求真正想要传输的部分</p>
<h2 id="缓存规则解析"><a href="#缓存规则解析" class="headerlink" title="缓存规则解析"></a>缓存规则解析</h2><p>为方便大家理解，我们认为浏览器存在一个缓存数据库,用于存储缓存信息。<br>在客户端第一次请求数据时，此时缓存数据库中没有对应的缓存数据，需要请求服务器，服务器返回后，将数据存储至缓存数据库中。</p>
<p><img data-src="http-cache.png" alt="缓存规则解析"></p>
<p>HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为两大类(<font color="red">强制缓存，对比缓存</font>)<br>在详细介绍这两种规则之前，先通过时序图的方式，让大家对这两种规则有个简单了解。</p>
<blockquote>
<p>已存在缓存数据时，仅基于<font color="red">强制缓存</font>，请求数据的流程如下</p>
</blockquote>
<p><img data-src="http-cache-1.png" alt></p>
<blockquote>
<p>已存在缓存数据时，仅基于<font color="red">对比缓存</font>，请求数据的流程如下</p>
</blockquote>
<p><img data-src="http-cache-2.png" alt></p>
<p>对缓存机制不太了解的同学可能会问，基于<font color="red">对比缓存</font>的流程下，不管是否使用缓存，都需要向服务器发送请求，那么还用缓存干什么？<br>这个问题，我们暂且放下，后文在详细介绍每种缓存规则的时候，会带给大家答案。</p>
<p>我们可以看到两类缓存规则的不同，<font color="red">强制缓存</font>如果生效，不需要再和服务器发生交互，而<font color="red">对比缓存</font>不管是否生效，都需要与服务端发生交互。<br>两类缓存规则可以同时存在，<strong>强制缓存</strong>优先级高于<strong>对比缓存</strong>，也就是说，当执行<strong>强制缓存</strong>的规则时，如果缓存生效，直接使用缓存，不再执行<strong>对比缓存</strong>规则。</p>
<h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>从上文我们得知，强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，那么浏览器是<strong>如何判断缓存数据是否失效</strong>呢？<br>我们知道，在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，<strong>缓存规则信息包含在响应header</strong>中。</p>
<p>对于强制缓存来说，响应header中会有两个字段来标明失效规则（<strong>Expires/Cache-Control</strong>）<br>使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况</p>
<p><img data-src="http-cache-3.png" alt></p>
<h2 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><strong>Expires</strong></h2><p>Expires的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。<br>不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。<br>另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。<br>所以HTTP 1.1 的版本，使用<strong>Cache-Control</strong>替代。</p>
<h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><strong>Cache-Control</strong></h2><p>Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。<br><strong>private</strong>:        客户端可以缓存<br><strong>public</strong>:         客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）<br><strong>max-age=xxx</strong>:  缓存的内容将在 xxx 秒后失效<br><strong>no-cache</strong>:      需要使用对比缓存来验证缓存数据（后面介绍）<br><strong>no-store</strong>:       所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）</p>
<blockquote>
<p>举个板栗</p>
</blockquote>
<p><img data-src="http-cache-4.png" alt></p>
<p>图中Cache-Control仅指定了max-age，所以默认为private，缓存时间为31536000秒（365天）<br>也就是说，在365天内再次请求这条数据，都会直接获取缓存数据库中的数据，直接使用。</p>
<h2 id="对比缓存"><a href="#对比缓存" class="headerlink" title="对比缓存"></a>对比缓存</h2><p>对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。<br>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。<br>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。</p>
<p><strong>第一次访问：</strong></p>
<p><img data-src="http-cache-5.png" alt></p>
<p><strong>再次访问：</strong></p>
<p><img data-src="http-cache-6.png" alt></p>
<p>通过两图的对比，我们可以很清楚的发现，在<strong><em>对比缓存</em></strong>生效时，状态码为304，并且报文大小和请求时间大大减少。<br>原因是，服务端在进行标识比较后，只返回header部分，通过状态码通知客户端使用缓存，不再需要将报文主体部分返回给客户端。</p>
<p>对于对比缓存来说，缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，<br>一共分为两种标识传递，接下来，我们分开介绍。</p>
<h2 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a><strong>Last-Modified / If-Modified-Since</strong></h2><blockquote>
<p><strong>Last-Modified：</strong></p>
</blockquote>
<p>服务器在响应请求时，告诉浏览器资源的最后修改时间。</p>
<p><img data-src="http-cache-7.png" alt></p>
<blockquote>
<p><strong>If-Modified-Since：</strong></p>
</blockquote>
<p>再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。<br>服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。<br>若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br>若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</p>
<p><img data-src="http-cache-8.png" alt></p>
<h2 id="Etag-If-None-Match（优先级高于Last-Modified-If-Modified-Since）"><a href="#Etag-If-None-Match（优先级高于Last-Modified-If-Modified-Since）" class="headerlink" title="Etag / If-None-Match（优先级高于Last-Modified / If-Modified-Since）"></a><strong>Etag / If-None-Match</strong>（优先级高于Last-Modified / If-Modified-Since）</h2><blockquote>
<p><strong>Etag：</strong></p>
</blockquote>
<p>服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。</p>
<p><img data-src="http-cache-9.png" alt></p>
<blockquote>
<p><strong>If-None-Match：</strong></p>
</blockquote>
<p>再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。<br>服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，<br>不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；<br>相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。</p>
<p><img data-src="http-cache-10.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。<br>对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</strong></p>
<blockquote>
<p><strong>浏览器第一次请求：</strong></p>
</blockquote>
<p><img data-src="http-cache-11.png" alt></p>
<blockquote>
<p><strong>浏览器再次请求时：</strong></p>
</blockquote>
<p><img data-src="http-cache-12.png" alt></p>
]]></content>
      <tags>
        <tag>HTTP</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之作用域链</title>
    <url>/20190530-JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
    <content><![CDATA[<p><img data-src="js.jpg" alt="JavaScript深入系列"><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在《JavaScript深入之执行上下文栈》中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>
</blockquote>
<p>对于每个执行上下文，都有三个重要属性：</p>
<ul>
<li>变量对象(Variable object，VO)</li>
<li>作用域链(Scope chain)</li>
<li>this</li>
</ul>
<blockquote>
<p>今天重点讲讲作用域链。</p>
</blockquote>
<h1 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h1><p>在《JavaScript深入之变量对象》中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>
<p>下面，让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。</p>
<h1 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h1><p>在《JavaScript深入之词法作用域和动态作用域》中讲到，函数的作用域在函数定义的时候就决定了。</p>
<p>这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！</p>
<p>举个例子：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> </span>&#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>函数创建时，各自的[[scope]]为：<br><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs undefined">foo.<span class="hljs-string">[[scope]]</span> = [<br>  globalContext.VO<br>];<br><br>bar.<span class="hljs-string">[[scope]]</span> = [<br>    fooContext.AO,<br>    globalContext.VO<br>];<br></code></pre></td></tr></table></figure></p>
<h1 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h1><p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。</p>
<p>这时候执行上下文的作用域链，我们命名为 Scope：<br><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs undefined">Scope = [AO].<span class="hljs-built_in">concat</span>(<span class="hljs-string">[[Scope]]</span>);<br></code></pre></td></tr></table></figure></p>
<p>至此，作用域链创建完毕。</p>
<h1 id="捋一捋"><a href="#捋一捋" class="headerlink" title="捋一捋"></a>捋一捋</h1><p>以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">"global scope"</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkscope</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> scope2 = <span class="hljs-string">'local scope'</span>;<br>    <span class="hljs-keyword">return</span> scope2;<br>&#125;<br>checkscope();<br></code></pre></td></tr></table></figure></p>
<h1 id="执行过程如下："><a href="#执行过程如下：" class="headerlink" title="执行过程如下："></a>执行过程如下：</h1><ul>
<li><p>1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs undefined">checkscope.<span class="hljs-string">[[scope]]</span> = [<br>    globalContext.VO<br>];<br></code></pre></td></tr></table></figure>
</li>
<li><p>2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">ECStack</span> = [<br>    checkscopeContext,<br>    globalContext<br>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs undefined">checkscopeContext = &#123;<br>    Scope: checkscope.<span class="hljs-string">[[scope]]</span>,<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">checkscopeContext</span> = <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">AO</span>: <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">arguments</span>: <span class="hljs-string">&#123;</span><br>            <span class="hljs-attr">length</span>: <span class="hljs-string">0</span><br>        <span class="hljs-attr">&#125;,</span><br>        <span class="hljs-attr">scope2</span>: <span class="hljs-string">undefined</span><br>    <span class="hljs-attr">&#125;，</span><br>    <span class="hljs-attr">Scope</span>: <span class="hljs-string">checkscope.[[scope]],</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>5.第三步：将活动对象压入 checkscope 作用域链顶端</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">checkscopeContext</span> = <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">AO</span>: <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">arguments</span>: <span class="hljs-string">&#123;</span><br>            <span class="hljs-attr">length</span>: <span class="hljs-string">0</span><br>        <span class="hljs-attr">&#125;,</span><br>        <span class="hljs-attr">scope2</span>: <span class="hljs-string">undefined</span><br>    <span class="hljs-attr">&#125;,</span><br>    <span class="hljs-attr">Scope</span>: <span class="hljs-string">[AO, [[Scope]]]</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs undefined">checkscopeContext = &#123;<br>    AO: &#123;<br>        arguments: &#123;<br>            length: <span class="hljs-number">0</span><br>        &#125;,<br>        scope2: <span class="hljs-string">'local scope'</span><br>    &#125;,<br>    Scope: [AO, <span class="hljs-string">[[Scope]]</span>]<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">ECStack</span> = [<br>    globalContext<br>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript深入系列</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之从原型到原型链</title>
    <url>/20190308-JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8E%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/logo.jpg.jpg" alt><a id="more"></a></p>
<h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><p>我们先使用构造函数创建一个对象：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;<br><br>&#125;</span><br><span class="hljs-title">var</span> <span class="hljs-title">person</span> = <span class="hljs-title">new</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span>;</span><br>person.<span class="hljs-keyword">name</span> = <span class="hljs-string">'Kevin'</span>;<br>console.log(person.<span class="hljs-keyword">name</span>) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure></p>
<p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p>
<p>很简单吧，接下来进入正题：</p>
<h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-comment">// 虽然写在注释里，但是你要注意：</span><br><span class="hljs-comment">// prototype是函数才会有的属性</span><br>Person.prototype.name = <span class="hljs-string">'Kevin'</span>;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person1.name) <span class="hljs-comment">// Kevin</span><br><span class="hljs-built_in">console</span>.log(person2.name) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure></p>
<p>那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？</p>
<p>其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。</p>
<p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p>
<p>让我们用一张图表示构造函数和实例原型之间的关系：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/prototype1.png" alt="prototype1.png"><br>在这张图中我们用 Object.prototype 表示实例原型。</p>
<p>那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：</p>
<h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h2><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p>
<p>为了证明这一点,我们可以在火狐或者谷歌中输入：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></p>
<p>于是我们更新下关系图：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/prototype2.png" alt="prototype1.png"><br>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p>
<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p>
<p>为了验证这一点，我们可以尝试：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;<br><br>&#125;</span><br><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(Person === Person.prototype.<span class="hljs-keyword">constructor</span>)</span>;</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></p>
<p>所以再更新下关系图：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/prototype3.png" alt="prototype1.png"><br>综上我们已经得出：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;<br><br>&#125;</span><br><br><span class="hljs-title">var</span> <span class="hljs-title">person</span> = <span class="hljs-title">new</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span>;</span><br><br>console.log(person.__proto__ == Person.prototype) <span class="hljs-comment">// true</span><br>console.log(Person.prototype<span class="hljs-function">.<span class="hljs-keyword">constructor</span> == <span class="hljs-title">Person</span>) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span><br><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-keyword">Object</span>.getPrototypeOf(person)</span> === <span class="hljs-title">Person</span>.<span class="hljs-title">prototype</span>) <span class="hljs-comment">// true</span></span><br></code></pre></td></tr></table></figure></p>
<p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p>
<h2 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>
<p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br>Person.prototype.name = <span class="hljs-string">'Kevin'</span>;<br><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><br>person.name = <span class="hljs-string">'Daisy'</span>;<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// Daisy</span><br><br><span class="hljs-keyword">delete</span> person.name;<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure></p>
<p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。</p>
<p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.<strong>proto</strong> ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。</p>
<p>但是万一还没有找到呢？原型的原型又是什么呢？</p>
<h2 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h2><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> obj = new <span class="hljs-keyword">Object</span>();<br>obj.<span class="hljs-keyword">name</span> = <span class="hljs-string">'Kevin'</span><br>console.log(obj.<span class="hljs-keyword">name</span>) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure></p>
<p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/prototype4.png" alt="prototype1.png"></p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>那 Object.prototype 的原型呢？</p>
<p>null，我们可以打印：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__ === <span class="hljs-literal">null</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></p>
<p>然而 null 究竟代表了什么呢？</p>
<p>引用阮一峰老师的 《undefined与null的区别》 就是：<br><code>null 表示“没有对象”，即该处不应该有值。</code></p>
<p>所以 Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。</p>
<p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p>
<p>最后一张关系图也可以更新为：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/prototype5.png" alt="prototype1.png"><br>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>最后，补充三点大家可能不会注意的地方：</p>
<h3 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h3><p>首先是 constructor 属性，我们看个例子：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;<br><br>&#125;</span><br><span class="hljs-title">var</span> <span class="hljs-title">person</span> = <span class="hljs-title">new</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span>;</span><br>console.log(person<span class="hljs-function">.<span class="hljs-keyword">constructor</span> === <span class="hljs-title">Person</span>);</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></p>
<p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined">person<span class="hljs-function">.<span class="hljs-keyword">constructor</span> === <span class="hljs-title">Person</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">constructor</span></span><br></code></pre></td></tr></table></figure></p>
<h3 id="proto-1"><a href="#proto-1" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>其次是 <strong>proto</strong> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>
<h3 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h3><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p>
<p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>
]]></content>
      <categories>
        <category>JavaScript深入系列</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之从ECMAScript规范解读this</title>
    <url>/20190530-JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8EECMAScript%E8%A7%84%E8%8C%83%E8%A7%A3%E8%AF%BBthis/</url>
    <content><![CDATA[<p><img data-src="js.jpg" alt="JavaScript深入系列"><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在《JavaScript深入之执行上下文栈》中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>
<p>对于每个执行上下文，都有三个重要属性</p>
<ul>
<li>变量对象(Variable object，VO)</li>
<li>作用域链(Scope chain)</li>
<li>this</li>
</ul>
<blockquote>
<p>今天重点讲讲 this，然而不好讲。</p>
</blockquote>
<p>……</p>
<p>因为我们要从 ECMASciript5 规范开始讲起。</p>
<p>先奉上 ECMAScript 5.1 规范地址：</p>
<p>英文版：<a href="http://es5.github.io/#x15.1" target="_blank" rel="noopener">http://es5.github.io/#x15.1</a></p>
<p>中文版：<a href="http://yanhaijing.com/es5/#115" target="_blank" rel="noopener">http://yanhaijing.com/es5/#115</a></p>
<p>让我们开始了解规范吧！</p>
<h1 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h1><p>首先是第 8 章 Types：</p>
<blockquote>
<p>Types are further subclassified into ECMAScript language types and specification types.</p>
</blockquote>
<blockquote>
<p>An ECMAScript language type corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean, String, Number, and Object.</p>
</blockquote>
<blockquote>
<p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types are Reference, List, Completion, Property Descriptor, Property Identifier, Lexical Environment, and Environment Record.</p>
</blockquote>
<p>我们简单的翻译一下：</p>
<p>ECMAScript 的类型分为语言类型和规范类型。</p>
<p>ECMAScript 语言类型是开发者直接使用 ECMAScript 可以操作的。其实就是我们常说的Undefined, Null, Boolean, String, Number, 和 Object。</p>
<p>而规范类型相当于 meta-values，是用来用算法描述 ECMAScript 语言结构和 ECMAScript 语言类型的。规范类型包括：Reference, List, Completion, Property Descriptor, Property Identifier, Lexical Environment, 和 Environment Record。</p>
<p>没懂？没关系，我们只要知道在 ECMAScript 规范中还有一种只存在于规范中的类型，它们的作用是用来描述语言底层行为逻辑。</p>
<p>今天我们要讲的重点是便是其中的 Reference 类型。它与 this 的指向有着密切的关联。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>那什么又是 Reference ？</p>
<p>让我们看 8.7 章 The Reference Specification Type：</p>
<blockquote>
<p>The Reference type is used to explain the behaviour of such operators as delete, typeof, and the assignment operators.</p>
</blockquote>
<p>所以 Reference 类型就是用来解释诸如 delete、typeof 以及赋值等操作行为的。</p>
<p>抄袭尤雨溪大大的话，就是：</p>
<blockquote>
<p>这里的 Reference 是一个 Specification Type，也就是 “只存在于规范里的抽象类型”。它们是为了更好地描述语言的底层行为逻辑才存在的，但并不存在于实际的 js 代码中。</p>
</blockquote>
<p>再看接下来的这段具体介绍 Reference 的内容：</p>
<blockquote>
<p>A Reference is a resolved name binding.</p>
</blockquote>
<blockquote>
<p>A Reference consists of three components, the base value, the referenced name and the Boolean valued strict reference flag.</p>
</blockquote>
<blockquote>
<p>The base value is either undefined, an Object, a Boolean, a String, a Number, or an environment record (10.2.1).</p>
</blockquote>
<blockquote>
<p>A base value of undefined indicates that the reference could not be resolved to a binding. The referenced name is a String.</p>
</blockquote>
<p>这段讲述了 Reference 的构成，由三个组成部分，分别是：</p>
<ul>
<li>base value</li>
<li>referenced name</li>
<li>strict reference<br>可是这些到底是什么呢？</li>
</ul>
<p>我们简单的理解的话：</p>
<p>base value 就是属性所在的对象或者就是 EnvironmentRecord，它的值只可能是 undefined, an Object, a Boolean, a String, a Number, or an environment record 其中的一种。</p>
<p>referenced name 就是属性的名称。</p>
<p>举个例子：<br><figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 对应的Reference是：</span><br><span class="hljs-keyword">var</span> fooReference = &#123;<br>    <span class="hljs-keyword">base</span>: EnvironmentRecord,<br>    name: <span class="hljs-string">'foo'</span>,<br>    strict: <span class="hljs-literal">false</span><br>&#125;;<br></code></pre></td></tr></table></figure></p>
<p>再举个例子：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> foo = &#123;<br>    bar: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br> <br>foo.bar(); <span class="hljs-comment">// foo</span><br><br><span class="hljs-comment">// bar对应的Reference是：</span><br><span class="hljs-keyword">var</span> BarReference = &#123;<br>    base: foo,<br>    propertyName: <span class="hljs-string">'bar'</span>,<br>    strict: <span class="hljs-literal">false</span><br>&#125;;<br></code></pre></td></tr></table></figure></p>
<p>而且规范中还提供了获取 Reference 组成部分的方法，比如 GetBase 和 IsPropertyReference。</p>
<p>这两个方法很简单，简单看一看：</p>
<h2 id="1-GetBase"><a href="#1-GetBase" class="headerlink" title="1.GetBase"></a>1.GetBase</h2><blockquote>
<p>GetBase(V). Returns the base value component of the reference V.</p>
</blockquote>
<p>返回 reference 的 base value。</p>
<h2 id="2-IsPropertyReference"><a href="#2-IsPropertyReference" class="headerlink" title="2.IsPropertyReference"></a>2.IsPropertyReference</h2><blockquote>
<p>IsPropertyReference(V). Returns true if either the base value is an object or HasPrimitiveBase(V) is true; otherwise returns false.</p>
</blockquote>
<p>简单的理解：如果 base value 是一个对象，就返回true。</p>
<h1 id="GetValue"><a href="#GetValue" class="headerlink" title="GetValue"></a>GetValue</h1><p>除此之外，紧接着在 8.7.1 章规范中就讲了一个用于从 Reference 类型获取对应值的方法： GetValue。</p>
<p>简单模拟 GetValue 的使用：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">var</span> <span class="hljs-string">foo</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><br><br><span class="hljs-string">var</span> <span class="hljs-string">fooReference</span> <span class="hljs-string">=</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">base:</span> <span class="hljs-string">EnvironmentRecord,</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">'foo'</span><span class="hljs-string">,</span><br>    <span class="hljs-attr">strict:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">&#125;;</span><br><br><span class="hljs-string">GetValue(fooReference)</span> <span class="hljs-string">//</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><br></code></pre></td></tr></table></figure></p>
<p>GetValue 返回对象属性真正的值，但是要注意：</p>
<p>调用 GetValue，返回的将是具体的值，而不再是一个 Reference</p>
<p>这个很重要，这个很重要，这个很重要。</p>
<h1 id="如何确定this的值"><a href="#如何确定this的值" class="headerlink" title="如何确定this的值"></a>如何确定this的值</h1><p>关于 Reference 讲了那么多，为什么要讲 Reference 呢？到底 Reference 跟本文的主题 this 有哪些关联呢？如果你能耐心看完之前的内容，以下开始进入高能阶段：</p>
<p>看规范 11.2.3 Function Calls：</p>
<p>这里讲了当函数调用的时候，如何确定 this 的取值。</p>
<p>只看第一步、第六步、第七步：</p>
<ul>
<li><p>1.Let ref be the result of evaluating MemberExpression.</p>
</li>
<li><p>6.If Type(ref) is Reference, then</p>
<ul>
<li>a.If IsPropertyReference(ref) is true, then<ul>
<li>i.Let thisValue be GetBase(ref).</li>
</ul>
</li>
<li>b.Else, the base of ref is an Environment Record<ul>
<li>i.Let thisValue be the result of calling the ImplicitThisValue concrete method of GetBase(ref).</li>
</ul>
</li>
</ul>
</li>
<li><p>7.Else, Type(ref) is not Reference.</p>
<ul>
<li>a. Let thisValue be undefined.</li>
</ul>
</li>
</ul>
<p>让我们描述一下：</p>
<ul>
<li><p>1.计算 MemberExpression 的结果赋值给 ref</p>
</li>
<li><p>2.判断 ref 是不是一个 Reference 类型</p>
<ul>
<li><p>2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)</p>
</li>
<li><p>2.2 如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)</p>
</li>
<li><p>2.3 如果 ref 不是 Reference，那么 this 的值为 undefined</p>
</li>
</ul>
</li>
</ul>
<p>具体分析<br>让我们一步一步看：</p>
<h2 id="1-计算-MemberExpression-的结果赋值给-ref"><a href="#1-计算-MemberExpression-的结果赋值给-ref" class="headerlink" title="1.计算 MemberExpression 的结果赋值给 ref"></a>1.计算 MemberExpression 的结果赋值给 ref</h2><p>什么是 MemberExpression？看规范 11.2 Left-Hand-Side Expressions：</p>
<p>MemberExpression :<br><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs undefined">PrimaryExpression <span class="hljs-comment">// 原始表达式 可以参见《JavaScript权威指南第四章》</span><br>FunctionExpression <span class="hljs-comment">// 函数定义表达式</span><br>MemberExpression [ Expression ] <span class="hljs-comment">// 属性访问表达式</span><br>MemberExpression . IdentifierName <span class="hljs-comment">// 属性访问表达式</span><br><span class="hljs-keyword">new</span> <span class="hljs-type">MemberExpression</span> Arguments <span class="hljs-comment">// 对象创建表达式</span><br></code></pre></td></tr></table></figure></p>
<p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)<br>&#125;<br><br>foo(); <span class="hljs-comment">// MemberExpression 是 foo</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)<br>    &#125;<br>&#125;<br><br>foo()(); <span class="hljs-comment">// MemberExpression 是 foo()</span><br><br><span class="hljs-keyword">var</span> foo = &#123;<br>    <span class="hljs-attr">bar</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;<br><br>foo.bar(); <span class="hljs-comment">// MemberExpression 是 foo.bar</span><br></code></pre></td></tr></table></figure></p>
<p>所以简单理解 MemberExpression 其实就是()左边的部分。</p>
<h2 id="2-判断-ref-是不是一个-Reference-类型。"><a href="#2-判断-ref-是不是一个-Reference-类型。" class="headerlink" title="2.判断 ref 是不是一个 Reference 类型。"></a>2.判断 ref 是不是一个 Reference 类型。</h2><p>关键就在于看规范是如何处理各种 MemberExpression，返回的结果是不是一个Reference类型。</p>
<p>举最后一个例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> value = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">bar</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//示例1</span><br><span class="hljs-built_in">console</span>.log(foo.bar());<br><span class="hljs-comment">//示例2</span><br><span class="hljs-built_in">console</span>.log((foo.bar)());<br><span class="hljs-comment">//示例3</span><br><span class="hljs-built_in">console</span>.log((foo.bar = foo.bar)());<br><span class="hljs-comment">//示例4</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-literal">false</span> || foo.bar)());<br><span class="hljs-comment">//示例5</span><br><span class="hljs-built_in">console</span>.log((foo.bar, foo.bar)());<br>foo.bar()<br></code></pre></td></tr></table></figure></p>
<p>在示例 1 中，MemberExpression 计算的结果是 foo.bar，那么 foo.bar 是不是一个 Reference 呢？</p>
<p>查看规范 11.2.1 Property Accessors，这里展示了一个计算的过程，什么都不管了，就看最后一步：</p>
<blockquote>
<p>Return a value of type Reference whose base value is baseValue and whose referenced name is propertyNameString, and whose strict mode flag is strict.</p>
</blockquote>
<p>我们得知该表达式返回了一个 Reference 类型！</p>
<p>根据之前的内容，我们知道该值为：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">var</span> <span class="hljs-string">Reference</span> <span class="hljs-string">=</span> <span class="hljs-string">&#123;</span><br>  <span class="hljs-attr">base:</span> <span class="hljs-string">foo,</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">'bar'</span><span class="hljs-string">,</span><br>  <span class="hljs-attr">strict:</span> <span class="hljs-literal">false</span><br><span class="hljs-string">&#125;;</span><br></code></pre></td></tr></table></figure></p>
<p>接下来按照 2.1 的判断流程走：</p>
<p>2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)</p>
<p>该值是 Reference 类型，那么 IsPropertyReference(ref) 的结果是多少呢？</p>
<p>前面我们已经铺垫了 IsPropertyReference 方法，如果 base value 是一个对象，结果返回 true。</p>
<p>base value 为 foo，是一个对象，所以 IsPropertyReference(ref) 结果为 true。</p>
<p>这个时候我们就可以确定 this 的值了：<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">this</span> = GetBase(<span class="hljs-built_in">ref</span>)，<br></code></pre></td></tr></table></figure></p>
<p>GetBase 也已经铺垫了，获得 base value 值，这个例子中就是foo，所以 this 的值就是 foo ，示例1的结果就是 2！</p>
<p>唉呀妈呀，为了证明 this 指向foo，真是累死我了！但是知道了原理，剩下的就更快了。<br><figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs undefined">(<span class="hljs-name">foo.bar</span>)()<br></code></pre></td></tr></table></figure></p>
<p>看示例2：<br><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>((<span class="hljs-selector-tag">foo</span><span class="hljs-selector-class">.bar</span>)());<br></code></pre></td></tr></table></figure></p>
<p>foo.bar 被 () 包住，查看规范 11.1.6 The Grouping Operator</p>
<p>直接看结果部分：</p>
<blockquote>
<p>Return the result of evaluating Expression. This may be of type Reference.</p>
</blockquote>
<blockquote>
<p>NOTE This algorithm does not apply GetValue to the result of evaluating Expression.</p>
</blockquote>
<p>实际上 () 并没有对 MemberExpression 进行计算，所以其实跟示例 1 的结果是一样的。<br><figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs undefined">(<span class="hljs-name">foo.bar</span> = foo.bar)()<br></code></pre></td></tr></table></figure></p>
<p>看示例3，有赋值操作符，查看规范 11.13.1 Simple Assignment ( = ):</p>
<p>计算的第三步：</p>
<h2 id="3-Let-rval-be-GetValue-rref"><a href="#3-Let-rval-be-GetValue-rref" class="headerlink" title="3.Let rval be GetValue(rref)."></a>3.Let rval be GetValue(rref).</h2><p>因为使用了 GetValue，所以返回的值不是 Reference 类型，</p>
<p>按照之前讲的判断逻辑：</p>
<p>2.3 如果 ref 不是Reference，那么 this 的值为 undefined</p>
<p>this 为 undefined，非严格模式下，this 的值为 undefined 的时候，其值会被隐式转换为全局对象。<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs undefined">(<span class="hljs-name">false</span> || foo.bar)()<br></code></pre></td></tr></table></figure></p>
<p>看示例4，逻辑与算法，查看规范 11.11 Binary Logical Operators：</p>
<p>计算第二步：</p>
<p>2.Let lval be GetValue(lref).</p>
<p>因为使用了 GetValue，所以返回的不是 Reference 类型，this 为 undefined<br><figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs undefined">(<span class="hljs-name">foo.bar</span>, foo.bar)()<br></code></pre></td></tr></table></figure></p>
<p>看示例5，逗号操作符，查看规范11.14 Comma Operator ( , )</p>
<p>计算第二步：</p>
<p>2.Call GetValue(lref).</p>
<p>因为使用了 GetValue，所以返回的不是 Reference 类型，this 为 undefined</p>
<p>揭晓结果<br>所以最后一个例子的结果是：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> value = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">bar</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//示例1</span><br><span class="hljs-built_in">console</span>.log(foo.bar()); <span class="hljs-comment">// 2</span><br><span class="hljs-comment">//示例2</span><br><span class="hljs-built_in">console</span>.log((foo.bar)()); <span class="hljs-comment">// 2</span><br><span class="hljs-comment">//示例3</span><br><span class="hljs-built_in">console</span>.log((foo.bar = foo.bar)()); <span class="hljs-comment">// 1</span><br><span class="hljs-comment">//示例4</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-literal">false</span> || foo.bar)()); <span class="hljs-comment">// 1</span><br><span class="hljs-comment">//示例5</span><br><span class="hljs-built_in">console</span>.log((foo.bar, foo.bar)()); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<p>注意：以上是在非严格模式下的结果，严格模式下因为 this 返回 undefined，所以示例 3 会报错。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>最最后，忘记了一个最最普通的情况：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)<br>&#125;<br><br>foo(); <br>MemberExpression 是 foo，解析标识符，查看规范 <span class="hljs-number">10.3</span><span class="hljs-number">.1</span> Identifier Resolution，会返回一个 Reference 类型的值：<br><br><span class="hljs-keyword">var</span> fooReference = &#123;<br>    <span class="hljs-attr">base</span>: EnvironmentRecord,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'foo'</span>,<br>    <span class="hljs-attr">strict</span>: <span class="hljs-literal">false</span><br>&#125;;<br></code></pre></td></tr></table></figure></p>
<p>接下来进行判断：</p>
<h2 id="2-1-如果-ref-是-Reference，并且-IsPropertyReference-ref-是-true-那么-this-的值为-GetBase-ref"><a href="#2-1-如果-ref-是-Reference，并且-IsPropertyReference-ref-是-true-那么-this-的值为-GetBase-ref" class="headerlink" title="2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)"></a>2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)</h2><p>因为 base value 是 EnvironmentRecord，并不是一个 Object 类型，还记得前面讲过的 base value 的取值可能吗？ 只可能是 undefined, an Object, a Boolean, a String, a Number, 和 an environment record 中的一种。</p>
<p>IsPropertyReference(ref) 的结果为 false，进入下个判断：</p>
<h2 id="2-2-如果-ref-是-Reference，并且-base-value-值是-Environment-Record-那么this的值为-ImplicitThisValue-ref"><a href="#2-2-如果-ref-是-Reference，并且-base-value-值是-Environment-Record-那么this的值为-ImplicitThisValue-ref" class="headerlink" title="2.2 如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)"></a>2.2 如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)</h2><p>base value 正是 Environment Record，所以会调用 ImplicitThisValue(ref)</p>
<p>查看规范 10.2.1.1.6，ImplicitThisValue 方法的介绍：该函数始终返回 undefined。</p>
<p>所以最后 this 的值就是 undefined。</p>
<h1 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h1><p>尽管我们可以简单的理解 this 为调用函数的对象，如果是这样的话，如何解释下面这个例子呢？<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> value = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">bar</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log((<span class="hljs-literal">false</span> || foo.bar)()); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<p>此外，又如何确定调用函数的对象是谁呢？在写文章之初，我就面临着这些问题，最后还是放弃从多个情形下给大家讲解 this 指向的思路，而是追根溯源的从 ECMASciript 规范讲解 this 的指向，尽管从这个角度写起来和读起来都比较吃力，但是一旦多读几遍，明白原理，绝对会给你一个全新的视角看待 this 。而你也就能明白，尽管 foo() 和 (foo.bar = foo.bar)() 最后结果都指向了 undefined，但是两者从规范的角度上却有着本质的区别。</p>
<p>此篇讲解执行上下文的 this，即便不是很理解此篇的内容，依然不影响大家了解执行上下文这个主题下其他的内容。所以，依然可以安心的看下一篇文章。</p>
]]></content>
      <categories>
        <category>JavaScript深入系列</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之变量对象</title>
    <url>/20190313-JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/logo.jpg.jpg" alt><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上篇《JavaScript深入之执行上下文栈》中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>
<p>对于每个执行上下文，都有三个重要属性：</p>
<pre><code>- 变量对象(Variable object，VO)
- 作用域链(Scope chain)
- this
</code></pre><p>今天重点讲讲创建变量对象的过程。</p>
<h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p>
<p>因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。</p>
<h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>我们先了解一个概念，叫全局对象。在 W3School 中也有介绍：</p>
<blockquote>
<p>全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。</p>
</blockquote>
<blockquote>
<p>在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p>
</blockquote>
<blockquote>
<p>例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。</p>
</blockquote>
<p>如果看的不是很懂的话，容我再来介绍下全局对象:</p>
<h3 id="1-可以通过-this-引用，在客户端-JavaScript-中，全局对象就是-Window-对象。"><a href="#1-可以通过-this-引用，在客户端-JavaScript-中，全局对象就是-Window-对象。" class="headerlink" title="1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。"></a>1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs undefined">console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure>
<h3 id="2-全局对象是由-Object-构造函数实例化的一个对象。"><a href="#2-全局对象是由-Object-构造函数实例化的一个对象。" class="headerlink" title="2.全局对象是由 Object 构造函数实例化的一个对象。"></a>2.全局对象是由 Object 构造函数实例化的一个对象。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);<br></code></pre></td></tr></table></figure>
<h3 id="3-预定义了一堆，嗯，一大堆函数和属性。"><a href="#3-预定义了一堆，嗯，一大堆函数和属性。" class="headerlink" title="3.预定义了一堆，嗯，一大堆函数和属性。"></a>3.预定义了一堆，嗯，一大堆函数和属性。</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 都能生效</span><br>console.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">random</span>());<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">this</span>.Math.<span class="hljs-built_in">random</span>());<br></code></pre></td></tr></table></figure>
<h3 id="4-作为全局变量的宿主。"><a href="#4-作为全局变量的宿主。" class="headerlink" title="4.作为全局变量的宿主。"></a>4.作为全局变量的宿主。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.a);<br></code></pre></td></tr></table></figure>
<h3 id="5-客户端-JavaScript-中，全局对象有-window-属性指向自身。"><a href="#5-客户端-JavaScript-中，全局对象有-window-属性指向自身。" class="headerlink" title="5.客户端 JavaScript 中，全局对象有 window 属性指向自身。"></a>5.客户端 JavaScript 中，全局对象有 window 属性指向自身。</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a);<br><br><span class="hljs-keyword">this</span>.<span class="hljs-built_in">window</span>.b = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.b);<br></code></pre></td></tr></table></figure>
<p>花了一个大篇幅介绍全局对象，其实就想说：</p>
<p>全局上下文中的变量对象就是全局对象呐！</p>
<h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。</p>
<p>活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object 呐，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。</p>
<p>活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。</p>
<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：</p>
<pre><code>- 进入执行上下文
- 代码执行
</code></pre><h2 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h2><p>当进入执行上下文时，这时候还没有执行代码，</p>
<p>变量对象会包括：</p>
<pre><code>- 函数的所有形参 (如果是函数上下文)
    - 由名称和对应值组成的一个变量对象的属性被创建
    - 没有实参，属性值设为 undefined
- 函数声明
    - 由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建
    - 如果变量对象已经存在相同名称的属性，则完全替换这个属性
- 变量声明

    - 由名称和对应值（undefined）组成一个变量对象的属性被创建；
    - 如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性
</code></pre><p>举个例子：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">(a)</span> </span>&#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>  <span class="hljs-keyword">var</span> d = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br><br>  b = <span class="hljs-number">3</span>;<br><br>&#125;<br><br>foo(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></p>
<p>在进入执行上下文后，这时候的 AO 是：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">AO</span> <span class="hljs-string">=</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">arguments:</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">0:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br>        <span class="hljs-attr">length:</span> <span class="hljs-number">1</span><br>    <span class="hljs-string">&#125;,</span><br>    <span class="hljs-attr">a:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br>    <span class="hljs-attr">b:</span> <span class="hljs-string">undefined,</span><br>    <span class="hljs-attr">c:</span> <span class="hljs-string">reference</span> <span class="hljs-string">to</span> <span class="hljs-string">function</span> <span class="hljs-string">c()&#123;&#125;,</span><br>    <span class="hljs-attr">d:</span> <span class="hljs-string">undefined</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></p>
<h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><p>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值</p>
<p>还是上面的例子，当代码执行完后，这时候的 AO 是：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">AO</span> <span class="hljs-string">=</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">arguments:</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">0:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br>        <span class="hljs-attr">length:</span> <span class="hljs-number">1</span><br>    <span class="hljs-string">&#125;,</span><br>    <span class="hljs-attr">a:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br>    <span class="hljs-attr">b:</span> <span class="hljs-number">3</span><span class="hljs-string">,</span><br>    <span class="hljs-attr">c:</span> <span class="hljs-string">reference</span> <span class="hljs-string">to</span> <span class="hljs-string">function</span> <span class="hljs-string">c()&#123;&#125;,</span><br>    <span class="hljs-attr">d:</span> <span class="hljs-string">reference</span> <span class="hljs-string">to</span> <span class="hljs-string">FunctionExpression</span> <span class="hljs-string">"d"</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></p>
<p>到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：</p>
<ul>
<li><p>全局上下文的变量对象初始化是全局对象</p>
</li>
<li><p>函数上下文的变量对象初始化只包括 Arguments 对象</p>
</li>
<li><p>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</p>
</li>
<li><p>在代码执行阶段，会再次修改变量对象的属性值</p>
</li>
</ul>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>最后让我们看几个例子：</p>
<h3 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h3><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;<br>    console.log(a);<br>    a = 1;<br>&#125;</span><br><br><span class="hljs-title">foo</span><span class="hljs-params">()</span>;</span> <span class="hljs-comment">// ???</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;<br>    a = 1;<br>    console.log(a);<br>&#125;</span><br><span class="hljs-title">bar</span><span class="hljs-params">()</span>;</span> <span class="hljs-comment">// ???</span><br></code></pre></td></tr></table></figure>
<p>第一段会报错：<code>Uncaught ReferenceError: a is not defined。</code></p>
<p>第二段会打印：<code>1。</code></p>
<p>这是因为函数中的 “a” 并没有通过 var 关键字声明，所有不会被存放在 AO 中。</p>
<p>第一段执行 console 的时候， AO 的值是：<br><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">AO</span> = <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">arguments</span>: <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">length</span>: <span class="hljs-string">0</span><br>    <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure></p>
<p>没有 a 的值，然后就会到全局去找，全局也没有，所以会报错。</p>
<p>当第二段执行 console 的时候，全局对象已经被赋予了 a 属性，这时候就可以从全局找到 a 的值，所以会打印 1。</p>
<h3 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">console</span>.log(foo);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"foo"</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>
<p>会打印函数，而不是 <code>undefined</code>。</p>
<p>这是因为在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</p>
]]></content>
      <categories>
        <category>JavaScript深入系列</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript专题之函数柯里化</title>
    <url>/20190715-JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>维基百科中对柯里化 (Currying) 的定义为：</p>
<blockquote>
<p>In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument.</p>
</blockquote>
<p>翻译成中文：</p>
<p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。<br><a id="more"></a><br>举个例子：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b)</span> <span class="hljs-comment">&#123;<br>    return a + b;<br>&#125;</span><br><br><span class="hljs-comment">// 执行 add 函数，一次传入两个参数即可</span><br><span class="hljs-title">add</span><span class="hljs-params">(1, 2)</span> <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 假设有一个 curry 函数可以做到柯里化</span><br><span class="hljs-title">var</span> <span class="hljs-title">addCurry</span> = <span class="hljs-title">curry</span><span class="hljs-params">(add)</span>;</span><br>addCurry(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure></p>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>我们会讲到如何写出这个 curry 函数，并且会将这个 curry 函数写的很强大，但是在编写之前，我们需要知道柯里化到底有什么用？</p>
<p>举个例子：<br><figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 示意而已</span><br>function ajax(<span class="hljs-keyword">type</span>, url, <span class="hljs-built_in">data</span>) &#123;<br>    <span class="hljs-built_in">var</span> xhr = <span class="hljs-literal">new</span> XMLHttpRequest();<br>    xhr.open(<span class="hljs-keyword">type</span>, url, <span class="hljs-literal">true</span>);<br>    xhr.send(<span class="hljs-built_in">data</span>);<br>&#125;<br><br><span class="hljs-comment">// 虽然 ajax 这个函数非常通用，但在重复调用的时候参数冗余</span><br>ajax(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'www.test.com'</span>, <span class="hljs-string">"name=kevin"</span>)<br>ajax(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'www.test2.com'</span>, <span class="hljs-string">"name=kevin"</span>)<br>ajax(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'www.test3.com'</span>, <span class="hljs-string">"name=kevin"</span>)<br><br><span class="hljs-comment">// 利用 curry</span><br><span class="hljs-built_in">var</span> ajaxCurry = curry(ajax);<br><br><span class="hljs-comment">// 以 POST 类型请求数据</span><br><span class="hljs-built_in">var</span> post = ajaxCurry(<span class="hljs-string">'POST'</span>);<br>post(<span class="hljs-string">'www.test.com'</span>, <span class="hljs-string">"name=kevin"</span>);<br><br><span class="hljs-comment">// 以 POST 类型请求来自于 www.test.com 的数据</span><br><span class="hljs-built_in">var</span> postFromTest = post(<span class="hljs-string">'www.test.com'</span>);<br>postFromTest(<span class="hljs-string">"name=kevin"</span>);<br></code></pre></td></tr></table></figure></p>
<p>想想 jQuery 虽然有 $.ajax 这样通用的方法，但是也有 $.get 和 $.post 的语法糖。(当然 jQuery 底层是否是这样做的，我就没有研究了)。</p>
<p>curry 的这种用途可以理解为：参数复用。本质上是降低通用性，提高适用性。</p>
<p>可是即便如此，是不是依然感觉没什么用呢？</p>
<p>如果我们仅仅是把参数一个一个传进去，意义可能不大，但是如果我们是把柯里化后的函数传给其他函数比如 map 呢？</p>
<p>举个例子：</p>
<p>比如我们有这样一段数据：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs undefined">var person = [&#123;<span class="hljs-string">name:</span> <span class="hljs-string">'kevin'</span>&#125;, &#123;<span class="hljs-string">name:</span> <span class="hljs-string">'daisy'</span>&#125;]<br></code></pre></td></tr></table></figure></p>
<p>如果我们要获取所有的 name 值，我们可以这样做：<br><figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs undefined">var<span class="hljs-built_in"> name</span> = person.<span class="hljs-keyword">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-type">item</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">item</span><span class="hljs-built_in">.name</span>;<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<p>不过如果我们有 curry 函数：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> prop = curry(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(key, obj)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> obj[key]<br>&#125;);<br><br><span class="hljs-keyword">var</span> name = person.map(prop(<span class="hljs-string">'name'</span>))<br></code></pre></td></tr></table></figure></p>
<p>我们为了获取 name 属性还要再编写一个 prop 函数，是不是又麻烦了些？</p>
<p>但是要注意，prop 函数编写一次后，以后可以多次使用，实际上代码从原本的三行精简成了一行，而且你看代码是不是更加易懂了？</p>
<p><code>person.map(prop(&#39;name&#39;))</code> 就好像直白的告诉你：person 对象遍历(map)获取(prop) name 属性。</p>
<p>是不是感觉有点意思了呢？</p>
<h1 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h1><p>未来我们会接触到更多有关柯里化的应用，不过那是未来的事情了，现在我们该编写这个 curry 函数了。</p>
<p>一个经常会看到的 curry 函数的实现为：<br><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第一版</span><br><span class="hljs-keyword">var</span> curry = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>(fn) &#123;<br>    <span class="hljs-keyword">var</span> args = [].slice.call(arguments, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span></span>() &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Args</span> = args.concat([].slice.call(arguments));<br>        <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-built_in">this</span>, <span class="hljs-keyword">new</span><span class="hljs-type">Args</span>);<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></p>
<p>我们可以这样使用：<br><figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b)</span> <span class="hljs-comment">&#123;<br>    return a + b;<br>&#125;</span><br><br><span class="hljs-title">var</span> <span class="hljs-title">addCurry</span> = <span class="hljs-title">curry</span><span class="hljs-params">(<span class="hljs-keyword">add</span>, 1, 2)</span>;</span><br>addCurry() <span class="hljs-comment">// 3</span><br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">var</span> addCurry = curry(<span class="hljs-keyword">add</span>, <span class="hljs-number">1</span>);<br>addCurry(<span class="hljs-number">2</span>) <span class="hljs-comment">// 3</span><br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">var</span> addCurry = curry(<span class="hljs-keyword">add</span>);<br>addCurry(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure></p>
<p>已经有柯里化的感觉了，但是还没有达到要求，不过我们可以把这个函数用作辅助函数，帮助我们写真正的 curry 函数。</p>
<h1 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第二版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub_curry</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> args = [].slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, args.concat([].slice.call(<span class="hljs-built_in">arguments</span>)));<br>    &#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">fn, length</span>) </span>&#123;<br><br>    length = length || fn.length;<br><br>    <span class="hljs-keyword">var</span> slice = <span class="hljs-built_in">Array</span>.prototype.slice;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length &lt; length) &#123;<br>            <span class="hljs-keyword">var</span> combined = [fn].concat(slice.call(<span class="hljs-built_in">arguments</span>));<br>            <span class="hljs-keyword">return</span> curry(sub_curry.apply(<span class="hljs-keyword">this</span>, combined), length - <span class="hljs-built_in">arguments</span>.length);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>我们验证下这个函数：<br><figure class="highlight smalltalk"><table><tr><td class="code"><pre><code class="hljs undefined">var fn = curry(function(a, b, c) &#123;<br>    return [a, b, c];<br>&#125;);<br><br>fn(<span class="hljs-comment">"a"</span>, <span class="hljs-comment">"b"</span>, <span class="hljs-comment">"c"</span>) // [<span class="hljs-comment">"a"</span>, <span class="hljs-comment">"b"</span>, <span class="hljs-comment">"c"</span>]<br>fn(<span class="hljs-comment">"a"</span>, <span class="hljs-comment">"b"</span>)(<span class="hljs-comment">"c"</span>) // [<span class="hljs-comment">"a"</span>, <span class="hljs-comment">"b"</span>, <span class="hljs-comment">"c"</span>]<br>fn(<span class="hljs-comment">"a"</span>)(<span class="hljs-comment">"b"</span>)(<span class="hljs-comment">"c"</span>) // [<span class="hljs-comment">"a"</span>, <span class="hljs-comment">"b"</span>, <span class="hljs-comment">"c"</span>]<br>fn(<span class="hljs-comment">"a"</span>)(<span class="hljs-comment">"b"</span>, <span class="hljs-comment">"c"</span>) // [<span class="hljs-comment">"a"</span>, <span class="hljs-comment">"b"</span>, <span class="hljs-comment">"c"</span>]<br></code></pre></td></tr></table></figure></p>
<p>效果已经达到我们的预期，然而这个 curry 函数的实现好难理解呐……</p>
<p>为了让大家更好的理解这个 curry 函数，我给大家写个极简版的代码：<br><figure class="highlight scilab"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub_curry</span><span class="hljs-params">(fn)</span>&#123;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>        <span class="hljs-keyword">return</span> fn()<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span><span class="hljs-params">(fn, length)</span>&#123;</span><br>    <span class="hljs-built_in">length</span> = <span class="hljs-built_in">length</span> || <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> curry(sub_curry(fn), --<span class="hljs-built_in">length</span>)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> fn()<br>        &#125;<br>    &#125;<br>&#125;<br><br>var fn0 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>)<br>&#125;<br><br>var fn1 = curry(fn0)<br><br>fn1()()()() <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<p>大家先从理解这个 curry 函数开始。</p>
<p>当执行 fn1() 时，函数返回：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined">curry(sub_curry(fn0))<br><span class="hljs-comment">// 相当于</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> fn0()<br>&#125;)<br>当执行 fn1()() 时，函数返回：<br><br>curry(sub_curry(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> fn0()<br>&#125;))<br><span class="hljs-comment">// 相当于</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> fn0()<br>    &#125;)()<br>&#125;)<br><span class="hljs-comment">// 相当于</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> fn0()<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<p>当执行 fn1()()() 时，函数返回：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 跟 fn1()() 的分析过程一样</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> fn0()<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<p>当执行 fn1()()()() 时，因为此时 length &gt; 2 为 false，所以执行 fn()：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">// 相当于</span><br>(function()&#123;<br>    return fn0()<br>&#125;)()<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-function"><span class="hljs-title">fn0</span><span class="hljs-params">()</span></span><br><span class="hljs-comment">// 执行 fn0 函数，打印 1</span><br></code></pre></td></tr></table></figure></p>
<p>再回到真正的 curry 函数，我们以下面的例子为例：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> fn0 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a, b, c, d)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [a, b, c, d];<br>&#125;<br><br><span class="hljs-keyword">var</span> fn1 = curry(fn0);<br><br>fn1(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>)(<span class="hljs-string">"c"</span>)(<span class="hljs-string">"d"</span>)<br>当执行 fn1(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>) 时：<br><br>fn1(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>)<br><span class="hljs-comment">// 相当于</span><br>curry(fn0)(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>)<br><span class="hljs-comment">// 相当于</span><br>curry(sub_curry(fn0, <span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>))<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-comment">// 注意 ... 只是一个示意，表示该函数执行时传入的参数会作为 fn0 后面的参数传入</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...)&#123;<br>    return</span> fn0(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-rest_arg">...)<br>&#125;)</span></span></span><br></code></pre></td></tr></table></figure></p>
<p>当执行 fn1(“a”, “b”)(“c”) 时，函数返回：<br><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs undefined">curry(sub_curry(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> fn0(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, ...)<br>&#125;), <span class="hljs-string">"c"</span>)<br><span class="hljs-comment">// 相当于</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...</span>) </span>&#123;<span class="hljs-keyword">return</span> fn0(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, ...)&#125;)(<span class="hljs-string">"c"</span>)<br>&#125;)<br><span class="hljs-comment">// 相当于</span><br>curry(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...</span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> fn0(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, ...)<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<p>当执行 fn1(“a”, “b”)(“c”)(“d”) 时，此时 arguments.length &lt; length 为 false ，执行 fn(arguments)，相当于：<br><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs undefined">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> fn0(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, ...)<br>&#125;)(<span class="hljs-string">"d"</span>)<br><span class="hljs-comment">// 相当于</span><br>fn0(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>)<br></code></pre></td></tr></table></figure></p>
<p>函数执行结束。</p>
<p>所以，其实整段代码又很好理解：</p>
<p>sub_curry 的作用就是用函数包裹原函数，然后给原函数传入之前的参数，当执行 fn0(…)(…) 的时候，执行包裹函数，返回原函数，然后再调用 sub_curry 再包裹原函数，然后将新的参数混合旧的参数再传入原函数，直到函数参数的数目达到要求为止。</p>
<p>如果要明白 curry 函数的运行原理，大家还是要动手写一遍，尝试着分析执行步骤。</p>
<h1 id="更易懂的实现"><a href="#更易懂的实现" class="headerlink" title="更易懂的实现"></a>更易懂的实现</h1><p>当然了，如果你觉得还是无法理解，你可以选择下面这种实现方式，可以实现同样的效果：<br><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs undefined">function curry(fn, <span class="hljs-built_in">args</span>) &#123;<br>    <span class="hljs-built_in">var</span> <span class="hljs-built_in">length</span> = fn.<span class="hljs-built_in">length</span>;<br><br>    <span class="hljs-built_in">args</span> = <span class="hljs-built_in">args</span> || [];<br><br>    <span class="hljs-built_in">return</span> function() &#123;<br><br>        <span class="hljs-built_in">var</span> _args = <span class="hljs-built_in">args</span>.slice(<span class="hljs-number">0</span>),<br><br>            arg, i;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; arguments.<span class="hljs-built_in">length</span>; i++) &#123;<br><br>            arg = arguments[i];<br><br>            _args.<span class="hljs-built_in">push</span>(arg);<br><br>        &#125;<br>        <span class="hljs-keyword">if</span> (_args.<span class="hljs-built_in">length</span> &lt; <span class="hljs-built_in">length</span>) &#123;<br>            <span class="hljs-built_in">return</span> curry.call(this, fn, _args);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">return</span> fn.<span class="hljs-built_in">apply</span>(this, _args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-built_in">var</span> fn = curry(function(a, b, c) &#123;<br>    console.<span class="hljs-built_in">log</span>([a, b, c]);<br>&#125;);<br><br>fn(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>) // [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>]<br>fn(<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>)(<span class="hljs-string">"c"</span>) // [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>]<br>fn(<span class="hljs-string">"a"</span>)(<span class="hljs-string">"b"</span>)(<span class="hljs-string">"c"</span>) // [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>]<br>fn(<span class="hljs-string">"a"</span>)(<span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>) // [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>]<br></code></pre></td></tr></table></figure></p>
<p>或许大家觉得这种方式更好理解，又能实现一样的效果，为什么不直接就讲这种呢？</p>
<p>因为想给大家介绍各种实现的方法嘛，不能因为难以理解就不给大家介绍呐~</p>
<h1 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h1><p>curry 函数写到这里其实已经很完善了，但是注意这个函数的传参顺序必须是从左到右，根据形参的顺序依次传入，如果我不想根据这个顺序传呢？</p>
<p>我们可以创建一个占位符，比如这样：<br><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">var</span> <span class="hljs-meta">fn</span> = curry(<span class="hljs-meta">function</span>(a, <span class="hljs-keyword">b, </span>c) &#123;<br>    console.log([a, <span class="hljs-keyword">b, </span>c])<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br><br><span class="hljs-symbol">fn</span>(<span class="hljs-string">"a"</span>, _, <span class="hljs-string">"c"</span>)(<span class="hljs-string">"b"</span>) // [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>]<br></code></pre></td></tr></table></figure></p>
<p>我们直接看第三版的代码：<br><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs undefined">// 第三版<br>function curry(fn, <span class="hljs-built_in">args</span>, holes) &#123;<br>    <span class="hljs-built_in">length</span> = fn.<span class="hljs-built_in">length</span>;<br><br>    <span class="hljs-built_in">args</span> = <span class="hljs-built_in">args</span> || [];<br><br>    holes = holes || [];<br><br>    <span class="hljs-built_in">return</span> function() &#123;<br><br>        <span class="hljs-built_in">var</span> _args = <span class="hljs-built_in">args</span>.slice(<span class="hljs-number">0</span>),<br>            _holes = holes.slice(<span class="hljs-number">0</span>),<br>            argsLen = <span class="hljs-built_in">args</span>.<span class="hljs-built_in">length</span>,<br>            holesLen = holes.<span class="hljs-built_in">length</span>,<br>            arg, i, index = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; arguments.<span class="hljs-built_in">length</span>; i++) &#123;<br>            arg = arguments[i];<br>            // 处理类似 fn(<span class="hljs-number">1</span>, <span class="hljs-symbol">_</span>, <span class="hljs-symbol">_</span>, <span class="hljs-number">4</span>)(<span class="hljs-symbol">_</span>, <span class="hljs-number">3</span>) 这种情况，index 需要指向 holes 正确的下标<br>            <span class="hljs-keyword">if</span> (arg === <span class="hljs-symbol">_</span> &amp;&amp; holesLen) &#123;<br>                index++<br>                <span class="hljs-keyword">if</span> (index &gt; holesLen) &#123;<br>                    _args.<span class="hljs-built_in">push</span>(arg);<br>                    _holes.<span class="hljs-built_in">push</span>(argsLen - <span class="hljs-number">1</span> + index - holesLen)<br>                &#125;<br>            &#125;<br>            // 处理类似 fn(<span class="hljs-number">1</span>)(<span class="hljs-symbol">_</span>) 这种情况<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arg === <span class="hljs-symbol">_</span>) &#123;<br>                _args.<span class="hljs-built_in">push</span>(arg);<br>                _holes.<span class="hljs-built_in">push</span>(argsLen + i);<br>            &#125;<br>            // 处理类似 fn(<span class="hljs-symbol">_</span>, <span class="hljs-number">2</span>)(<span class="hljs-number">1</span>) 这种情况<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (holesLen) &#123;<br>                // fn(<span class="hljs-symbol">_</span>, <span class="hljs-number">2</span>)(<span class="hljs-symbol">_</span>, <span class="hljs-number">3</span>)<br>                <span class="hljs-keyword">if</span> (index &gt;= holesLen) &#123;<br>                    _args.<span class="hljs-built_in">push</span>(arg);<br>                &#125;<br>                // fn(<span class="hljs-symbol">_</span>, <span class="hljs-number">2</span>)(<span class="hljs-number">1</span>) 用参数 <span class="hljs-number">1</span> 替换占位符<br>                <span class="hljs-keyword">else</span> &#123;<br>                    _args.<span class="hljs-built_in">splice</span>(_holes[index], <span class="hljs-number">1</span>, arg);<br>                    _holes.<span class="hljs-built_in">splice</span>(index, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                _args.<span class="hljs-built_in">push</span>(arg);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">if</span> (_holes.<span class="hljs-built_in">length</span> || _args.<span class="hljs-built_in">length</span> &lt; <span class="hljs-built_in">length</span>) &#123;<br>            <span class="hljs-built_in">return</span> curry.call(this, fn, _args, _holes);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">return</span> fn.<span class="hljs-built_in">apply</span>(this, _args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">var</span> <span class="hljs-symbol">_</span> = &#123;&#125;;<br><br><span class="hljs-built_in">var</span> fn = curry(function(a, b, c, d, e) &#123;<br>    console.<span class="hljs-built_in">log</span>([a, b, c, d, e]);<br>&#125;);<br><br>// 验证 输出全部都是 [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>fn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>fn(<span class="hljs-symbol">_</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)(<span class="hljs-number">1</span>);<br>fn(<span class="hljs-number">1</span>, <span class="hljs-symbol">_</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)(<span class="hljs-number">2</span>);<br>fn(<span class="hljs-number">1</span>, <span class="hljs-symbol">_</span>, <span class="hljs-number">3</span>)(<span class="hljs-symbol">_</span>, <span class="hljs-number">4</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">5</span>);<br>fn(<span class="hljs-number">1</span>, <span class="hljs-symbol">_</span>, <span class="hljs-symbol">_</span>, <span class="hljs-number">4</span>)(<span class="hljs-symbol">_</span>, <span class="hljs-number">3</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">5</span>);<br>fn(<span class="hljs-symbol">_</span>, <span class="hljs-number">2</span>)(<span class="hljs-symbol">_</span>, <span class="hljs-symbol">_</span>, <span class="hljs-number">4</span>)(<span class="hljs-number">1</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript专题</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之词法作用域和动态作用域</title>
    <url>/20190308-JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/logo.jpg.jpg" alt><a id="more"></a></p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域是指程序源代码中定义变量的区域。</p>
<p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>
<p>JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。</p>
<h2 id="静态作用域与动态作用域"><a href="#静态作用域与动态作用域" class="headerlink" title="静态作用域与动态作用域"></a>静态作用域与动态作用域</h2><p>因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。</p>
<p>而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p>
<p>让我们认真看个例子就能明白之间的区别：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> value = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-number">2</span>;<br>    foo();<br>&#125;<br><br>bar();<br><br><span class="hljs-comment">// 结果是 ???</span><br></code></pre></td></tr></table></figure></p>
<p>假设JavaScript采用静态作用域，让我们分析下执行过程：</p>
<p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>
<p>假设JavaScript采用动态作用域，让我们分析下执行过程：</p>
<p>执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p>
<p>前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。</p>
<h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>也许你会好奇什么语言是动态作用域？</p>
<p>bash 就是动态作用域，不信的话，把下面的脚本存成例如 scope.bash，然后进入相应的目录，用命令行执行 bash ./scope.bash，看看打印的值是多少。<br><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs undefined">value=<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">echo</span> $value;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span> <span class="hljs-params">()</span> </span>&#123;<br>    local value=<span class="hljs-number">2</span>;<br>    foo;<br>&#125;<br>bar<br></code></pre></td></tr></table></figure></p>
<p>这个文件也可以在 <a href="https://github.com/mqyqingfeng/Blog/blob/master/demos/scope/scope.bash" target="_blank" rel="noopener">Github 博客</a>仓库中找到。</p>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>最后，让我们看一个《JavaScript权威指南》中的例子：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">"global scope"</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkscope</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">"local scope"</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f();<br>&#125;<br>checkscope();<br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">"global scope"</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkscope</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">"local scope"</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br>checkscope()();<br></code></pre></td></tr></table></figure></p>
<p>猜猜两段代码各自的执行结果是多少？</p>
<p>这里直接告诉大家结果，两段代码都会打印：local scope。</p>
<p>原因也很简单，因为JavaScript采用的是词法作用域，函数的作用域基于函数创建的位置。</p>
<p>而引用《JavaScript权威指南》的回答就是：</p>
<p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p>
<p>但是在这里真正想让大家思考的是：</p>
<p>虽然两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？</p>
<p>如果要回答这个问题，就要牵涉到很多的内容，词法作用域只是其中的一小部分，让我们期待下一篇文章————《JavaScript深入之执行上下文栈》。</p>
]]></content>
      <categories>
        <category>JavaScript深入系列</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中 apply 、call 的详解以及纠正</title>
    <url>/20190619-JavaScript-%E4%B8%AD-apply-%E3%80%81call-%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>原文摘自 <a href="https://github.com/lin-xin/blog/issues/7" target="_blank" rel="noopener">lin-xin/blog</a>， 对原文作者的部分观点不一致，文中会有指出。</p>
</blockquote>
<h1 id="apply-和-call-的区别"><a href="#apply-和-call-的区别" class="headerlink" title="apply 和 call 的区别"></a>apply 和 call 的区别</h1><p>ECMAScript 规范给所有函数都定义了 call 与 apply 两个方法，它们的应用非常广泛，它们的作用也是一模一样，只是传参的形式有区别而已。<br><a id="more"></a></p>
<h1 id="apply"><a href="#apply" class="headerlink" title="apply( )"></a>apply( )</h1><p>apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。<br><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined">var obj = &#123;<br>    name : <span class="hljs-string">'linxin'</span><br>&#125;<br><br>function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(firstName, lastName)</span>&#123;</span><br>    console.<span class="hljs-built_in">log</span>(firstName + <span class="hljs-string">' '</span> + this.name + <span class="hljs-string">' '</span> + lastName)<span class="hljs-comment">;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">apply</span><span class="hljs-params">(obj, [<span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>])</span>;    // <span class="hljs-title">A</span> <span class="hljs-title">linxin</span> <span class="hljs-title">B</span></span><br></code></pre></td></tr></table></figure></p>
<p>可以看到，obj 是作为函数上下文的对象，函数 func 中 this 指向了 obj 这个对象。参数 A 和 B 是放在数组中传入 func 函数，分别对应 func 参数的列表元素。</p>
<h1 id="call"><a href="#call" class="headerlink" title="call( )"></a>call( )</h1><p>call 方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组。<br><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined">var obj = &#123;<br>    name: <span class="hljs-string">'linxin'</span><br>&#125;<br><br>function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(firstName, lastName)</span> &#123;</span><br>    console.<span class="hljs-built_in">log</span>(firstName + <span class="hljs-string">' '</span> + this.name + <span class="hljs-string">' '</span> + lastName)<span class="hljs-comment">;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">call</span><span class="hljs-params">(obj, <span class="hljs-string">'C'</span>, <span class="hljs-string">'D'</span>)</span>;       // <span class="hljs-title">C</span> <span class="hljs-title">linxin</span> <span class="hljs-title">D</span></span><br></code></pre></td></tr></table></figure></p>
<p>对比 apply 我们可以看到区别，C 和 D 是作为单独的参数传给 func 函数，而不是放到数组中。</p>
<p>对于什么时候该用什么方法，其实不用纠结。如果你的参数本来就存在一个数组中，那自然就用 apply，如果参数比较散乱相互之间没什么关联，就用 call。</p>
<h1 id="apply-和-call-的用法"><a href="#apply-和-call-的用法" class="headerlink" title="apply 和 call 的用法"></a>apply 和 call 的用法</h1><h2 id="1-改变-this-指向"><a href="#1-改变-this-指向" class="headerlink" title="1.改变 this 指向"></a>1.改变 this 指向</h2><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined">var obj = &#123;<br>    name: <span class="hljs-string">'linxin'</span><br>&#125;<br><br>function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> &#123;</span><br>    console.<span class="hljs-built_in">log</span>(this.name)<span class="hljs-comment">;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">call</span><span class="hljs-params">(obj)</span>;       // <span class="hljs-title">linxin</span></span><br></code></pre></td></tr></table></figure>
<p>我们知道，call 方法的第一个参数是作为函数上下文的对象，这里把 obj 作为参数传给了 func，此时函数里的 this 便指向了 obj 对象。此处 func 函数里其实相当于<br><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined">function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> &#123;</span><br>    console.<span class="hljs-built_in">log</span>(obj.name)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure></p>
<h2 id="2-借用别的对象的方法"><a href="#2-借用别的对象的方法" class="headerlink" title="2.借用别的对象的方法"></a>2.借用别的对象的方法</h2><p>先看例子<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> Person1  = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">'linxin'</span>;<br>&#125;<br><span class="hljs-keyword">var</span> Person2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.getname = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);<br>    &#125;<br>    Person1.call(<span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person2();<br>person.getname();       <span class="hljs-comment">// linxin</span><br></code></pre></td></tr></table></figure></p>
<p>从上面我们看到，Person2 实例化出来的对象 person 通过 getname 方法拿到了 Person1 中的 name。因为在 Person2 中，Person1.call(this) 的作用就是使用 Person1 对象代替 this 对象，那么 Person2 就有了 Person1 中的所有属性和方法了，相当于 Person2 继承了 Person1 的属性和方法。</p>
<blockquote>
<p>针对作者说的这个第二点，理解不一致，<code>Person1.call(this);</code>我理解的是Person1中的this指向了Person2，因为call的立即执行，又执行了一遍Person1方法，Person1拥有了Person2的所有方法和属性。</p>
</blockquote>
<h2 id="3-调用函数"><a href="#3-调用函数" class="headerlink" title="3.调用函数"></a>3.调用函数</h2><p>apply、call 方法都会使函数立即执行，因此它们也可以用来调用函数。<br><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined">function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> &#123;</span><br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">'linxin'</span>)<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">call</span><span class="hljs-params">()</span>;            // <span class="hljs-title">linxin</span></span><br></code></pre></td></tr></table></figure></p>
<h1 id="call-和-bind-的区别"><a href="#call-和-bind-的区别" class="headerlink" title="call 和 bind 的区别"></a>call 和 bind 的区别</h1><p>在 EcmaScript5 中扩展了叫 bind 的方法，在低版本的 IE 中不兼容。它和 call 很相似，接受的参数有两部分，第一个参数是是作为函数上下文的对象，第二部分参数是个列表，可以接受多个参数。<br>它们之间的区别有以下两点。</p>
<h2 id="1-bind-发返回值是函数"><a href="#1-bind-发返回值是函数" class="headerlink" title="1.bind 发返回值是函数"></a>1.bind 发返回值是函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> obj = &#123;<br>    name: <span class="hljs-string">'linxin'</span><br>&#125;<br><br>function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    console.log(this.name);<br>&#125;<br><br><span class="hljs-keyword">var</span> func1 = <span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">bind</span><span class="hljs-params">(obj)</span>;</span><br>func1();                        <span class="hljs-comment">// linxin</span><br></code></pre></td></tr></table></figure>
<p>bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。而原函数 func 中的 this 并没有被改变，依旧指向全局对象 window。</p>
<h2 id="2-参数的使用"><a href="#2-参数的使用" class="headerlink" title="2.参数的使用"></a>2.参数的使用</h2><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined">function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b, c)</span> &#123;</span><br>    console.<span class="hljs-built_in">log</span>(a, b, c)<span class="hljs-comment">;</span><br>&#125;<br>var func1 = <span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">bind</span><span class="hljs-params">(null,<span class="hljs-string">'linxin'</span>)</span>;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span>)</span>;            // <span class="hljs-title">A</span> <span class="hljs-title">B</span> <span class="hljs-title">C</span></span><br>func1(<span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span>)<span class="hljs-comment">;           // linxin A B</span><br>func1(<span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span>)<span class="hljs-comment">;                // linxin B C</span><br><span class="hljs-function"><span class="hljs-keyword">func</span>.<span class="hljs-title">call</span><span class="hljs-params">(null, <span class="hljs-string">'linxin'</span>)</span>;      // <span class="hljs-title">linxin</span> <span class="hljs-title">undefined</span> <span class="hljs-title">undefined</span></span><br></code></pre></td></tr></table></figure>
<p>call 是把第二个及以后的参数作为 func 方法的实参传进去，而 func1 方法的实参实则是在 bind 中参数的基础上再往后排。</p>
<p>在低版本浏览器没有 bind 方法，我们也可以自己实现一个。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Function</span>.prototype.bind) &#123;<br>    <span class="hljs-built_in">Function</span>.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> self = <span class="hljs-keyword">this</span>,                        <span class="hljs-comment">// 保存原函数</span><br>            context = [].shift.call(<span class="hljs-built_in">arguments</span>), <span class="hljs-comment">// 保存需要绑定的this上下文</span><br>            args = [].slice.call(<span class="hljs-built_in">arguments</span>);    <span class="hljs-comment">// 剩余的参数转为数组</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                    <span class="hljs-comment">// 返回一个新函数</span><br>            self.apply(context,[].concat.call(args, [].slice.call(<span class="hljs-built_in">arguments</span>)));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动化部署之编写Pipeline的Groovy脚本</title>
    <url>/20190605-Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%B9%8B%E7%BC%96%E5%86%99Pipeline%E7%9A%84Groovy%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前项目的自动化部署越来越简便和成熟，项目开发过程中对前端项目的自动化部署做一下总结。通过Jenkins运行Groovy脚本实现对项目的自动化构建和部署。</p>
<h1 id="Jenkins的Config配置"><a href="#Jenkins的Config配置" class="headerlink" title="Jenkins的Config配置"></a>Jenkins的Config配置</h1><p><img data-src="1559728513400.jpg" alt="Jenkins的Config配置"><br><a id="more"></a></p>
<h1 id="脚本示例代码"><a href="#脚本示例代码" class="headerlink" title="脚本示例代码"></a>脚本示例代码</h1><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs undefined">def CDN_DIR = <span class="hljs-string">'/srv/dev/react'</span><br>node() &#123;<br>    stage(<span class="hljs-string">'Checkout'</span>)&#123;<br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo PROJECT = $&#123;params.PROJECT&#125;"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo INSTALL = $&#123;params.INSTALL&#125;"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo ENV = $&#123;params.ENV&#125;"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo FORCE = $&#123;params.FORCE&#125;"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo INIT = $&#123;params.INIT&#125;"</span><br><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo WORKSPACE = $WORKSPACE"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo BUILD_ID = $BUILD_ID"</span><br><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">'pwd'</span><br><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo BUILD_NUMBER = $BUILD_NUMBER"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo JOB_NAME = $JOB_NAME"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo JOB_BASE_NAME = $JOB_BASE_NAME"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo BUILD_TAG = $BUILD_TAG"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo EXECUTOR_NUMBER = $EXECUTOR_NUMBER"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo NODE_NAME = $NODE_NAME"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo NODE_LABELS = $NODE_LABELS"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo JENKINS_HOME = $JENKINS_HOME"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo JENKINS_URL = $JENKINS_URL"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo BUILD_URL = $BUILD_URL"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"echo JOB_URL = $JOB_URL"</span><br><br>        git branch: <span class="hljs-string">'dev-server'</span>, ur<span class="hljs-variable">l:</span> <span class="hljs-string">'ssh://git@******/******.git'</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">'git status'</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">'git branch'</span><br><br>    &#125;<br><br>    stage(<span class="hljs-string">'Initialize'</span>)&#123;<br>      <span class="hljs-keyword">if</span> (params.INSTALL)&#123;<br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"rm -rf node_modules"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"npm i"</span><br>      &#125;<br>    &#125;<br><br>    stage(<span class="hljs-string">'build'</span>)&#123;<br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"npm run build"</span><br>    &#125;<br><br>    stage(<span class="hljs-string">'Results'</span>) &#123;<br>      <span class="hljs-keyword">sh</span> <span class="hljs-string">"mkdir -p $&#123;WORKSPACE&#125;/archive"</span><br>      <span class="hljs-keyword">sh</span> <span class="hljs-string">"mkdir -p $&#123;WORKSPACE&#125;/archive/$&#123;BUILD_ID&#125;"</span><br>      <span class="hljs-keyword">sh</span> <span class="hljs-string">"zip -r $&#123;WORKSPACE&#125;/archive/$&#123;BUILD_ID&#125;/$&#123;JOB_NAME&#125;-$&#123;BUILD_ID&#125;.zip $&#123;WORKSPACE&#125;/dist/*"</span><br>      archiveArtifacts artifact<span class="hljs-variable">s:</span> <span class="hljs-string">'archive/**/*.zip'</span>, onlyIfSuccessfu<span class="hljs-variable">l:</span> true<br>    &#125;<br><br>    stage(<span class="hljs-string">'Publish'</span>) &#123;<br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"mkdir -p /srv"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"mkdir -p $&#123;CDN_DIR&#125;/$&#123;params.PROJECT&#125;"</span><br>        <span class="hljs-keyword">sh</span> <span class="hljs-string">"cp -r $&#123;WORKSPACE&#125;/dist/. $&#123;CDN_DIR&#125;/$&#123;params.PROJECT&#125;/"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>分析上述代码：<br>其中每个stage代表的是Jenkins中status的Stage View的每一块进度，脚本执行过程中按照顺序一次进行，如下图：</p>
<p><img data-src="1559728564856.jpg" alt="Stage View"></p>
<p>其中红框中圈出的部分即是脚本中依次书写的stage</p>
]]></content>
      <categories>
        <category>脚本</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Groovy</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript专题之跟着underscore学防抖</title>
    <url>/20190603-JavaScript%E4%B8%93%E9%A2%98%E4%B9%8B%E8%B7%9F%E7%9D%80underscore%E5%AD%A6%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<p><img data-src="WechatIMG513.jpeg" alt="JavaScript专题之跟着underscore学防抖"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端开发中会遇到一些频繁的事件触发，比如：</p>
<ul>
<li>window 的 resize、scroll</li>
<li>mousedown、mousemove</li>
<li>keyup、keydown<br>  ……</li>
</ul>
<p>为此，我们举个示例代码来了解事件如何频繁的触发：<br><a id="more"></a><br>我们写个 index.html 文件：<br><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-cmn-Hans"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"x-ua-compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge, chrome=1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>debounce<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>        <span class="hljs-selector-id">#container</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#444</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>        &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"container"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"debounce.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></p>
<p>debounce.js 文件的代码如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'container'</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserAction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    container.innerHTML = count++;<br>&#125;;<br><br>container.onmousemove = getUserAction;<br></code></pre></td></tr></table></figure></p>
<p>我们来看看效果：<br><img data-src="debounce.gif" alt="debounce"></p>
<p>从左边滑到右边就触发了 165 次 getUserAction 函数！</p>
<p>因为这个例子很简单，所以浏览器完全反应的过来，可是如果是复杂的回调函数或是 ajax 请求呢？假设 1 秒触发了 60 次，每个回调就必须在 1000 / 60 = 16.67ms 内完成，否则就会有卡顿出现。</p>
<p>为了解决这个问题，一般有两种解决方案：</p>
<ul>
<li>debounce 防抖</li>
<li>throttle 节流</li>
</ul>
<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>今天重点讲讲防抖的实现。</p>
<p>防抖的原理就是：你尽管触发事件，但是我一定在事件触发 n 秒后才执行，如果你在一个事件触发的 n 秒内又触发了这个事件，那我就以新的事件的时间为准，n 秒后才执行，总之，就是要等你触发完事件 n 秒内不再触发事件，我才执行，真是任性呐!</p>
<h1 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h1><p>根据这段表述，我们可以写第一版的代码：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第一版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span><span class="hljs-params">(func, wait)</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> timeout;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br>        clearTimeout(timeout)<br>        timeout = setTimeout(func, wait);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>如果我们要使用它，以最一开始的例子为例：<br><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">container.onmousemove</span> = debounce(getUserAction, <span class="hljs-number">1000</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<p>现在随你怎么移动，反正你移动完 1000ms 内不再触发，我才执行事件。看看使用效果：</p>
<p><img data-src="debounce-1.gif" alt="debounce 第一版"></p>
<p>顿时就从 165 次降低成了 1 次!</p>
<p>棒棒哒，我们接着完善它。</p>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>如果我们在 getUserAction 函数中 console.log(this)，在不使用 debounce 函数的时候，this 的值为：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs undefined">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"container"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure></p>
<p>但是如果使用我们的 debounce 函数，this 就会指向 Window 对象！</p>
<p>所以我们需要将 this 指向正确的对象。</p>
<p>我们修改下代码：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第二版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span><span class="hljs-params">(func, wait)</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> timeout;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-keyword">this</span>;<br><br>        clearTimeout(timeout)<br>        timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>            func.apply(context)<br>        &#125;, wait);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>现在 this 已经可以正确指向了。让我们看下个问题：</p>
<h1 id="event-对象"><a href="#event-对象" class="headerlink" title="event 对象"></a>event 对象</h1><p>JavaScript 在事件处理函数中会提供事件对象 event，我们修改下 getUserAction 函数：<br><figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span></span> getUserAction(e) &#123;<br>    console.<span class="hljs-built_in">log</span>(e);<br>    container.innerHTML = <span class="hljs-built_in">count</span>++;<br>&#125;;<br></code></pre></td></tr></table></figure></p>
<p>如果我们不使用 debouce 函数，这里会打印 MouseEvent 对象，如图所示：</p>
<h1 id="MouseEvent"><a href="#MouseEvent" class="headerlink" title="MouseEvent"></a>MouseEvent</h1><p>但是在我们实现的 debounce 函数中，却只会打印 undefined!</p>
<p>所以我们再修改一下代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第三版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> timeout;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br><br>        clearTimeout(timeout)<br>        timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            func.apply(context, args)<br>        &#125;, wait);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>到此为止，我们修复了两个小问题：</p>
<ul>
<li>this 指向</li>
<li>event 对象</li>
</ul>
<h1 id="立刻执行"><a href="#立刻执行" class="headerlink" title="立刻执行"></a>立刻执行</h1><p>这个时候，代码已经很是完善了，但是为了让这个函数更加完善，我们接下来思考一个新的需求。</p>
<p>这个需求就是：</p>
<p>我不希望非要等到事件停止触发后才执行，我希望立刻执行函数，然后等到停止触发 n 秒后，才可以重新触发执行。</p>
<p>想想这个需求也是很有道理的嘛，那我们加个 immediate 参数判断是否是立刻执行。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第四版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> timeout;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br><br>        <span class="hljs-keyword">if</span> (timeout) clearTimeout(timeout);<br>        <span class="hljs-keyword">if</span> (immediate) &#123;<br>            <span class="hljs-comment">// 如果已经执行过，不再执行</span><br>            <span class="hljs-keyword">var</span> callNow = !timeout;<br>            timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                timeout = <span class="hljs-literal">null</span>;<br>            &#125;, wait)<br>            <span class="hljs-keyword">if</span> (callNow) func.apply(context, args)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                func.apply(context, args)<br>            &#125;, wait);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>再来看看使用效果：<br><img data-src="debounce-4.gif" alt="debounce 第四版"></p>
<h1 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h1><p>此时注意一点，就是 getUserAction 函数可能是有返回值的，所以我们也要返回函数的执行结果，但是当 immediate 为 false 的时候，因为使用了 setTimeout ，我们将 func.apply(context, args) 的返回值赋给变量，最后再 return 的时候，值将会一直是 undefined，所以我们只在 immediate 为 true 的时候返回函数的执行结果。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第五版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> timeout, result;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br><br>        <span class="hljs-keyword">if</span> (timeout) clearTimeout(timeout);<br>        <span class="hljs-keyword">if</span> (immediate) &#123;<br>            <span class="hljs-comment">// 如果已经执行过，不再执行</span><br>            <span class="hljs-keyword">var</span> callNow = !timeout;<br>            timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                timeout = <span class="hljs-literal">null</span>;<br>            &#125;, wait)<br>            <span class="hljs-keyword">if</span> (callNow) result = func.apply(context, args)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                func.apply(context, args)<br>            &#125;, wait);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<h1 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h1><p>最后我们再思考一个小需求，我希望能取消 debounce 函数，比如说我 debounce 的时间间隔是 10 秒钟，immediate 为 true，这样的话，我只有等 10 秒后才能重新触发事件，现在我希望有一个按钮，点击后，取消防抖，这样我再去触发，就可以又立刻执行啦，是不是很开心？</p>
<p>为了这个需求，我们写最后一版的代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第六版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, wait, immediate</span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> timeout, result;<br><br>    <span class="hljs-keyword">var</span> debounced = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> context = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">arguments</span>;<br><br>        <span class="hljs-keyword">if</span> (timeout) clearTimeout(timeout);<br>        <span class="hljs-keyword">if</span> (immediate) &#123;<br>            <span class="hljs-comment">// 如果已经执行过，不再执行</span><br>            <span class="hljs-keyword">var</span> callNow = !timeout;<br>            timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                timeout = <span class="hljs-literal">null</span>;<br>            &#125;, wait)<br>            <span class="hljs-keyword">if</span> (callNow) result = func.apply(context, args)<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                func.apply(context, args)<br>            &#125;, wait);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;;<br><br>    debounced.cancel = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        clearTimeout(timeout);<br>        timeout = <span class="hljs-literal">null</span>;<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> debounced;<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>那么该如何使用这个 cancel 函数呢？依然是以上面的 demo 为例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'container'</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserAction</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    container.innerHTML = count++;<br>&#125;;<br><br><span class="hljs-keyword">var</span> setUseAction = debounce(getUserAction, <span class="hljs-number">10000</span>, <span class="hljs-literal">true</span>);<br><br>container.onmousemove = setUseAction;<br><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"button"</span>).addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    setUseAction.cancel();<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<p>演示效果如下：<br><img data-src="debounce-cancel.gif" alt="debounce-cancel"></p>
<p>至此我们已经完整实现了一个 underscore 中的 debounce 函数，恭喜，撒花！</p>
]]></content>
      <categories>
        <category>JavaScript专题</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React为什么要尽量使用const去声明element?</title>
    <url>/20190809-React%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8const%E5%8E%BB%E5%A3%B0%E6%98%8Eelement/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Kevin说</title>
    <url>/20190201-Kevin%E8%AF%B4/</url>
    <content><![CDATA[<p>气场<br>是一个人散发出来的<br>可以被别人感受到的一种隐形能量<br>也可以说是我们把握人和事物的能力<br>每个人都有气场<br>只不过大小不一<a id="more"></a><br>在我们接人待物时<br>实际上就是人与人<br>人与事物之间气场的博弈和碰撞<br>其结果是<br>或被吸引或达到平衡或被排斥<br>气场是随时间和环境不断变化的<br>人的气场不是依赖于天赋<br>而是一种人人都能轻易获得<br>并有可以改变命运的万能钥匙！<br>但有时候却是双刃剑！<br>那么如何增强自己的气场呢？<br>简单地说<br>就是顺应和把握自然规律！<br>越顺应自然规律气场就越大<br>一个人把自己看得越平凡越渺小<br>就越符合自然规律<br>因为在宇宙中<br>地球都是渺小的更何况人呼？<br>这样的人气场就越大<br>做事就越顺利心想事成得道多助<br>人们的目光总是被你吸引<br>不论你在做什么都能让你受人关注<br>正如<br>久旱逢甘露,他乡遇故知<br>洞房花烛夜金榜题名时<br>相反的<br>总是唯我独尊天老大我老二<br>认为自己了不起很不平凡<br>不如意就怨天尤人<br>这样就背离了自然规律<br>也就没有了气场<br>这种人往往事与愿违诸事不利失道寡助<br>恰似<br>少年丧父中年丧妻<br>老年丧子雪上加霜！</p>
<p>有些人<br>平时气场一般<br>但遇到突然降临的喜事<br>诸如<br>大到升了职中了奖买了车购了房<br>小到发工资奖金过春节喝点小酒<br>这时候的人<br>气场往往会成倍的增加<br>大到你自己可能都压不住的时候<br>膨胀得你自己都不认识自己<br>就危险了！<br>要潇洒一回荒唐一下<br>或吃点小亏就心存报复<br>一言不合就拳脚相加<br>借酒发疯嬉笑怒骂等等<br>干这种违背自然规律的事<br>其结果也就可想而知了</p>
<p>还是要心存感恩之心<br>做人低调处事低调<br>低调低调再低调<br>谦卑谦卑再谦卑！</p>
<p>啰嗦几句<br>您就权当涂鸦笑谈<br>Kevin在这里<br>给师哥师姐拜个早年啦<br>祝大家<br>节前高兴回家去<br>节后平安上班来！</p>
]]></content>
      <categories>
        <category>Kevin专栏</category>
      </categories>
      <tags>
        <tag>Kevin专栏</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之执行上下文栈</title>
    <url>/20190311-JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/logo.jpg.jpg" alt><a id="more"></a></p>
<h2 id="顺序执行？"><a href="#顺序执行？" class="headerlink" title="顺序执行？"></a>顺序执行？</h2><p>如果要问到 JavaScript 代码执行顺序的话，想必写过 JavaScript 的开发者都会有个直观的印象，那就是顺序执行，毕竟：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo1'</span>);<br><br>&#125;<br><br>foo();  <span class="hljs-comment">// foo1</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo2'</span>);<br><br>&#125;<br><br>foo(); <span class="hljs-comment">// foo2</span><br></code></pre></td></tr></table></figure></p>
<p>然而去看这段代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo1'</span>);<br><br>&#125;<br><br>foo();  <span class="hljs-comment">// foo2</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo2'</span>);<br><br>&#125;<br><br>foo(); <span class="hljs-comment">// foo2</span><br></code></pre></td></tr></table></figure></p>
<p>打印的结果却是两个 foo2。</p>
<p>刷过面试题的都知道这是因为 JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。</p>
<p>但是本文真正想让大家思考的是：这个“一段一段”中的“段”究竟是怎么划分的呢？</p>
<p>到底JavaScript引擎遇到一段怎样的代码时才会做“准备工作”呢？</p>
<h2 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h2><p>这就要说到 JavaScript 的可执行代码(executable code)的类型有哪些了？</p>
<p>其实很简单，就三种，全局代码、函数代码、eval代码。</p>
<p>举个例子，当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做”执行上下文(execution context)”。</p>
<h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>接下来问题来了，我们写的函数多了去了，如何管理创建的那么多执行上下文呢？</p>
<p>所以 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文</p>
<p>为了模拟执行上下文栈的行为，让我们定义执行上下文栈是一个数组：<br><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">ECStack</span> = []<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<p>试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以程序结束之前， ECStack 最底部永远有个 globalContext：<br><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">ECStack</span> = [<br>    globalContext<br>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<p>现在 JavaScript 遇到下面的这段代码了：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun3</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fun3'</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    fun3();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    fun2();<br>&#125;<br><br>fun1();<br></code></pre></td></tr></table></figure></p>
<p>当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。知道了这样的工作原理，让我们来看看如何处理上面这段代码：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 伪代码</span><br><br><span class="hljs-comment">// fun1()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;fun1&gt; functionContext);<br><br><span class="hljs-comment">// fun1中竟然调用了fun2，还要创建fun2的执行上下文</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;fun2&gt; functionContext);<br><br><span class="hljs-comment">// 擦，fun2还调用了fun3！</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;fun3&gt; functionContext);<br><br><span class="hljs-comment">// fun3执行完毕</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// fun2执行完毕</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// fun1执行完毕</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext</span><br></code></pre></td></tr></table></figure></p>
<h2 id="解答思考题"><a href="#解答思考题" class="headerlink" title="解答思考题"></a>解答思考题</h2><p>好啦，现在我们已经了解了执行上下文栈是如何处理执行上下文的，所以让我们看看上篇文章《JavaScript深入之词法作用域和动态作用域》最后的问题：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">"global scope"</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkscope</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">"local scope"</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f();<br>&#125;<br>checkscope();<br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">"global scope"</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkscope</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">"local scope"</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br>checkscope()();<br></code></pre></td></tr></table></figure></p>
<p>两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？</p>
<p>答案就是执行上下文栈的变化不一样。</p>
<p>让我们模拟第一段代码：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;checkscope&gt; functionContext);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;f&gt; functionContext);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure></p>
<p>让我们模拟第二段代码：<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;checkscope&gt; functionContext);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>push(&lt;f&gt; functionContext);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ECStack</span>.</span></span>pop<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure></p>
<p>是不是有些不同呢？</p>
<p>当然了，这样概括的回答执行上下文栈的变化不同，是不是依然有一种意犹未尽的感觉呢，为了更详细讲解两个函数执行上的区别，我们需要探究一下执行上下文到底包含了哪些内容，所以欢迎阅读下一篇《JavaScript深入之变量对象》。</p>
]]></content>
      <categories>
        <category>JavaScript深入系列</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React之Ref</title>
    <url>/20210817-React%E4%B9%8BRef/</url>
    <content><![CDATA[<h4 id="什么是refs"><a href="#什么是refs" class="headerlink" title="什么是refs"></a>什么是refs</h4><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</p>
<p><strong><em>在组件<code>mount</code>之后再去获取<code>ref</code>。<code>componentWillMount</code>和第一次<code>render</code>时都获取不到，在<code>componentDidMount</code>才能获取到</em></strong><br><a id="more"></a></p>
<h4 id="refs的使用方式"><a href="#refs的使用方式" class="headerlink" title="refs的使用方式"></a>refs的使用方式</h4><h5 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h5><ul>
<li><p>字符串（string ref） <em>React v16.3 之前</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// string ref</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  componentDidMount() &#123;<br>    <span class="hljs-keyword">this</span>.refs.myRef.focus();<br>  &#125;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"myRef"</span> /&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>回调函数（callback ref）<em>React v16.3 之前</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// callback ref</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  componentDidMount() &#123;<br>    <span class="hljs-keyword">this</span>.myRef.focus();<br>  &#125;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(ele)</span> =&gt;</span> &#123;<br>      this.myRef = ele;<br>    &#125;&#125; /&gt;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>React.createRef <em>React v16.3提出</em> <strong><em>简单有效的方案</em></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// React.createRef</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-keyword">constructor</span>(props) &#123;<br>    <span class="hljs-keyword">super</span>(props);<br>    <span class="hljs-keyword">this</span>.myRef = React.createRef();<br>  &#125;<br>  componentDidMount() &#123;<br>    <span class="hljs-keyword">this</span>.myRef.current.focus();<br>  &#125;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> /&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h5><ul>
<li><p>useRef</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> refContainer = useRef(initialValue);<br></code></pre></td></tr></table></figure>
<p>useRef返回一个可变的ref对象,其<code>.current</code>属性被初始化为传入的参数<code>(initialValue)</code>。返回的ref对象在整个生命周期内保持不变。</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TextInputWithFocusButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 关键代码，`current` 指向已挂载到 DOM 上的文本输入元素</span><br>    inputEl.current.focus();<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputEl&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>
<p>先通过<code>useRef</code>创建一个ref对象<code>inputEl</code>，点击button，然后再将<code>inputEl</code>赋值给<code>input</code>的<code>ref</code>,最后，通过<code>inputEl.current.focus()</code>就可以让input聚焦。</p>
<p>假如 input不是一个dom元素，而是一个子组件，就需要用到<strong><em>forwardRef</em></strong>。</p>
<h5 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h5><p>将input单独封装成一个组件<code>TextInput</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> TextInput =  forwardRef(<span class="hljs-function">(<span class="hljs-params">props,ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br>&#125;)<br></code></pre></td></tr></table></figure>
<p>然后用<code>TextInputWithFocusButton</code>调用它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TextInputWithFocusButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 关键代码，`current` 指向已挂载到 DOM 上的文本输入元素</span><br>    inputEl.current.focus();<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputEl&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextInput</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>
<p>可以看到React.forwardRef 接受一个渲染函数，其接收 props 和 ref 参数并返回一个 React 节点。<br>这样我们就将父组件中创建的<code>ref</code>转发进子组件，并赋值给子组件的input元素，进而可以调用它的focus方法。<br>至此为止，通过useRef+forwardRef，我们就可以在函数式组件中使用ref了。</p>
<p>有时候，我们可能不想将整个子组件暴露给父组件，而只是暴露出父组件需要的值或者方法，这样可以让代码更加明确。而<code>useImperativeHandle</code>Api就是帮助我们做这件事的。</p>
<h5 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h5><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">useImperativeHandle(ref, createHandle, [deps])<br></code></pre></td></tr></table></figure>
<p><code>useImperativeHandle</code> 可以让你在使用 ref 时自定义暴露给父组件的实例值。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*子组件*/</span><br><span class="hljs-keyword">const</span> TextInput =  forwardRef(<span class="hljs-function">(<span class="hljs-params">props,ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> inputRef = useRef();<br>  <span class="hljs-comment">// 关键代码</span><br>  useImperativeHandle(ref, () =&gt; (&#123;<br>    <span class="hljs-attr">focus</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>      inputRef.current.focus();<br>    &#125;<br>  &#125;));<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br>&#125;)<br><br><span class="hljs-comment">/*父组件*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TextInputWithFocusButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 关键代码，`current` 指向已挂载到 DOM 上的文本输入元素</span><br>    inputEl.current.focus();<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputEl&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextInput</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这样，我们也可以使用current.focus()来事input聚焦。这里要注意的是，子组件TextInput中的useRef对象，只是用来获取input元素的，大家不要和父组件的useRef混淆了。</p>
<h6 id="回调Ref"><a href="#回调Ref" class="headerlink" title="回调Ref"></a>回调Ref</h6><p>当 <code>ref</code>对象内容发生变化时，<code>useRef</code> 并不会通知你。变更 <code>.current</code>属性不会引发组件重新渲染，通俗点就是子组件的数据更新不会实时传到子组件，看下面这个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*父组件*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TextInputWithFocusButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-string">""</span>);<br>  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    setValue(inputEl.current.value);<br>  &#125;, [inputEl]);<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"input值"</span>, inputEl.current.value);<br>    setValue(inputEl.current.value);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        子组件: <span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputEl&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextInput</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        父组件: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; /&gt;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onButtonClick&#125;</span>&gt;</span>获得值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">/*子组件*/</span><br><span class="hljs-keyword">const</span> TextInput = forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-string">""</span>);<br>  <span class="hljs-keyword">const</span> inputRef = useRef();<br>  useImperativeHandle(ref, () =&gt; (&#123;<br>    <span class="hljs-attr">value</span>: inputRef.current.value,<br>  &#125;));<br>  <span class="hljs-keyword">const</span> changeValue = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    setValue(e.target.value);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;changeValue&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></figure>
<p>父组件获取不到子组件实时的值，必须点击按钮才能获取到，即使我写了<code>useEffect</code>，希望它在<code>inputEl</code>改变的时候，重新设置<code>value</code>的值。</p>
<p>修改后的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*父组件*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TextInputWithFocusButton</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-string">""</span>);<br>  <span class="hljs-keyword">const</span> inputEl = useCallback(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"TCL: TextInputWithFocusButton -&gt; node.value"</span>, node.value)<br>      setValue(node.value);<br>    &#125;<br>  &#125;, []);<br>  <br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        子组件: <span class="hljs-tag">&lt;<span class="hljs-name">TextInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputEl&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TextInput</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        父组件: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; /&gt;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-comment">/*子组件*/</span><br><span class="hljs-keyword">const</span> TextInput =  forwardRef(<span class="hljs-function">(<span class="hljs-params">props,ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-string">''</span>)<br>  <span class="hljs-keyword">const</span> inputRef = useRef();<br>  useImperativeHandle(ref, () =&gt; (&#123;<br>    <span class="hljs-attr">value</span>: inputRef.current.value<br>  &#125;));<br>  <span class="hljs-keyword">const</span> changeValue = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span>&#123;<br>    setValue(e.target.value);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;changeValue&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br>&#125;)<br></code></pre></td></tr></table></figure>
<p>输入时，父组件就可以实时地拿到子组件输入的值了。<br>这里比较关键的代码就是使用<code>useCallback</code>代替了<code>useRef</code>，<code>callback ref</code>会将当前ref的值变化通知到父组件。</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul>
<li>对input/video/audio需要控制时，例如输入框焦点、媒体播放状态</li>
<li>触发强制动画</li>
<li>集成第三方库（传递 dom 节点进去）</li>
</ul>
<blockquote>
<p>注意：如果能使用props实现，应该尽量避免使用refs实现</p>
</blockquote>
<h4 id="ref拿到的到底是什么"><a href="#ref拿到的到底是什么" class="headerlink" title="ref拿到的到底是什么"></a>ref拿到的到底是什么</h4><p>很多文章里面说ref拿到的是真实DOM节点。其实这种说法很笼统。也很让人困惑，上面看到拿到的要么是实例（我们自定义组件）要么是component的_hostNode属性，这个好像不是真实DOM</p>
<ul>
<li>什么是_hostNode？</li>
</ul>
<p>是通过document.createElement方法创建的element对象。只是这时候对象保存在了虚拟DOM中，然后再塞入真实DOM树。所以说_hostNode和真实DOM树中的DOM的关系就是不同对象的不同属性指向的同一块存储空间，引用着同一个值而已。</p>
<p>虽然是通过虚拟DOM的_hostNode拿到这个值，但是对他的操作会体现在真实DOM节点上。说白了就是对象的引用赋值。<br>所以，ref拿到的是真实DOM的引用这个说法更准确。</p>
<blockquote>
<p>参考：<a href="https://segmentfault.com/a/1190000011290823" target="_blank" rel="noopener">源码看React—- ref</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React基于jest+enzyme测试工具的测试技巧</title>
    <url>/20200618-React%E5%9F%BA%E4%BA%8Ejest-enzyme%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%9A%84%E6%B5%8B%E8%AF%95%E6%89%8B%E6%B3%95/</url>
    <content><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul>
<li>jest: 支持断言、Mock、Snapchat、Async测试、测试覆盖率等</li>
<li>enzyme：模拟了jQuery的APi，比较直观，学习使用都比较简单</li>
</ul>
<h2 id="测试的原则"><a href="#测试的原则" class="headerlink" title="测试的原则"></a>测试的原则</h2><ul>
<li>测试代码时，只考虑测试，不考虑内部实现</li>
<li>数据尽量模拟现实，越靠近现实越好</li>
<li>==对重点、复杂、核心代码，重点测试==</li>
<li>利用AOP(beforeEach、afterEach),减少测试代码数量，避免无用功能<br>测试、功能开发相结合，有利于设计和代码重构</li>
<li>测试过程中出现 Bug 的情况</li>
</ul>
<p>店东贷采用的是BDD的测试手法，通过代码对原有业务需求的理解，对代码质量以及业务逻辑进行的测试代码的开发，在测试的过程中，将店东贷的主要业务逻辑进行了提取，从而进行的单元测试用例编写。<a id="more"></a></p>
<h2 id="测试技巧"><a href="#测试技巧" class="headerlink" title="测试技巧"></a>测试技巧</h2><p>开始测试之前，我们先来了解下每个工具。</p>
<h3 id="Enzyme的三种渲染方式"><a href="#Enzyme的三种渲染方式" class="headerlink" title="Enzyme的三种渲染方式"></a>Enzyme的三种渲染方式</h3><p>首先是准备了待测组件<code>button.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> React, &#123; PureComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<br><span class="hljs-keyword">import</span> Empty <span class="hljs-keyword">from</span> <span class="hljs-string">'./../../client/components/Empty'</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PureComponent</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span>(props) &#123;<br>        <span class="hljs-keyword">super</span>(props);<br>        <span class="hljs-keyword">this</span>.state = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">""</span><br>        &#125;;<br>    &#125;<br>    componentDidMount () &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentDidMount'</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.state.name) &#123;<br>            <span class="hljs-keyword">this</span>.setState(&#123;<br>                <span class="hljs-attr">name</span>: <span class="hljs-keyword">this</span>.props.value<br>            &#125;);<br>        &#125;<br>    &#125;<br>    render() &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Empty</span> <span class="hljs-attr">text</span>=<span class="hljs-string">"无数据"</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> &#123;<span class="hljs-attr">...this.props</span>&#125; /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Button;<br></code></pre></td></tr></table></figure>
<p>为了区别shallow和render的区别，增加了一个empty的子组件, dom结构如下：<br><figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">'empty-view-wrapper'</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=</span></span><span class="hljs-template-variable">&#123;EmptyImg&#125;</span><span class="xml"><span class="hljs-tag"> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">'text-content'</span>&gt;</span></span><span class="hljs-template-variable">&#123;text&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p>
<h4 id="浅层渲染shallow-Rendering"><a href="#浅层渲染shallow-Rendering" class="headerlink" title="浅层渲染shallow Rendering"></a>浅层渲染<code>shallow Rendering</code></h4><p>根据官方的说法是说，通过这种渲染方式，可以访问到React的生命周期方法。而且，shallow只能渲染当前组件，只能对当前组件做断言，不涉及到子组件的渲染。</p>
<p>测试用例==button.test.js==, shallow渲染生成对应的快照对比:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined">wrapper = shallow(&lt;Button &#123;...props&#125; /&gt;);<br>expect(<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">wrapper</span>)</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">MatchSnapshot()</span>;<br></code></pre></td></tr></table></figure>
<p><code>shallow snapshot</code>:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">// Jest <span class="hljs-keyword">Snapshot</span> v1, https://goo.gl/fbAQLP<br><br>exports[`Button:  <span class="hljs-keyword">snapshot</span>： <span class="hljs-number">1</span>`] = `<br>&lt;div&gt;<br>  &lt;Empty<br>    <span class="hljs-type">text</span>="无数据"<br>  /&gt;<br>  &lt;button<br>    <span class="hljs-keyword">type</span>="success"<br>    <span class="hljs-keyword">value</span>="提交"<br>  /&gt;<br>&lt;/div&gt;<br>`;<br></code></pre></td></tr></table></figure>
<h4 id="完全渲染full-Rendering"><a href="#完全渲染full-Rendering" class="headerlink" title="完全渲染full Rendering"></a>完全渲染<code>full Rendering</code></h4><p>会渲染当前组件以及所有子组件。</p>
<p><code>mount snapshot</code>:<br><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs undefined">// Jest Snapshot v1, https://goo.gl/fbAQLP<br><br>exports[`Button:  snapshot： 1`] = `<br><span class="hljs-tag">&lt;<span class="hljs-name">Button</span><br>  <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span><br>  <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span><br>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Empty</span><br>      <span class="hljs-attr">text</span>=<span class="hljs-string">"无数据"</span><br>    &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span><br>        <span class="hljs-attr">className</span>=<span class="hljs-string">"empty-view-wrapper"</span><br>      &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span><br>          <span class="hljs-attr">src</span>=<span class="hljs-string">"test-file-stub"</span><br>        /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span><br>          <span class="hljs-attr">className</span>=<span class="hljs-string">"text-content"</span><br>        &gt;</span><br>          无数据<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Empty</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span><br>      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;[Function]&#125;</span><br>      <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span><br>      <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span><br>    /&gt;</span><br>    提交<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>`;<br></code></pre></td></tr></table></figure></p>
<h4 id="静态渲染static-Rendering"><a href="#静态渲染static-Rendering" class="headerlink" title="静态渲染static Rendering"></a>静态渲染<code>static Rendering</code></h4><p><code>render snapshot</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs undefined">// Jest Snapshot v1, https://goo.gl/fbAQLP<br><br>exports[`Button:  snapshot： 1`] = `<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span><br>    <span class="hljs-attr">class</span>=<span class="hljs-string">"empty-view-wrapper"</span><br>  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span><br>      <span class="hljs-attr">src</span>=<span class="hljs-string">"test-file-stub"</span><br>    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span><br>      <span class="hljs-attr">class</span>=<span class="hljs-string">"text-content"</span><br>    &gt;</span><br>      无数据<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span><br>    <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span><br>    <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span><br>  /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>`;<br></code></pre></td></tr></table></figure>
<h3 id="enzyme常用API及示例："><a href="#enzyme常用API及示例：" class="headerlink" title="enzyme常用API及示例："></a>enzyme常用API及示例：</h3><h4 id="find-selector-gt-ShallowWrapper"><a href="#find-selector-gt-ShallowWrapper" class="headerlink" title=".find(selector) =&gt; ShallowWrapper"></a>.find(selector) =&gt; ShallowWrapper</h4><p>根据选择器查找节点，selector可以是CSS中的选择器，也可以是组件的构造函数，以及组件的display name等；</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs undefined">const wrapper = shallow(&lt;<span class="hljs-type">Button</span> &#123;...props&#125; /&gt;);<br>wrapper.find(<span class="hljs-symbol">'button</span>[<span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"success"</span>]'); <span class="hljs-comment">// 就能找到button这个dom节点</span><br></code></pre></td></tr></table></figure>
<h4 id="props-gt-Object"><a href="#props-gt-Object" class="headerlink" title=".props() =&gt; Object"></a>.props() =&gt; Object</h4><p>返回根组件的所有属性;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">expect(<span class="hljs-keyword">wrapper</span>.find(<span class="hljs-string">'button[type="success"]'</span>).props().<span class="hljs-keyword">value</span>).toEqual(<span class="hljs-string">'提交'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="prop-key-gt-Any"><a href="#prop-key-gt-Any" class="headerlink" title=".prop(key) =&gt; Any"></a>.prop(key) =&gt; Any</h4><p>返回根组件的指定属性;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">expect(<span class="hljs-keyword">wrapper</span>.find(<span class="hljs-string">'button[type="success"]'</span>).prop(<span class="hljs-string">'value'</span>)).toEqual(<span class="hljs-string">'提交'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="state-key-gt-Any"><a href="#state-key-gt-Any" class="headerlink" title=".state([key]) =&gt; Any"></a>.state([key]) =&gt; Any</h4><p>返回根组件的状态;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">expect(<span class="hljs-keyword">wrapper</span>.state().name).toEqual(<span class="hljs-string">'提交'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="setState-nextState-gt-ShallowWrapper"><a href="#setState-nextState-gt-ShallowWrapper" class="headerlink" title=".setState(nextState) =&gt; ShallowWrapper"></a>.setState(nextState) =&gt; ShallowWrapper</h4><p>设置根组件的状态;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">const state = &#123;<br>    <span class="hljs-type">name</span>: <span class="hljs-string">'先提交'</span>,<br>&#125;;<br><span class="hljs-keyword">wrapper</span>.setState(state);<br>expect(<span class="hljs-keyword">wrapper</span>.state().name).toEqual(<span class="hljs-string">'先提交'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="setProps-nextProps-callback-gt-ShallowWrapper"><a href="#setProps-nextProps-callback-gt-ShallowWrapper" class="headerlink" title=".setProps(nextProps[, callback]) =&gt; ShallowWrapper"></a>.setProps(nextProps[, callback]) =&gt; ShallowWrapper</h4><p>设置根组件的props属性;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">const newProps = &#123;<br>    <span class="hljs-keyword">type</span>: <span class="hljs-string">'success'</span>,<br>    <span class="hljs-keyword">value</span>: <span class="hljs-string">'提交'</span><br>&#125;;<br><span class="hljs-keyword">wrapper</span>.setProps(newProps);<br>expect(<span class="hljs-keyword">wrapper</span>.find(<span class="hljs-string">'button[type="success"]'</span>).props().<span class="hljs-keyword">value</span>).toEqual(<span class="hljs-string">'提交'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="text-gt-String"><a href="#text-gt-String" class="headerlink" title=".text() =&gt; String"></a>.text() =&gt; String</h4><p>返回当前组件的文本内容;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">const <span class="hljs-keyword">wrapper</span> = shallow(&lt;div&gt;&lt;b&gt;important&lt;/b&gt;&lt;/div&gt;);<br>expect(<span class="hljs-keyword">wrapper</span>.text()).<span class="hljs-keyword">to</span>.equal(<span class="hljs-string">'important'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="html-gt-String"><a href="#html-gt-String" class="headerlink" title=".html() =&gt; String"></a>.html() =&gt; String</h4><p>返回当前组件的HTML代码形式;<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">const <span class="hljs-keyword">wrapper</span> = shallow(&lt;div&gt;&lt;b&gt;important&lt;/b&gt;&lt;/div&gt;);<br>expect(<span class="hljs-keyword">wrapper</span>.html()).<span class="hljs-keyword">to</span>.equal(<span class="hljs-string">'&lt;div&gt;&lt;b&gt;important&lt;/b&gt;&lt;/div&gt;'</span>);<br></code></pre></td></tr></table></figure></p>
<h4 id="simulate-event-…args-gt-Self"><a href="#simulate-event-…args-gt-Self" class="headerlink" title=".simulate(event[, …args]) =&gt; Self"></a>.simulate(event[, …args]) =&gt; Self</h4><p>用来模拟事件触发，event为事件名称，mock为一个event object;</p>
<p>对button组件稍微修改下：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(props)</span> <span class="hljs-comment">&#123;<br>    super(props);<br>    this.state = &#123;<br>        name: "",<br>        count: 0 // 新增count，点击时改变count值<br>    &#125;</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-regexp">//</span> 新增count变化的事件<br><span class="hljs-function"><span class="hljs-title">change</span> = <span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">this</span>.setState(&#123;<br>        count: <span class="hljs-number">1</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs undefined">&lt;button &#123;...<span class="hljs-keyword">this</span>.props&#125; onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.change()&#125; /&gt;<br></code></pre></td></tr></table></figure>
<p>测试用例：<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">it("simulate()的使用方法: ", () =&gt; &#123;<br>    expect(<span class="hljs-keyword">wrapper</span>.state().count).toEqual(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">wrapper</span>.find(<span class="hljs-string">'button'</span>).simulate(<span class="hljs-string">'click'</span>);<br>    expect(<span class="hljs-keyword">wrapper</span>.state().count).toEqual(<span class="hljs-number">1</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></p>
<h4 id="……等Api方法"><a href="#……等Api方法" class="headerlink" title="……等Api方法"></a>……等Api方法</h4><h3 id="jest-fn-和-spyOn"><a href="#jest-fn-和-spyOn" class="headerlink" title="jest ==.fn()== 和 ==.spyOn()=="></a>jest ==.fn()== 和 ==.spyOn()==</h3><h4 id="jest-fn-implementation-gt-mockFn"><a href="#jest-fn-implementation-gt-mockFn" class="headerlink" title="jest.fn(implementation) =&gt; mockFn"></a>jest.fn(implementation) =&gt; mockFn</h4><p><code>jest.fn()</code>是创建Mock函数最简单的方式，如果没有定义函数内部的实现，<code>jest.fn()</code>会返回<code>undefined</code>作为返回值。<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs undefined">test('stub: ' , () =&gt; &#123;<br>  let mockFn = jest.fn()<span class="hljs-comment">;</span><br>  let result = mockFn(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">;</span><br>  // 断言mockFn的执行后返回undefined<br>  expect(<span class="hljs-name">result</span>).toBeUndefined()<span class="hljs-comment">;</span><br>  // 断言mockFn被调用<br>  expect(<span class="hljs-name">mockFn</span>).toBeCalled()<span class="hljs-comment">;</span><br>  // 断言mockFn被调用了一次<br>  expect(<span class="hljs-name">mockFn</span>).toBeCalledTimes(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>  // 断言mockFn传入的参数为<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br>  expect(<span class="hljs-name">mockFn</span>).toHaveBeenCalledWith(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<p><code>jest.fn()</code>所创建的Mock函数还可以设置返回值，定义内部实现或返回<code>Promise</code>对象。<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined">test('测试jest.fn<span class="hljs-literal">()</span>返回固定值',<span class="hljs-function"> <span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> mockFn = jest.fn<span class="hljs-literal">()</span>.mock<span class="hljs-constructor">ReturnValue('<span class="hljs-params">default</span>')</span>;<br>  <span class="hljs-comment">// 断言mockFn执行后返回值为default</span><br>  expect(mock<span class="hljs-constructor">Fn()</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Be('<span class="hljs-params">default</span>')</span>;<br>&#125;)<br><br>test('测试jest.fn<span class="hljs-literal">()</span>内部实现',<span class="hljs-function"> <span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> mockFn = jest.fn((num1, num2) =&gt; &#123;<br>    return num1<span class="hljs-operator"> * </span>num2;<br>  &#125;)<br>  <span class="hljs-comment">// 断言mockFn执行后返回100</span><br>  expect(mock<span class="hljs-constructor">Fn(10, 10)</span>).<span class="hljs-keyword">to</span><span class="hljs-constructor">Be(100)</span>;<br>&#125;)<br><br>test('测试jest.fn<span class="hljs-literal">()</span>返回Promise', async<span class="hljs-function"> <span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> mockFn = jest.fn<span class="hljs-literal">()</span>.mock<span class="hljs-constructor">ResolvedValue('<span class="hljs-params">default</span>')</span>;<br>  <span class="hljs-keyword">let</span> result = await mock<span class="hljs-constructor">Fn()</span>;<br>  <span class="hljs-comment">// 断言mockFn通过await关键字执行后返回值为default</span><br>  expect(result).<span class="hljs-keyword">to</span><span class="hljs-constructor">Be('<span class="hljs-params">default</span>')</span>;<br>  <span class="hljs-comment">// 断言mockFn调用后返回的是Promise对象</span><br>  expect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype.toString.call(mock<span class="hljs-constructor">Fn()</span>)).<span class="hljs-keyword">to</span><span class="hljs-constructor">Be(<span class="hljs-string">"[object Promise]"</span>)</span>;<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<h4 id="jest-spyOn-object-methodName-gt-mockFn"><a href="#jest-spyOn-object-methodName-gt-mockFn" class="headerlink" title="jest.spyOn(object, methodName) =&gt; mockFn"></a>jest.spyOn(object, methodName) =&gt; mockFn</h4><p><code>jest.spyOn()</code>方法同样创建一个<code>mock</code>函数，但是该<code>mock</code>函数不仅能够捕获函数的调用情况，还可以正常的执行被<code>spy</code>的函数。实际上，<code>jest.spyOn()</code>是<code>jest.fn()</code>的语法糖，它创建了一个和被<code>spy</code>的函数具有相同内部代码的<code>mock</code>函数。</p>
<p>声明一个方法<br><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">const</span> myObj = &#123;<br>  doSomething() &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">'does something'</span>)<span class="hljs-comment">;</span><br>  &#125;<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<p><code>.fn()</code>和<code>.spyOn()</code>的一个对比：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs undefined">test('stub .toBeCalled()', () =&gt; &#123;<br>  const stub = jest.fn()<span class="hljs-comment">;</span><br>  stub()<span class="hljs-comment">;</span><br>  expect(<span class="hljs-name">stub</span>).toBeCalled()<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br>test('spyOn .toBeCalled()', () =&gt; &#123;<br>  const somethingSpy = jest.spyOn(<span class="hljs-name">myObj</span>, 'doSomething')<span class="hljs-comment">;</span><br>  myObj.doSomething()<span class="hljs-comment">;</span><br>  expect(<span class="hljs-name">somethingSpy</span>).toBeCalled()<span class="hljs-comment">;</span><br>  somethingSpy.mockRestore()<span class="hljs-comment">; // 由于创建 spy 时，Jest 实际上修改了 myObj 对象的 doSomething 属性，所以在断言完成后，我们还要通过 mockRestore 来恢复 myObj 对象原本的 doSomething 方法</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>
<p><code>.fn()</code>和<code>.spyOn()</code>的简单理解:</p>
<ul>
<li>.fn()<ul>
<li>想模拟一个函数，而实际上并不关心该函数的内部实现</li>
<li>只是想模拟一个方法的返回值</li>
</ul>
</li>
<li>.spyOn()<ul>
<li>能将对象上的现有的方法转换为<code>spy</code>, 重新定义原始对象的实现，并覆盖原始对象的实现，完成后，还要通过<code>mockRestore()</code>恢复对象原本的方法</li>
</ul>
</li>
</ul>
<h3 id="生命周期测试"><a href="#生命周期测试" class="headerlink" title="生命周期测试"></a>生命周期测试</h3><p>待测组件button.js, 测试case:<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">let</span> props = &#123;<br>    <span class="hljs-keyword">type</span>: 'success',<br>    value: '提交'<br>&#125;;<br><span class="hljs-keyword">let</span> wrapper = shallow(&lt;Button &#123;...props&#125; /&gt;);<br>const spy = jest.spy<span class="hljs-constructor">On(Button.<span class="hljs-params">prototype</span>, '<span class="hljs-params">componentDidMount</span>')</span>;<br><br>wrapper.instance<span class="hljs-literal">()</span>.component<span class="hljs-constructor">DidMount()</span>; <span class="hljs-comment">// 实例化调用下组件</span><br>expect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Button</span>.</span></span>prototype.componentDidMount.mock.calls.length).<span class="hljs-keyword">to</span><span class="hljs-constructor">Be(1)</span>; <span class="hljs-comment">// expect(spy).toHaveBeenCalledTimes(1);</span><br>expect(wrapper.state<span class="hljs-literal">()</span>.name).<span class="hljs-keyword">to</span><span class="hljs-constructor">Equal('提交')</span>;<br></code></pre></td></tr></table></figure></p>
<h3 id="异步测试"><a href="#异步测试" class="headerlink" title="异步测试"></a>异步测试</h3><h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4><p>例如，我们通过<code>setTimeOut</code>模拟一个回调异步，返回一个<code>data</code>对象：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchData = <span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">'ok'</span>,<br>        <span class="hljs-attr">content</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">'bob'</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>        &#125;<br>    &#125;;<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> cb(data);<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>默认情况下，一旦到达运行上下文底部，jest测试立即结束。这样意味着这个测试将不能按预期工作。<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> &#123; fetchData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./fetch'</span>;<br>test(<span class="hljs-string">"async test: "</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    const cb = <span class="hljs-function"><span class="hljs-params">(data)</span> =&gt;</span> &#123;<br>        expect(data.code).toEqual(<span class="hljs-number">200</span>);<br>        <span class="hljs-regexp">//</span> done();<br>    &#125;<br>    fetchData(cb);<br>&#125;);<br></code></pre></td></tr></table></figure></p>
<p>按照上面写的测试用例，不管返回的code是不是200，都会执行成功，并不能正确按照我们的期望进行测试，问题在于一旦fetchData执行结束，此测试就在没有调用回调函数前结束。</p>
<p>还有另一种形式的 test，解决此问题。 使用单个参数调用 done，而不是将测试放在一个空参数的函数。 Jest会等done回调函数执行结束后，结束测试。<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs undefined">test(<span class="hljs-string">"async test: "</span>, (<span class="hljs-name">done</span>) =&gt; &#123;<br>    const cb = (<span class="hljs-name">data</span>) =&gt; &#123;<br>        expect(<span class="hljs-name">data</span>.code).toEqual(<span class="hljs-number">200</span>)<span class="hljs-comment">;</span><br>        done()<span class="hljs-comment">;</span><br>    &#125;<br>    fetchData(<span class="hljs-name">cb</span>)<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>如果您的代码使用 Promises，还有一个更简单的方法来处理异步测试。 只需要从您的测试返回一个承诺, Jest 会等待这一承诺来解决。 如果承诺被拒绝，则测试将自动失败。</p>
<p>模拟一个Promise待测请求：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fetchData = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">'ok'</span>,<br>        <span class="hljs-attr">content</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">'bob'</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(data);<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>通过expect.assertions，表示必须执行完一次expect的断言才算结束：<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs undefined">test(<span class="hljs-string">"async test: "</span>, () =&gt; &#123;<br>    expect.assertions(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>    fetchData().then(<span class="hljs-name">data</span> =&gt; &#123;<br>        expect(<span class="hljs-name">data</span>.code).toEqual(<span class="hljs-number">200</span>)<span class="hljs-comment">;</span><br>    &#125;)<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<p>或者通过Async/await进行测试：<br><figure class="highlight lisp"><table><tr><td class="code"><pre><code class="hljs undefined">test(<span class="hljs-string">"async test: "</span>, async () =&gt; &#123;<br>    const res = await fetchData()<span class="hljs-comment">;</span><br>    expect(<span class="hljs-name">res</span>.code).toEqual(<span class="hljs-number">200</span>)<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></p>
<hr>
<p>【参考资料】</p>
<p><a href="https://doc.ebichu.cc/jest/" target="_blank" rel="noopener">Jest文档</a></p>
<p><a href="https://github.com/enzymejs/enzyme" target="_blank" rel="noopener">Enzyme github</a></p>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>单元测试</tag>
        <tag>前端</tag>
        <tag>Jest</tag>
        <tag>Enzyme</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记</title>
    <url>/20190520-React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img data-src="https://leanote.com/api/file/getImage?fileId=5ce4b38eab644104960052ae" alt="图片标题"></p>
<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><blockquote>
<p>什么是React？Vue跟React相比的区别是哪些？为什么大厂都会选择React？</p>
</blockquote>
<a id="more"></a>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>设计模式<ul>
<li>React采用的是MVC模式（严格的view层）；Vue采用的是MVVM模式；<a href="http://blog.leanote.com/post/houchaowei/MVC%EF%BC%8CMVP%E5%92%8CMVVM%E7%9A%84%E5%9B%BE%E7%A4%BA" target="_blank" rel="noopener">MVC，MVP和MVVM的图示</a></li>
</ul>
</li>
<li>组件写法不同；<ul>
<li>react主张jsx+inline style,也就是讲HTML、css写到js中，一切皆js；</li>
<li>vue则是webpack+Vue-loader的单文件组件格式，即HTML、css、js组成一个文件形成.vue文件</li>
</ul>
</li>
<li>数据绑定<ul>
<li>两者都是单向数据流，但是Vue可以进行双向数据绑定，React也可以进行双向数据绑定，但是绑定的原理有些区别，React是通过setState与View层进行双向数据绑定达到实时更新变化</li>
</ul>
</li>
<li>Vitual  Dom 不一样；<ul>
<li>Vue会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树，而react每当应用的状态被改变时，全部组件都会被渲染，所以react需要shouldComponentUpdate这个生命周期函数方法来进行控制</li>
</ul>
</li>
</ul>
<h3 id="注：-关于vue的数据双向绑定和单向数据流"><a href="#注：-关于vue的数据双向绑定和单向数据流" class="headerlink" title="注： 关于vue的数据双向绑定和单向数据流"></a>注： 关于vue的数据双向绑定和单向数据流</h3><ul>
<li>Vue 的依赖追踪是【原理上不支持双向绑定，v-model 只是通过监听 DOM 事件实现的语法糖】</li>
<li>Vue的依赖追踪是通过 Object.defineProperty 把data对象的属性全部转为 getter/setter来实现的；当改变数据的某个属性值时，会触发set函数,获取该属性值的时候会触发get函数，通过这个特性来实现改变数据时改变视图；也就是说只有当数据改变时才会触发视图的改变，反过来在操作视图时，只能通过DOM事件来改变数据，再由此来改变视图，以此来实现双向绑定</li>
<li>双向绑定是在同一个组件内，将数据和视图绑定起来，和父子组件之间的通信并无什么关联；</li>
<li>组件之间的通信采用单向数据流是为了组件间更好的解耦，在开发中可能有多个子组件依赖于父组件的某个数据，假如子组件可以修改父组件数据的话，一个子组件变化会引发所有依赖这个数据的子组件发生变化，所以vue不推荐子组件修改父组件的数据，直接修改props会抛出警告</li>
</ul>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p><a href="http://react-demo.houchaowei.com/#/" target="_blank" rel="noopener">React 示例</a></p>
<h3 id="搭建React"><a href="#搭建React" class="headerlink" title="搭建React"></a>搭建React</h3><ul>
<li><p>安装create-react-app</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">npm</span> isntall -g create-react-app<br></code></pre></td></tr></table></figure>
</li>
<li><p>查看版本</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">create-react-app</span> <span class="hljs-built_in">--version</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>创建项目目录<br><img data-src="https://leanote.com/api/file/getImage?fileId=5cdaaeefab644120e4004a08" alt="图片标题"></p>
</li>
<li>安装完成之后（红线标识的是运行的时候的默认配置）<br><img data-src="https://leanote.com/api/file/getImage?fileId=5cdaaf25ab644120e4004a13" alt="图片标题"></li>
<li>运行yarn start<br><img data-src="https://leanote.com/api/file/getImage?fileId=5cdaaf8fab64411edf004986" alt="图片标题"><ul>
<li>自动运行浏览器，打开localhost:3000页面<br><img data-src="https://leanote.com/api/file/getImage?fileId=5cdaafd1ab644120e4004a32" alt="图片标题"></li>
</ul>
</li>
</ul>
<h3 id="运行默认配置"><a href="#运行默认配置" class="headerlink" title="运行默认配置"></a>运行默认配置</h3><blockquote>
<p>打开项目代码，其中package.json中script标签的eject命令是默认安装webpack等一些基础的配置</p>
</blockquote>
<p><img data-src="https://leanote.com/api/file/getImage?fileId=5cdab3d6ab64411edf004a6b" alt="图片标题"><br><img data-src="https://leanote.com/api/file/getImage?fileId=5cdab427ab64411edf004a7e" alt="图片标题"></p>
<blockquote>
<p>会增加一个scripts文件夹和一个config文件夹存放一些配置文件</p>
</blockquote>
<p><img data-src="https://leanote.com/api/file/getImage?fileId=5cdab573ab644120e4004b2e" alt="图片标题"></p>
<h3 id="Config-for-yourself"><a href="#Config-for-yourself" class="headerlink" title="Config for yourself"></a>Config for yourself</h3><p>项目目录地址：<br>码云：<a href="https://gitee.com/houchaowei/flash.git" target="_blank" rel="noopener">https://gitee.com/houchaowei/flash.git</a></p>
<ul>
<li>按照vue的开发习惯配置了一些简单的目录</li>
<li>没有加redux，加了MOBX</li>
</ul>
<h3 id="服务器端项目的部署"><a href="#服务器端项目的部署" class="headerlink" title="服务器端项目的部署"></a>服务器端项目的部署</h3><ul>
<li>首先安装nginx，npm，node，配置项目目录，配置nginx代理</li>
<li>clone代码到项目目录</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs undefined">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://houchaowei:**@gitee.com/houchaowei/flash.git<br></code></pre></td></tr></table></figure>
<p><img data-src="https://leanote.com/api/file/getImage?fileId=5cdec752ab6441102a0035f6" alt="图片标题"></p>
<ul>
<li>解析一个二级域名，没有配置nginx代理的时候，访问不到的项目<br><img data-src="https://leanote.com/api/file/getImage?fileId=5cdec88eab64410df4003773" alt="图片标题"></li>
<li>nginx配置<br> <img data-src="https://leanote.com/api/file/getImage?fileId=5ce21c26ab64414b37005491" alt="title"></li>
<li>项目目录下执行npm install &amp; npm run build<br> <img data-src="https://leanote.com/api/file/getImage?fileId=5ce21c41ab64414937005544" alt="title"></li>
</ul>
<h3 id="React示例："><a href="#React示例：" class="headerlink" title="React示例："></a>React示例：</h3><blockquote>
<p>Demo</p>
</blockquote>
<p><img data-src="https://leanote.com/api/file/getImage?fileId=5ce21d21ab64414b370054ca" alt="title"></p>
<blockquote>
<p>index.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">/**<br>* index.js<br>*/</span><br><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><br><span class="hljs-keyword">import</span> &#123; observer, inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-react'</span><br><span class="hljs-keyword">import</span> &#123;<br>    Button,<br>    InputItem<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'antd-mobile'</span><br><br>@inject(<span class="hljs-string">'store'</span>)<br>@observer<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span>(props) &#123;<br>        <span class="hljs-keyword">super</span>(props)<br><br>        <span class="hljs-keyword">this</span>.state = &#123;<br><br>        &#125;<br>    &#125;<br><br>    changeName = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">this</span>.props.store.setName(<span class="hljs-string">'小吴'</span>)<br>    &#125;<br><br>    render() &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">InputItem</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.props.store.name&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'primary'</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">InputItem</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeName&#125;</span>&gt;</span>修改名字<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Index<br></code></pre></td></tr></table></figure>
<blockquote>
<p>store.js</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">/**<br>* store.js<br>*/</span><br><span class="hljs-keyword">import</span> &#123;observable, action&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"mobx"</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonState</span> &#123;</span><br>    @observable name = <span class="hljs-string">'小红'</span>;<br>    <br>    @action setName (name) &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CommonState<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript深入之call和apply的模拟实现</title>
    <url>/20190807-avaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="call"><a href="#call" class="headerlink" title="call"></a>call</h1><p>一句话介绍 call：</p>
<blockquote>
<p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。</p>
</blockquote>
<p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> foo = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value);<br>&#125;<br><br>bar.call(foo); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>注意两点：</p>
<ul>
<li>call 改变了 this 的指向，指向到 foo</li>
<li>bar 函数执行了</li>
</ul>
<h1 id="模拟实现第一步"><a href="#模拟实现第一步" class="headerlink" title="模拟实现第一步"></a>模拟实现第一步</h1><p>那么我们该怎么模拟实现这两个效果呢？</p>
<p>试想当调用 call 的时候，把 foo 对象改造成如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> foo = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">bar</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value)<br>    &#125;<br>&#125;;<br><br>foo.bar(); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<p>这个时候 this 就指向了 foo，是不是很简单呢？</p>
<p>但是这样却给 foo 对象本身添加了一个属性，这可不行呐！</p>
<p>不过也不用担心，我们用 delete 再删除它不就好了~</p>
<p>所以我们模拟的步骤可以分为：</p>
<ul>
<li>将函数设为对象的属性</li>
<li>执行该函数</li>
<li>删除该函数</li>
</ul>
<p>以上个例子为例，就是：<br><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第一步</span><br>foo.fn = <span class="hljs-built_in">bar</span><br><span class="hljs-comment">// 第二步</span><br>foo.fn()<br><span class="hljs-comment">// 第三步</span><br><span class="hljs-keyword">delete</span> foo.fn<br></code></pre></td></tr></table></figure></p>
<p>fn 是对象的属性名，反正最后也要删除它，所以起成什么都无所谓。</p>
<p>根据这个思路，我们可以尝试着去写第一版的 call2 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第一版</span><br><span class="hljs-built_in">Function</span>.prototype.call2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>    <span class="hljs-comment">// 首先要获取调用call的函数，用this可以获取</span><br>    context.fn = <span class="hljs-keyword">this</span>;<br>    context.fn();<br>    <span class="hljs-keyword">delete</span> context.fn;<br>&#125;<br><br><span class="hljs-comment">// 测试一下</span><br><span class="hljs-keyword">var</span> foo = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value);<br>&#125;<br><br>bar.call2(foo); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure>
<p>正好可以打印 1 哎！是不是很开心！(～￣▽￣)～</p>
<h1 id="模拟实现第二步"><a href="#模拟实现第二步" class="headerlink" title="模拟实现第二步"></a>模拟实现第二步</h1><p>最一开始也讲了，call 函数还能给定参数执行函数。举个例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> foo = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name)<br>    <span class="hljs-built_in">console</span>.log(age)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value);<br>&#125;<br><br>bar.call(foo, <span class="hljs-string">'kevin'</span>, <span class="hljs-number">18</span>);<br><span class="hljs-comment">// kevin</span><br><span class="hljs-comment">// 18</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<p>注意：传入的参数并不确定，这可咋办？</p>
<p>不急，我们可以从 Arguments 对象中取值，取出第二个到最后一个参数，然后放到一个数组里。</p>
<p>比如这样：<br><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-regexp">//</span> 以上个例子为例，此时的arguments为：<br><span class="hljs-regexp">//</span> arguments = &#123;<br><span class="hljs-regexp">//</span>      <span class="hljs-number">0</span>: foo,<br><span class="hljs-regexp">//</span>      <span class="hljs-number">1</span>: <span class="hljs-string">'kevin'</span>,<br><span class="hljs-regexp">//</span>      <span class="hljs-number">2</span>: <span class="hljs-number">18</span>,<br><span class="hljs-regexp">//</span>      length: <span class="hljs-number">3</span><br><span class="hljs-regexp">//</span> &#125;<br><span class="hljs-regexp">//</span> 因为arguments是类数组对象，所以可以用<span class="hljs-keyword">for</span>循环<br>var args = [];<br><span class="hljs-keyword">for</span>(var i = <span class="hljs-number">1</span>, len = arguments.length; i &lt; len; i++) &#123;<br>    args.push(<span class="hljs-string">'arguments['</span> + i + <span class="hljs-string">']'</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span> 执行后 args为 [<span class="hljs-string">"arguments[1]"</span>, <span class="hljs-string">"arguments[2]"</span>, <span class="hljs-string">"arguments[3]"</span>]<br></code></pre></td></tr></table></figure></p>
<p>不定长的参数问题解决了，我们接着要把这个参数数组放到要执行的函数的参数里面去。<br><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 将数组里的元素作为多个参数放进函数的形参里</span><br>context<span class="hljs-function">.<span class="hljs-keyword">fn</span></span>(args.join(<span class="hljs-string">','</span>))<br><span class="hljs-comment">// (O_o)??</span><br><span class="hljs-comment">// 这个方法肯定是不行的啦！！！</span><br></code></pre></td></tr></table></figure></p>
<p>也许有人想到用 ES6 的方法，不过 call 是 ES3 的方法，我们为了模拟实现一个 ES3 的方法，要用到ES6的方法，好像……，嗯，也可以啦。但是我们这次用 eval 方法拼成一个函数，类似于这样：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-string">'context.fn('</span> + args +<span class="hljs-string">')'</span>)</span></span><br></code></pre></td></tr></table></figure></p>
<p>这里 args 会自动调用 Array.toString() 这个方法。</p>
<p>所以我们的第二版克服了两个大问题，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第二版</span><br><span class="hljs-built_in">Function</span>.prototype.call2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;<br>    context.fn = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">var</span> args = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>, len = <span class="hljs-built_in">arguments</span>.length; i &lt; len; i++) &#123;<br>        args.push(<span class="hljs-string">'arguments['</span> + i + <span class="hljs-string">']'</span>);<br>    &#125;<br>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">'context.fn('</span> + args +<span class="hljs-string">')'</span>);<br>    <span class="hljs-keyword">delete</span> context.fn;<br>&#125;<br><br><span class="hljs-comment">// 测试一下</span><br><span class="hljs-keyword">var</span> foo = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name)<br>    <span class="hljs-built_in">console</span>.log(age)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value);<br>&#125;<br><br>bar.call2(foo, <span class="hljs-string">'kevin'</span>, <span class="hljs-number">18</span>); <br><span class="hljs-comment">// kevin</span><br><span class="hljs-comment">// 18</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure>
<h1 id="模拟实现第三步"><a href="#模拟实现第三步" class="headerlink" title="模拟实现第三步"></a>模拟实现第三步</h1><p>模拟代码已经完成 80%，还有两个小点要注意：</p>
<p>1.this 参数可以传 null，当为 null 的时候，视为指向 window</p>
<p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> value = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value);<br>&#125;<br><br>bar.call(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></p>
<p>虽然这个例子本身不使用 call，结果依然一样。</p>
<p>2.函数是可以有返回值的！</p>
<p>举个例子：<br><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">var obj = &#123;<br>    <span class="hljs-keyword">value</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">function</span> bar(<span class="hljs-type">name</span>, age) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-keyword">value</span>: this.<span class="hljs-keyword">value</span>,<br>        <span class="hljs-type">name</span>: <span class="hljs-type">name</span>,<br>        age: age<br>    &#125;<br>&#125;<br><br>console.log(bar.<span class="hljs-keyword">call</span>(obj, <span class="hljs-string">'kevin'</span>, <span class="hljs-number">18</span>));<br>// <span class="hljs-keyword">Object</span> &#123;<br>//    <span class="hljs-keyword">value</span>: <span class="hljs-number">1</span>,<br>//    <span class="hljs-type">name</span>: <span class="hljs-string">'kevin'</span>,<br>//    age: <span class="hljs-number">18</span><br>// &#125;<br></code></pre></td></tr></table></figure></p>
<p>不过都很好解决，让我们直接看第三版也就是最后一版的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 第三版</span><br><span class="hljs-built_in">Function</span>.prototype.call2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> context = context || <span class="hljs-built_in">window</span>;<br>    context.fn = <span class="hljs-keyword">this</span>;<br><br>    <span class="hljs-keyword">var</span> args = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>, len = <span class="hljs-built_in">arguments</span>.length; i &lt; len; i++) &#123;<br>        args.push(<span class="hljs-string">'arguments['</span> + i + <span class="hljs-string">']'</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">'context.fn('</span> + args +<span class="hljs-string">')'</span>);<br><br>    <span class="hljs-keyword">delete</span> context.fn<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 测试一下</span><br><span class="hljs-keyword">var</span> value = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value);<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.value,<br>        <span class="hljs-attr">name</span>: name,<br>        <span class="hljs-attr">age</span>: age<br>    &#125;<br>&#125;<br><br>bar.call(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 2</span><br><br><span class="hljs-built_in">console</span>.log(bar.call2(obj, <span class="hljs-string">'kevin'</span>, <span class="hljs-number">18</span>));<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// Object &#123;</span><br><span class="hljs-comment">//    value: 1,</span><br><span class="hljs-comment">//    name: 'kevin',</span><br><span class="hljs-comment">//    age: 18</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure>
<p>到此，我们完成了 call 的模拟实现，给自己一个赞 ｂ（￣▽￣）ｄ</p>
<h1 id="apply的模拟实现"><a href="#apply的模拟实现" class="headerlink" title="apply的模拟实现"></a>apply的模拟实现</h1><p>apply 的实现跟 call 类似，在这里直接给代码，代码来自于知乎 @郑航的实现：<br><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs undefined">Function.prototype.<span class="hljs-built_in">apply</span> = function (<span class="hljs-built_in">context</span>, arr) &#123;<br>    <span class="hljs-built_in">var</span> <span class="hljs-built_in">context</span> = Object(<span class="hljs-built_in">context</span>) || window;<br>    <span class="hljs-built_in">context</span>.fn = this;<br><br>    <span class="hljs-built_in">var</span> result;<br>    <span class="hljs-keyword">if</span> (!arr) &#123;<br>        result = <span class="hljs-built_in">context</span>.fn();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">var</span> <span class="hljs-built_in">args</span> = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>, len = arr.<span class="hljs-built_in">length</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-built_in">args</span>.<span class="hljs-built_in">push</span>('arr[' + i + ']');<br>        &#125;<br>        result = <span class="hljs-built_in">eval</span>('<span class="hljs-built_in">context</span>.fn(' + <span class="hljs-built_in">args</span> + ')')<br>    &#125;<br><br>    <span class="hljs-built_in">delete</span> <span class="hljs-built_in">context</span>.fn<br>    <span class="hljs-built_in">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>call &amp;&amp; apply</tag>
      </tags>
  </entry>
  <entry>
    <title>html标签之间换行产生的空格</title>
    <url>/20190809-html%E6%A0%87%E7%AD%BE%E4%B9%8B%E9%97%B4%E6%8D%A2%E8%A1%8C%E4%BA%A7%E7%94%9F%E7%9A%84%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>  <span class="hljs-selector-class">.span1</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;&#125;<br>  <span class="hljs-selector-class">.span2</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrap"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span1"</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"span2"</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><img data-src="15653308021.jpg" alt="html标签之间换行产生的空格"><br><a id="more"></a></p>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><ul>
<li><p>不换行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs undefined">&lt;div <span class="hljs-keyword">class</span>="<span class="hljs-symbol">wrap</span>"&gt;<br>  &lt;<span class="hljs-symbol">span</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">span1</span>"&gt;<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">span</span>&gt;&lt;<span class="hljs-symbol">span</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">span2</span>"&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">span</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>给父标签设置<code>font-size</code>为0:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>设置float</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>  <span class="hljs-selector-class">.span1</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">float</span>:left&#125;<br>  <span class="hljs-selector-class">.span2</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">float</span>:left&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>flex布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-comment">/* font-size: 0; */</span><br>  <span class="hljs-attribute">display</span>: flex<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 运行机制 EventLoop </title>
    <url>/20190306-javascript-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6-EventLoop/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/v2-da078fa3eadf3db4bf455904ae06f84b_hd.jpg" alt></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>javascript 为什么是单线程？多线程不好吗,能提高效率啊.。</p>
<p>答案是不能。<a id="more"></a>假设javascript有两个线程，一个在某个DOM节点添加内容，另一个线程在这个节点上删除内容，这是浏览器应该以哪个线程为准？<br>这就意味着单线程作为javascript的核心标准，将一直沿用下去。</p>
<p>当然，现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了web worker技术。这项技术号称让javascript成为一门多线程语言。</p>
<p>使用web worker技术开的多线程有着诸多限制.<br>例如：所有新线程都受主线程的完全控制，不能独立执行。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。</p>
<h2 id="事件循环-EventLoop"><a href="#事件循环-EventLoop" class="headerlink" title="事件循环(EventLoop)"></a>事件循环(EventLoop)</h2><p>既然js是单线程，那么意味着，当先我们执行一个任务，什么事都干不了，只能等待他执行完。 这是设计者意识到，只是主线程完全可以不考虑IO设备，挂起处于等待中的任务，先运行排在后面的任务，等IO设备返回了结果，再回头把挂起的设备执行完。<br>于是所有任务分为两种： 同步任务 和 异步任务</p>
<p>当javascript代码执行的时候会将不同的变量存于内存中的不同位置：堆（heap）和栈（stack）中来加以区分，heap中一般存储我们的变量，stack一般存储函数或者方法。stack叫做执行栈，我们的方法依次会在这里执行。执行栈事件先进后出，任务队列先进先出。web apis则是代表一些异步事件，而callback queue即事件队列。<br>对照图片我们解释一下整个事件循环机制<br>执行栈执行主线程任务，当有操作dom，ajax交互，使用定时器异步操作的时候，这些任务会被移入到 callback queue 任务队列中<br>当主线程任务执行完毕为空时，会读取callback queue队列中的函数，进入主线程执行<br>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>
<h3 id="macro-task与micro-task"><a href="#macro-task与micro-task" class="headerlink" title=".macro task与micro task"></a>.macro task与micro task</h3><p>不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。<br>在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去，当执行栈为空的时候，主线程会首先查看微任务中的事件，如果微任务不是空的那么执行微任务中的事件，如果没有在宏任务中取出最前面的一个事件。把对应的回调加入当前执行栈…如此反复，进入循环。</p>
<pre><code>- macro-task(宏任务)

    - setTimeout
    - setInterval
    - setImmediate


- micro-task(微任务)

    - Promise
    - process.nextTick
</code></pre><p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p>
<p>我们只需记住当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</p>
<p>这样就能解释下面这段代码的结果：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>    resolve(<span class="hljs-number">3</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(val);<br>&#125;)<br></code></pre></td></tr></table></figure></p>
<p>结果为：</p>
<pre><code>2
3
1
</code></pre><p>实例2:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            resolve(<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'set 11'</span>);<br>        &#125;, <span class="hljs-number">0</span>)<br>        resolve(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'set 222'</span>);<br>    &#125;);<br>    p1.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(res));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'set 33'</span>);<br>    resolve(<span class="hljs-number">3</span>);<br>&#125;)<br>p.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(res));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'end'</span>)<br></code></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<pre><code>set 222
set 33
end
2
3
set 11
</code></pre>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hook借助useReducer, useContext代替Redux方案</title>
    <url>/20191120-React-Hook%E5%80%9F%E5%8A%A9useReducer-useContext%E4%BB%A3%E6%9B%BFRedux%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>当我们使用<code>redux</code>进行数据管理的时候，一般都是在根组件通过<code>Provider</code>的方式引入<code>store</code>，然后在每个子组件中，通过<code>connect</code>的方式使用高阶组件进行连接，这样造成的一个问题是，大量的高阶组件代码冗余度特别高，既然<code>hooks</code>带来了新特性，不如一起来用用看</p>
</blockquote>
<h2 id="目录结构图"><a href="#目录结构图" class="headerlink" title="目录结构图"></a>目录结构图</h2><p><img data-src="clipboard.png" alt="目录示例"> <a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">├── otherPage <span class="hljs-comment">// 其他页面</span><br>|   ├── index.jsx <span class="hljs-comment">// 共享`Test`页面的状态；</span><br>├── Test <span class="hljs-comment">// 测试页面</span><br>|   ├── child.jsx <span class="hljs-comment">// 测试页面的子组件。1、`useContext`定义的位置，获取父组件提供的`context`；2、`useEffect`进行异步请求；</span><br>|   ├── index.jsx <span class="hljs-comment">// 测试页面父组件。1、通过使用`Provider`提供给子组件`context`；2、`useReducer`定义的位置，引入一个`reducer`并且提供初始状态`initialState`；</span><br>|   ├── otherPage.jsx <span class="hljs-comment">// 其他页面，已删除~~</span><br>|   └── reducer.jsx <span class="hljs-comment">// 处理不同类型的`action`操作</span><br></code></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img data-src="gifhome_1920x1048_10s.gif" alt="效果图"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Test-reducer-jsx"><a href="#Test-reducer-jsx" class="headerlink" title="Test/reducer.jsx"></a><code>Test/reducer.jsx</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span> (<span class="hljs-params">state, action</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">'ADD'</span>: <span class="hljs-comment">// 加</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, state, &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'add'</span>,<br>        <span class="hljs-attr">index</span>: ++state.index<br>      &#125;);<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">'DOWN'</span>: <span class="hljs-comment">// 减</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, state, &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'down'</span>,<br>        <span class="hljs-attr">index</span>: --state.index<br>      &#125;);<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">'FETCH'</span>: <span class="hljs-comment">//请求</span><br>      axios(<span class="hljs-string">'/addFetch'</span>).then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(result);<br>      &#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>      &#125;); ;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, state);<br>    <span class="hljs-keyword">default</span>: <span class="hljs-comment">// 重置</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, state, &#123;<br>        <span class="hljs-attr">index</span>: <span class="hljs-number">1</span><br>      &#125;);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducer;<br></code></pre></td></tr></table></figure>
<h3 id="Test-child-jsx"><a href="#Test-child-jsx" class="headerlink" title="Test/child.jsx"></a><code>Test/child.jsx</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useContext, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<br><span class="hljs-keyword">import</span> &#123; FetContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./index'</span>;<br><span class="hljs-keyword">import</span> &#123; Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'antd-mobile'</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DeepChild</span> (<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-comment">// If we want to perform an action, we can get dispatch from context.</span><br>  <span class="hljs-keyword">const</span> dispatch = useContext(FetContext);<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span> (<span class="hljs-params"></span>) </span>&#123;<br>    dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'ADD'</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> fetch = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fetch'</span>);<br>    dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'FETCH'</span> &#125;);<br>  &#125;;<br><br>  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'child useEffect'</span>, props);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'primary'</span>&gt;</span>Child Add<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;fetch&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'primary'</span>&gt;</span>Child Request<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> DeepChild;<br></code></pre></td></tr></table></figure>
<h3 id="Test-index-jsx"><a href="#Test-index-jsx" class="headerlink" title="Test/index.jsx"></a><code>Test/index.jsx</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* eslint-disable react/prop-types */</span><br><span class="hljs-keyword">import</span> React, &#123; useReducer, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span>;<br><span class="hljs-keyword">import</span> DeepChild <span class="hljs-keyword">from</span> <span class="hljs-string">'./child'</span>;<br><span class="hljs-keyword">import</span> &#123; Button, InputItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'antd-mobile'</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> FetContext = React.createContext(<span class="hljs-literal">null</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span> (<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, &#123;<br>    <span class="hljs-attr">isFetching</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">index</span>: props.location.state.index || <span class="hljs-number">1</span><br>  &#125;);<br><br>  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> fetch = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'FETCH'</span> &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> confirmClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'DOWN'</span> &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> goOtherPage = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    props.history.push(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">'otherPage'</span>,<br>      <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">index</span>: state.index<br>      &#125;<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> reset = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'RESET'</span> &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">FetContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;dispatch&#125;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">InputItem</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;state.index&#125;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">DeepChild</span> &#123;<span class="hljs-attr">...state</span>&#125; /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;confirmClick&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'warning'</span>&gt;</span>Parent Reduce<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'warning'</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;fetch&#125;</span>&gt;</span>Parent Request!<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'primary'</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;reset&#125;</span>&gt;</span>Reset Index<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'ghost'</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;goOtherPage&#125;</span>&gt;</span>Next Page<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">FetContext.Provider</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Test;<br></code></pre></td></tr></table></figure>
<h3 id="OtherPage-index-jsx"><a href="#OtherPage-index-jsx" class="headerlink" title="OtherPage/index.jsx"></a><code>OtherPage/index.jsx</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* eslint-disable react/prop-types */</span><br><span class="hljs-keyword">import</span> React, &#123; useReducer, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'../Test/reducer'</span>;<br><span class="hljs-keyword">import</span> &#123; InputItem, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'antd-mobile'</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">OtherPage</span> (<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(reducer, props.location.state);<br><br>  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'OtherPage props'</span>, state);<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> add = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    dispatch(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">'ADD'</span> &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> goBack = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'123'</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'props'</span>, props);<br>    <span class="hljs-comment">// props.history.go(-1);</span><br>    props.history.replace(&#123;<br>      <span class="hljs-attr">pathname</span>: <span class="hljs-string">'Test'</span>,<br>      <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">index</span>: state.index<br>      &#125;<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">InputItem</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;state.index&#125;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;add&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'primary'</span>&gt;</span> add<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;goBack&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'ghost'</span>&gt;</span> Go Back<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> OtherPage;<br></code></pre></td></tr></table></figure>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li><code>useEffect()</code>可以看做是<code>class</code>写法的<code>componentDidMount</code>、<code>componentDidUpdate</code>以及<code>componentWillUnMount</code>三个钩子函数的组合。<ul>
<li>当返回了一个函数的时候，这个函数就在<code>compnentWillUnMount</code>生命周期调用</li>
<li>默认地，传给<code>useEffect</code>的第一个参数会在每次（包含第一次）数据更新时重新调用</li>
<li>当给<code>useEffect()</code>传入了第二个参数（数组类型）的时候，<code>effect</code>函数会在第一次渲染时调用，其余仅当数组中的任一元素发生改变时才会调用。这相当于我们控制了组件的<code>update</code>生命周期</li>
<li><code>useEffect()</code>第二个数组为空则意味着仅在<code>componentDidMount</code>周期执行一次</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>vue项目的部分页面的SSR</title>
    <url>/20190313-vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E7%9A%84SSR/</url>
    <content><![CDATA[<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/WechatIMG403.jpeg" alt><br><a id="more"></a><br>server服务端示例代码：<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs undefined">const Vue = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vue'</span>)<br>const express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br>const server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)()<br>const renderer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vue-server-renderer'</span>).createRenderer()<br>const fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br>server.use(express.static(__dirname))<br><br>server.get(<span class="hljs-string">'*'</span>, <span class="hljs-function"><span class="hljs-params">(req, res)</span> =&gt;</span> &#123;<br>  const app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    data: &#123;<br>      title: <span class="hljs-string">'操作手册'</span>,<br>      list: []<br>    &#125;,<br>    template: `<span class="javascript"><br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"guide"</span>&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(img, index) in list"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width:100%"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;<span class="hljs-regexp">/div&gt;</span></span>`,<br>    created() &#123;<br>      <span class="hljs-keyword">for</span> (let index = <span class="hljs-number">23</span>; index &lt;= <span class="hljs-number">36</span>; index++) &#123;<br>        let src = `<span class="javascript"><span class="hljs-regexp">./</span>../<span class="hljs-keyword">static</span>/guide$&#123;index&#125;.png</span>`<br>        <span class="hljs-keyword">this</span>.list.push(src)<br>      &#125;<br>    &#125;<br>  &#125;)<br><br>  renderer.renderToString(app, <span class="hljs-function"><span class="hljs-params">(err, html)</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(app._data);<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      res.status(<span class="hljs-number">500</span>).end(<span class="hljs-string">'Internal Server Error'</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    res.end(`<span class="javascript"><br>      &lt;!DOCTYPE html&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$&#123;app._data.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">'utf-8'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">meta</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>$&#123;html&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>          <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rem2html</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> html = <span class="hljs-built_in">document</span>.documentElement<br>            <span class="hljs-built_in">window</span>.rem = html.getBoundingClientRect().width / <span class="hljs-number">7.5</span><br>            html.style.fontSize = <span class="hljs-built_in">window</span>.rem + <span class="hljs-string">'px'</span><br>          &#125;<br><br>          <span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>            rem2html()<br>          &#125;<br><br>          rem2html()<br>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>    </span></span>`)<br>  &#125;)<br>&#125;)<br><br>server.listen(<span class="hljs-number">3003</span>)<br></code></pre></td></tr></table></figure></p>
<p>SSR效果：<br><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-03-13%20%E4%B8%8B%E5%8D%882.05.45.png" alt></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>也谈勤俭精神（一）</title>
    <url>/20190225-%E4%B9%9F%E8%B0%88%E5%8B%A4%E4%BF%AD%E7%B2%BE%E7%A5%9E/</url>
    <content><![CDATA[<p>可能我的岗位是给地球画画（扫地）<br>所以经常能看到<br>整盒整盒的米饭被丢进垃圾箱<br>十几二十几元的咖啡只喝了一半<br>当您已回家休息的时候<br>职场里的一些空调和灯光还在整夜加班<br>……<a id="more"></a><br>或许有些人觉得<br>自己以前苦惯了<br>现在自己有能力比别人多挣些钱<br>当然想怎么花就怎么花<br>即使浪费一些又关他人毛钱儿？<br>还有一些蜜罐长大的人从来就不知道什么叫苦<br>衣来张手饭来张口没挨过饿<br>所以心里压根儿就没有勤俭持家的概念<br>全凭心境儿<br>也不管能不能吃完<br>也不管有没有用<br>买买买<br>就像电影《大腕》的台词<br>“买什么东西都买最贵的<br>倍儿有面儿<br>周围不是开宝马就是开奔驰<br>你要是开一日本车呀<br>都不好意思跟人家打招呼<br>所以<br>我们的……口号就是<br>不求最好，但求最贵”！<br>真真的典型剁手党、月光族<br>更有甚者寅吃卯粮<br>我猜想（请勿对号入座）<br>他们领工资后的第一件事儿<br>就是一路小跑儿<br>赶在借款到期前还贷！<br>哪还有心思管单位的长明灯空调连轴转？<br>浪费点儿自己的东西扔点儿米饭<br>更是“洒洒水”（广东白话：小意思）了</p>
<p>我是吃过苦的人<br>记得那些年<br>由于国家经济落后商品匮乏<br>实行有计划的商品分配<br>每家每户都按人口发放各种商品票证<br>买粮要粮票买布要布票买油要油票……<br>每个月只能买糙米和棒子面还都是定量供应<br>想吃花生得要等到逢年过节<br>赶上家里孩子多的<br>做饭前恨不得要用秤称一称粮食的重量<br>那时候过日子不精打细算<br>到了月底全家就要饿肚子<br>说实在的<br>人心都是肉长的<br>我写到这里感到眼泪在眼圈打转<br>真有些写不下去（赶紧转话题）</p>
<p>我出生在军人家庭<br>没挨过饿<br>但赶上那时候“忆苦思甜”<br>吃的糠窝头实在是剌嗓子<br>（忆苦思甜是当时教育人们节约粮食不要忘本的活动，糠窝头是用粮食皮等杂合面制成的发黑的窝头）<br>当时还讲学工学农<br>接受工人阶级和贫下中农再教育<br>我虽然没有到农村插过队<br>但还是被学校安排到郊区乡下锻炼了一个月<br>只学会了用镰刀割麦子<br>烈日当头汗如雨下真真的无处躲藏<br>当然<br>嫩嫩的手上起了一大片血泡<br>村里为了照顾我们<br>说分配给我们住比较好的房子<br>其实远远看去就是一座破庙儿<br>土炕上铺一些稻草<br>眼见着一些虫子到处爬<br>虽然我们带了床单铺在上面<br>可炎热的夏天只能穿一条裤衩睡觉又不老实<br>一不小心就会被稻草扎的生疼！<br>夜深人静的时候<br>破了洞的窗户纸被夜风刮得哗哗作响<br>远处几只野猫像女婴般哭闹又似狐仙在撕咬嚎叫<br>吓得我们这些平时养尊处优的学生<br>都恨不得把自己裹得严严实实的<br>孤枕难眠<br>胆小的甚至全身发抖……</p>
<p>我们心里不服<br>第二天赶紧去老乡家看一看<br>唉<br>人家老乡家的房子比我们住的还要差呢<br>……<br>今天不知怎么了<br>写着写着我就要流泪，我想哭！<br>……<br>真真抱歉！<br>本来我想写完又实在写不下去<br>只好搁笔等来日再完成吧</p>
<p>Kevin 19.02.24于北京</p>
]]></content>
      <categories>
        <category>Kevin专栏</category>
      </categories>
      <tags>
        <tag>Kevin专栏</tag>
      </tags>
  </entry>
  <entry>
    <title>关于爱情</title>
    <url>/20190219-%E5%85%B3%E4%BA%8E%E7%88%B1%E6%83%85/</url>
    <content><![CDATA[<p><img data-src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550556893999&amp;di=1339bf06212861197562054c4834937f&amp;imgtype=0&amp;src=http%3A%2F%2Fs6.sinaimg.cn%2Fmw690%2Fbf7550c5tx6DnZNbLRH15%26690" alt="关于爱情"></p>
<p>　　 多少缘起缘落，就有多少擦肩回眸；多少悲欢离合，就有多少爱恨情仇；多少前尘往事，就有多少蓦然回首。人生的渡口，我们皆是过客，可真正驻足的又有多少？<a id="more"></a>并非不懂珍惜，有些缘分注定长短，或转身天涯或刹那芳华。来的是偶然，走的是必然。没有放弃，怎能拥有；没有经历，怎能选择。洒脱而活，看世间冷暖；从容而安，便是风轻云淡。缘来惜缘，缘去随缘。随缘不变，不变随缘。爱在时光里，无言又无语，有情似无情；爱的世界里，没有谁对不起谁，只有谁不懂得珍惜谁。人总是这样，拥有的时候不知珍贵，失去了才追悔莫及。当爱已成殇，灯火阑珊处也不会有那么多的一往情深。当爱已无奈，转身离开的或许是一辈子的温暖。时光不能永恒，而情却可以至始至终。失去什么，也不能失去真心；忘记什么，也不能忘掉真情。珍惜眼前人，让爱无悔。</p>
<p>　　 有一种缘叫错过，有一种爱叫不舍。一首歌唤起了一段记忆，一杯茶染浓了一种心情。每个人的心中，都珍藏着一个不可触摸的情。碎碎念念中寻寻觅觅，深深浅浅中迷迷离离。漫无目的地去甜蜜去忧伤，刻骨铭心的去沉淀去流浪，是寂寞的诗行，是往昔的芬芳，是揉碎的念想。当爱已成往，要有多坚强才能念念不忘。一种忘记不是不可以，而自己的心却不愿意；一种遇见不是不美丽，而结局却是不舍的情意。都说相濡以沫，不如相忘于江湖，可有谁能做到如此洒脱？那刻骨铭心怎能刻意忘记？那回忆的迷离怎能轻易抹去？若相遇，莫相离；若相惜，莫相弃；若相爱，至死不渝。用真诚去给予没有虚假，用真心去珍惜自有真情。</p>
<p>　　 有些爱越想抽离，却越加清晰；有些人越想忘记，却越在心里。爱情就是这样，总是扑朔迷离；幸福并不容易，总是让人寻觅；甜蜜并不简单，总是让心着迷。一个眼神让心悸动不已，从此爱情泛起涟漪；一句别离摧毁了所有的美丽，从此断肠是痛的呼吸。爱过才懂珍惜，痛过才懂保护自己。爱情需要拥有也需要放弃，属于你的真心不移，不属于你的终会失去。每个人的心里都有一抹背影，却又无法触及；每个人的曾经都有一段美丽，挥之不去却只是一个回忆。爱上一个人只是一时，忘掉一个人却需要一生。并非无心，纵然千般不舍，爱有时候也是一种放弃，是另一种幸福的给予；并非无情，纵然万般无奈，饱尝寂寞，把凄楚深埋于自己的心底。无悔经历，只因曾经爱过，曾经拥有过。只要你过得比我好，别的，什么都不重要。</p>
<p>　　 有的缘，看的太重终会失去；有些情，期望的越高失望越深。有些人，舍与不舍都是无法忘怀；有些爱，念与不念都是转身离开。缘分就是这样，或近或远，或相聚或别离。爱，有时候会伤。遍体鳞伤的痛让心无处不荒凉，可怕的思念不打烊，火烧的寂寞在疯长，回忆的感伤填满空旷的心房，揉碎的念想在无处躲藏。是凝固，是断肠，是灵魂无处安放。爱的轰轰烈烈那又怎样，自己安慰自己，可以遗忘，可以坚强。若爱，莫失莫忘，不要让爱人在等待彷徨；若惜，不离不弃，生死相依到地老天荒。如果相爱，请深爱，如不深爱宁愿放弃；如果思念，浅浅回忆，以免痛断肝肠，相思成灾。唯有随缘随心随遇而安，生命需要锤炼，才能饱满。缘分需要经历，才有精彩。后记：爱情真的经不起等待，等待总要有一个期限，也许是一年，也许是一瞬间，而我们是否又抓得住呢？</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/20201004-TypeScript/</url>
    <content><![CDATA[<ul>
<li><p><a href="#编程语言的类型">编程语言的类型</a></p>
</li>
<li><ul>
<li><a href="#动态类型语言">动态类型语言</a></li>
<li><a href="#静态类型语言">静态类型语言</a></li>
</ul>
</li>
<li><p><a href="#typescript">typescript</a></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><ul>
<li><a href="#特性">特性</a></li>
<li><a href="#优势">优势</a></li>
<li><a href="#类型注解--类型推断">类型注解 &amp; 类型推断</a></li>
<li><a href="#基础类型--对象类型">基础类型 &amp; 对象类型</a></li>
<li><a href="#联合类型">联合类型</a></li>
<li><a href="#交叉类型">交叉类型</a></li>
<li><a href="#partial">Partial</a></li>
<li><a href="#枚举">枚举</a></li>
<li><a href="#函数注解">函数注解</a></li>
<li><a href="#数组注解">数组注解</a></li>
<li><a href="#interface--type">interface &amp; type</a></li>
<li><a href="#类型断言">类型断言</a></li>
<li><a href="#类">类</a></li>
<li><a href="#泛型">泛型</a></li>
</ul>
</li>
<li><ul>
<li><ul>
<li><a href="#泛型约束">泛型约束</a></li>
</ul>
</li>
</ul>
</li>
<li><p><a href="#声明文件">声明文件</a></p>
</li>
<li><p><a href="#typescript编译"><code>typescript</code>编译</a></p>
</li>
<li><ul>
<li><a href="#ts-node-编译执行ts-文件"><code>ts-node</code> 编译执行.ts 文件</a></li>
<li><a href="#tsc"><code>tsc</code></a></li>
<li><a href="#tsconfig"><code>tsconfig</code></a></li>
</ul>
</li>
<li><p><a href="#typescript--react">typescript + React</a></p>
</li>
</ul>
<h2 id="编程语言的类型"><a href="#编程语言的类型" class="headerlink" title="编程语言的类型"></a>编程语言的类型</h2><h3 id="动态类型语言"><a href="#动态类型语言" class="headerlink" title="动态类型语言"></a>动态类型语言</h3><p>运行期间做数据类型检查 <code>js ruby python</code></p>
<h3 id="静态类型语言"><a href="#静态类型语言" class="headerlink" title="静态类型语言"></a>静态类型语言</h3><p>编译期间类型检查 <code>c c++ java</code></p>
<h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><p>冒号后面的都是类型</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>typescript 是 js 的超集</li>
<li>拥有静态类型</li>
<li>需要编译成 js 运行</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>ts 的静态类型可以在开发过程中，发现潜在问题</li>
<li>更好的编辑器提示</li>
<li>通过静态类型的声明，代码清晰易读</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// js中变量是动态类型 可以随时改变类型</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-number">1</span>;<br>a=<span class="hljs-string">'str'</span><br><br><span class="hljs-comment">// ts中是静态类型 改变类型会报错</span><br><span class="hljs-keyword">let</span> b=<span class="hljs-number">1</span>;<br>b=<span class="hljs-string">'str'</span><br></code></pre></td></tr></table></figure>
<h3 id="类型注解-amp-类型推断"><a href="#类型注解-amp-类型推断" class="headerlink" title="类型注解 &amp; 类型推断"></a>类型注解 &amp; 类型推断</h3><p>ts 自动启用类型推断，判断变量类型</p>
<p>如果能分析变量类型不需要类型注解，否则需要</p>
<h3 id="基础类型-amp-对象类型"><a href="#基础类型-amp-对象类型" class="headerlink" title="基础类型 &amp; 对象类型"></a>基础类型 &amp; 对象类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 基础类型 string number boolean symbol void null undefined</span><br><span class="hljs-keyword">let</span> count: <span class="hljs-built_in">number</span>;<br><br><br><span class="hljs-comment">// 对象类型 &#123;&#125; [] function Class</span><br><span class="hljs-keyword">const</span> teacher: &#123;<br>  name: <span class="hljs-built_in">string</span>;<br>  age: <span class="hljs-built_in">number</span>;<br>&#125; = &#123;<br>  name: <span class="hljs-string">'jason'</span>,<br>  age: <span class="hljs-number">28</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> numbers: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">class</span> Person &#123;&#125;<br><span class="hljs-keyword">const</span> p: Person = <span class="hljs-keyword">new</span> Person();<br><br><span class="hljs-keyword">const</span> getTotal: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>
<h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">let</span> myName: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br></code></pre></td></tr></table></figure>
<h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>将多个类型合并成一个类型</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs undefined">type NativeButtonProps = BaseButtonProps &amp; ButtonHTMLAttributes&lt;HTMLElement&gt;<span class="hljs-built_in"><br>type </span>AnchorButtonProps = BaseButtonProps &amp; AnchorHTMLAttributes&lt;HTMLElement&gt;<br></code></pre></td></tr></table></figure>
<h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><p>把一些属性变为可选的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> type </span>ButtonProps = Partial&lt;NativeButtonProps &amp; AnchorButtonProps&gt;<br></code></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">TabTypes</span> &#123;</span><br>  Case = <span class="hljs-string">'case'</span>,<br>  Ganged = <span class="hljs-string">'ganged'</span>,<br>&#125;<br>const [currentTab, setCurrentTab] = useState(TabTypes.Case);<br><span class="hljs-keyword">if</span> (currentTab === TabTypes.Case) &#123;<br>        setCaseSource(insertKeys(res.data));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        setGangedSource(insertKeys(res.data));<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h3><p>函数的入参需要类型注解，返回值如果可以类型推断的话不需要写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 函数入参及返回值注解 c:可选参数只能放最后</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>, c?: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-comment">// 函数表达式</span><br><span class="hljs-keyword">const</span> add2: <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>=<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b<br>&#125;<br><span class="hljs-comment">// interface写法</span><br><span class="hljs-keyword">interface</span> IFn &#123;<br>  (x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> add2: IFn = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-comment">// type写法</span><br><span class="hljs-keyword">type</span> fn = <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">const</span> add2: fn = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-comment">// 函数解构的写法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add2</span>(<span class="hljs-params">&#123; a, b &#125;:&#123;a:<span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>&#125;</span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br>add2(&#123; a: <span class="hljs-number">1</span>, b: <span class="hljs-number">2</span> &#125;);<br><span class="hljs-keyword">const</span> total = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 无返回值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello'</span>);<br>&#125;<br><br><span class="hljs-comment">// 函数永远不会执行完</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorEmitter</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'error'</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'end'</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="数组注解"><a href="#数组注解" class="headerlink" title="数组注解"></a>数组注解</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 数组注解 能推断出来的不需要注解 直接的赋值的数组ts可以类型推断出来</span><br><span class="hljs-keyword">const</span> arr1: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">// 只能是number</span><br><span class="hljs-keyword">const</span> arr2: (<span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>)[] = [<span class="hljs-string">'1'</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">// 可以是number或string</span><br><span class="hljs-keyword">const</span> arr3: <span class="hljs-literal">undefined</span>[] = [<span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>]; <span class="hljs-comment">// 只能是undefined</span><br><br><span class="hljs-comment">// 对象数组</span><br><span class="hljs-keyword">const</span> arr4: &#123; name: <span class="hljs-built_in">string</span>; age: <span class="hljs-built_in">number</span> &#125;[] = [&#123; name: <span class="hljs-string">'a'</span>, age: <span class="hljs-number">18</span> &#125;];<br><span class="hljs-comment">// 类型别名 对上面的另一种写法</span><br><span class="hljs-keyword">type</span> User = &#123; name: <span class="hljs-built_in">string</span>; age: <span class="hljs-built_in">number</span> &#125;;<br><span class="hljs-keyword">const</span> arr5: User[] = [&#123; name: <span class="hljs-string">'a'</span>, age: <span class="hljs-number">18</span> &#125;];<br><br><span class="hljs-comment">// 元组 tuple 一个数组的长度固定 元素顺序类型固定</span><br><span class="hljs-keyword">const</span> info: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">'andy'</span>, <span class="hljs-string">'male'</span>, <span class="hljs-number">20</span>];<br></code></pre></td></tr></table></figure>
<h3 id="interface-amp-type"><a href="#interface-amp-type" class="headerlink" title="interface &amp; type"></a>interface &amp; type</h3><ul>
<li><p><code>interface</code>是数据的共性的抽象 有自己的属性 只是在开发过程中做语法提示校验的工具 编译后不存在</p>
</li>
<li><ul>
<li>对对象的形状(shape)的描述</li>
</ul>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">interface</span> Person &#123;<br>readonly name: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 只读 该属性再写会报错</span><br>age?: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 可选属性 可有可无</span><br>[propName: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>; <span class="hljs-comment">// 将来多出的其他属性string类型也是可以的</span><br>say?(): <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 方法属性 返回值string</span><br>say: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">// 接口继承</span><br><span class="hljs-keyword">interface</span> Teacher <span class="hljs-keyword">extends</span> Person &#123;<br>    teach(): <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 自己的属性</span><br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><ul>
<li>定义函数</li>
</ul>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// interface 定义函数类型</span><br><span class="hljs-keyword">interface</span> ISayHi &#123;<br> (word: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">const</span> say: SayHi = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">'hi'</span>;<br>&#125;;<br><br><span class="hljs-keyword">interface</span> IModalProps &#123;<br>  visible: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// 是否可见</span><br>  handleClose: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">void</span>; <span class="hljs-comment">// 隐藏自身</span><br>  form: <span class="hljs-built_in">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><ul>
<li>对类(class)进行抽象</li>
</ul>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Radio</span>&#123;<br>  switchRadio():<span class="hljs-built_in">void</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Battery</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Radio</span>&#123;<br>  checkBatter():<span class="hljs-built_in">void</span><br>&#125;<br><span class="hljs-comment">// 类实现interface</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Car</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Radio</span>&#123;<br>  switchRadio() &#123;<br><br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Phone</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Battery</span>&#123;<br>  switchRadio() &#123;<br><br>  &#125;<br>   checkBatter() &#123;<br><br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><code>type</code> 类型别名 只是简单的别名</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 常用于</span><br><span class="hljs-keyword">type</span> fnType =<span class="hljs-function"> (<span class="hljs-params">a</span>: <span class="hljs-params">string</span>) =&gt;</span> <span class="hljs-built_in">string</span><br><span class="hljs-keyword">type</span> FooType = <span class="hljs-built_in">string</span> <span class="hljs-pattern-match">| fn<span class="hljs-constructor">Type</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-constructor">Person</span> = &#123;<br>   name: <span class="hljs-built_in">string</span>;<br>   age?: number;<br>   &#125;;<br><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Name(<span class="hljs-params">person</span>: Person)</span>: void &#123;<br>  console.log(person.name);<br>&#125;<br>const set<span class="hljs-constructor">Name</span> = (person: <span class="hljs-constructor">Person</span>, <span class="hljs-keyword">new</span><span class="hljs-constructor">Name</span>: <span class="hljs-built_in">string</span>) =&gt;</span> &#123;<br>  person.name = newName;<br>  return person;<br>&#125;;<br><span class="hljs-comment">// 传对象引用和对象字面量的校验结果不一样 前一种无强校验</span><br><span class="hljs-keyword">let</span> p = &#123; name: 'andy', sex: 'male', say<span class="hljs-literal">()</span> &#123;&#125; &#125;;<br>get<span class="hljs-constructor">Name(<span class="hljs-params">p</span>)</span>;<br>get<span class="hljs-constructor">Name(&#123; <span class="hljs-params">name</span>: '<span class="hljs-params">andy</span>', <span class="hljs-params">sex</span>: '<span class="hljs-params">male</span>' &#125;)</span>;<br>set<span class="hljs-constructor">Name(&#123; <span class="hljs-params">name</span>: '<span class="hljs-params">jason</span>' &#125;, '<span class="hljs-params">andy</span>')</span>;<br></code></pre></td></tr></table></figure>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>联合类型时 ts 只拿到公有的一些方法 使用类型断言联合类型的某一种类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>)</span>&#123;<br><span class="hljs-comment">// 这里会报错</span><br>  <span class="hljs-keyword">if</span>(input.length)&#123;<br>      <span class="hljs-keyword">return</span> input.length<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>)</span>&#123;<br><span class="hljs-comment">// 类型断言 告诉ts我知道他是什么类型</span><br>  <span class="hljs-keyword">const</span> str = input <span class="hljs-keyword">as</span> <span class="hljs-built_in">String</span><br>  <span class="hljs-keyword">if</span>(str.length)&#123;<br>      <span class="hljs-keyword">return</span> str.length<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>)</span>&#123;<br><span class="hljs-comment">// 另一种写法</span><br>  <span class="hljs-keyword">if</span>((&lt;<span class="hljs-built_in">string</span>&gt;input).length)&#123;<br>      <span class="hljs-keyword">return</span> (&lt;<span class="hljs-built_in">string</span>&gt;input).length<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>ts 给 es6 的类增加了访问修饰符</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">class</span> Person &#123;<br>  <span class="hljs-comment">/**<br>   *  public 允许在类的内外调用<br>   *  private 允许类内不允许子类<br>   *  protected 允许类内及继承的子类<br>   *  readonly 只能读不能写<br>   * */</span><br>  <span class="hljs-comment">// 简写</span><br>  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> _name: <span class="hljs-built_in">string</span>, <span class="hljs-keyword">public</span> age: <span class="hljs-built_in">number</span></span>)&#123;&#125;<br>  <span class="hljs-comment">// 常规写法</span><br>  <span class="hljs-comment">// public name: string;</span><br>  <span class="hljs-comment">// constructor(name) &#123;</span><br>  <span class="hljs-comment">//   this.name = name;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// getter 属性</span><br>  <span class="hljs-keyword">get</span> name() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._name + <span class="hljs-string">'geted'</span>;<br>  &#125;<br>  <span class="hljs-comment">// setter 属性</span><br>  <span class="hljs-keyword">set</span> name(value: <span class="hljs-built_in">string</span>) &#123;<br>    <span class="hljs-keyword">this</span>._name = value<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'nn'</span>, <span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(p.name);<br>p.name = <span class="hljs-string">'change'</span>;<br><span class="hljs-built_in">console</span>.log(p.name);<br><br><br><span class="hljs-comment">// ts 实现单例模式</span><br><span class="hljs-keyword">class</span> Demo&#123;<br>    <span class="hljs-comment">// 私有静态属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> instance: Demo;<br>    <span class="hljs-comment">// 私有constructor</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span></span>)&#123;&#125;;<br>    <span class="hljs-comment">// 公共静态方法</span><br>    <span class="hljs-keyword">static</span> getInstance()&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.instance)&#123;<br>          <span class="hljs-keyword">this</span>.instance = <span class="hljs-keyword">new</span> Demo(<span class="hljs-string">'lee'</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.instance<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用的是同一个instance</span><br><span class="hljs-keyword">const</span> demo1 = Demo.getInstance();<br><span class="hljs-keyword">const</span> demo2 = Demo.getInstance();<br><span class="hljs-built_in">console</span>.log(demo1, demo2)<br></code></pre></td></tr></table></figure>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote>
<p>泛型，泛指的类型, 定义函数、接口和类时使用占位符不指定具体类型，使用时才指定,用&lt;&gt;先声明,  声明泛型 T 可以任意命名函数泛型,代表不知道什么类型的同一种类型</p>
</blockquote>
<ol>
<li>函数泛型</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 常规写法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br><span class="hljs-keyword">const</span> a = plus<br><span class="hljs-comment">// interface写法</span><br><span class="hljs-keyword">interface</span> IPlus&#123;<br>    (a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">const</span> plus:IPlus=<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">const</span> a = plus(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">// 泛型写法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">join</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">first: T, second: T</span>): <span class="hljs-title">T</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;first&#125;</span><span class="hljs-subst">$&#123;second&#125;</span>`</span>;<br>&#125;<br><span class="hljs-comment">// 可以声明 也可以类型推断</span><br>join&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>join(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">join</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">P</span>&gt;(<span class="hljs-params">first: T, second: P</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;first&#125;</span><span class="hljs-subst">$&#123;second&#125;</span>`</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<ol>
<li>接口泛型</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">interface</span> IPlus&lt;T&gt; &#123;<br>  (a: T, b: T): T;<br>&#125;<br><span class="hljs-keyword">const</span> plus: IPlus&lt;<span class="hljs-built_in">number</span>&gt; = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-keyword">const</span> a = plus(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">const</span> connet: IPlus&lt;<span class="hljs-built_in">string</span>&gt; = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-keyword">const</span> b = connet(<span class="hljs-string">'hello'</span>, <span class="hljs-string">'ts'</span>);<br></code></pre></td></tr></table></figure>
<ol>
<li>类泛型</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">class</span> Queue&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> data=[]<br>    <span class="hljs-keyword">push</span>(item: T)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.data.<span class="hljs-keyword">push</span>(item)<br>    &#125;<br>    <span class="hljs-keyword">pop</span>(): T&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.data.<span class="hljs-keyword">pop</span>()<br>    &#125;<br>&#125;<br><br>const q1= <span class="hljs-keyword">new</span> Queue&lt;number&gt;()<br>q1.<span class="hljs-keyword">push</span>(<span class="hljs-number">1</span>)<br>q1.<span class="hljs-keyword">push</span>(<span class="hljs-number">2</span>)<br>console.log(q1.<span class="hljs-keyword">pop</span>().toFixed());<br><br>const q2= <span class="hljs-keyword">new</span> Queue&lt;string&gt;()<br>q2.<span class="hljs-keyword">push</span>(<span class="hljs-string">'ss'</span>)<br>console.log(q2.<span class="hljs-keyword">pop</span>().trim())<br></code></pre></td></tr></table></figure>
<h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 泛型约束 使用extends使泛型满足某些条件</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IWithLength</span></span>&#123;<br>    length: number<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">IWithLength</span>&gt;<span class="hljs-params">(args: T)</span>:<span class="hljs-title">T</span></span>&#123;<br>    <span class="hljs-comment">// 需要一个有length属性的泛型</span><br>    console.log(args.length);<br>    <span class="hljs-keyword">return</span> args<br>  &#125;<br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">echo</span>(<span class="hljs-string">'sss'</span>)<br><span class="hljs-keyword">const</span> res2=<span class="hljs-keyword">echo</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><br><span class="hljs-comment">// 泛型继承 使用extends扩展类型</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IJoin</span> </span>&#123;<br>    name: string;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">join</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">IJoin</span> | <span class="hljs-title">number</span>&gt;<span class="hljs-params">(data:T[])</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> data[<span class="hljs-number">0</span>].name;<br>&#125;<br>join([&#123; name: <span class="hljs-string">'sss'</span> &#125;]);<br></code></pre></td></tr></table></figure>
<h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p>第三方库使用时需要<strong>声明文件</strong></p>
<p>声明文件以.d.ts 结尾 如：<code>jQuery.d.ts</code> 有了声明文件后项目中就可以使用 <code>jQuery()</code> 提供语法提示且不报错</p>
<p>搜索第三方库的声明文件 <a href="http://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">TypeSearch</a></p>
<p>从 npm 安装第三方库的声明文件 <a href="https://www.npmjs.com/search?q=%40types" target="_blank" rel="noopener">npm @types</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// jQuery.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> jQuery: <span class="hljs-function">(<span class="hljs-params">selector: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">any</span>;<br></code></pre></td></tr></table></figure>
<h2 id="typescript编译"><a href="#typescript编译" class="headerlink" title="typescript编译"></a><code>typescript</code>编译</h2><h3 id="ts-node-编译执行-ts-文件"><a href="#ts-node-编译执行-ts-文件" class="headerlink" title="ts-node 编译执行.ts 文件"></a><code>ts-node</code> 编译执行.ts 文件</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs undefined">npm install -g ts-<span class="hljs-keyword">node</span><br><span class="hljs-title">ts-node</span> script.ts<br></code></pre></td></tr></table></figure>
<h3 id="tsc"><a href="#tsc" class="headerlink" title="tsc"></a><code>tsc</code></h3><ul>
<li>不带任何输入文件的情况下调用 tsc，编译器会从当前目录开始去查找 tsconfig.json 文件，逐级向上搜索父目录。</li>
<li>不带任何输入文件的情况下调用 tsc，且使用命令行参数–project（或-p）指定一个包含 tsconfig.json 文件的目录。</li>
<li>当命令行上指定了输入文件时，tsconfig.json 文件会被忽略。</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># Run a compile based on a backwards look through the fs for a tsconfig.json</span><br>tsc<br><br><span class="hljs-comment"># Transpile just the index.ts with the compiler defaults</span><br>tsc index.ts<br><br><span class="hljs-comment"># Transpile any .ts files in the folder src, with the default settings</span><br>tsc src/*<span class="hljs-string">.ts</span><br><br><span class="hljs-comment"># Transpile any .ts files in the folder src, with the compiler settings from tsconfig.json</span><br>tsc <span class="hljs-params">--project</span> tsconfig.json src/*<span class="hljs-string">.ts</span><br></code></pre></td></tr></table></figure>
<h3 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a><code>tsconfig</code></h3><ul>
<li>生成<code>tsconfig.json</code></li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs undefined">tsc <span class="hljs-comment">--init</span><br></code></pre></td></tr></table></figure>
<ul>
<li>使用指定的<code>tsconfig.json</code>编译</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// pacage.json</span><br><span class="hljs-string">"script"</span>:&#123;<br>    <span class="hljs-string">"build-ts"</span>: <span class="hljs-string">"tsc -p tsconfig.build.json"</span><br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><code>tsconfig</code>配置</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs undefined">// tsconfig.json<br>&#123;<br>  <span class="hljs-string">"compilerOptions"</span>: &#123;<br>    /*=== Basic Options 基础编译选项 ===*/<br>    // <span class="hljs-string">"incremental"</span>:<span class="hljs-built_in"> true</span>,                   /* Enable incremental compilation */<br>    <span class="hljs-string">"target"</span>: <span class="hljs-string">"ES5"</span>,                          /* 编译完之后的ECMAScript 目标版本: <span class="hljs-string">'ES3'</span> (<span class="hljs-keyword">default</span>), <span class="hljs-string">'ES5'</span>, <span class="hljs-string">'ES2015'</span>, <span class="hljs-string">'ES2016'</span>, <span class="hljs-string">'ES2017'</span>, <span class="hljs-string">'ES2018'</span>, <span class="hljs-string">'ES2019'</span>, <span class="hljs-string">'ES2020'</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">'ESNEXT'</span>. 但是新的内置对象、静态方法、实例方法等不转换 */<br>    <span class="hljs-string">"module"</span>: <span class="hljs-string">"ESNext"</span>,                     /* 使用怎样的模块形式输出: <span class="hljs-string">'none'</span>, <span class="hljs-string">'commonjs'</span>, <span class="hljs-string">'amd'</span>, <span class="hljs-string">'system'</span>, <span class="hljs-string">'umd'</span>, <span class="hljs-string">'es2015'</span>, <span class="hljs-string">'es2020'</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">'ESNext'</span>. */<br>    // <span class="hljs-string">"lib"</span>: [],                             /* Specify library files <span class="hljs-keyword">to</span> be included <span class="hljs-keyword">in</span> the compilation. */<br>    <span class="hljs-string">"allowJs"</span>:<span class="hljs-built_in"> true</span>,                 // default:false 允许编译javascript文件。<br>    // <span class="hljs-string">"checkJs"</span>:<span class="hljs-built_in"> true</span>,                       /* Report errors <span class="hljs-keyword">in</span> .js files. */<br>    <span class="hljs-string">"jsx"</span>: <span class="hljs-string">"preserve"</span>, //  Default  :<span class="hljs-string">"preserve"</span>在 .tsx文件里支持JSX 在<span class="hljs-keyword">preserve</span>模式下生成代码中会保留JSX以供后续的转换操作使用（比如：Babel） <span class="hljs-string">"react"</span> 转换成React.<br>    <span class="hljs-string">"declaration"</span>:<span class="hljs-built_in"> true</span>,                   /* 为每一个ts文件生成<span class="hljs-string">'.d.ts'</span> 文件. */<br>    // <span class="hljs-string">"declarationMap"</span>:<span class="hljs-built_in"> true</span>,                /* Generates a sourcemap <span class="hljs-keyword">for</span> each corresponding <span class="hljs-string">'.d.ts'</span> file. */<br>    // <span class="hljs-string">"sourceMap"</span>:<span class="hljs-built_in"> true</span>,                     /* Generates corresponding <span class="hljs-string">'.map'</span> file. */<br>    // <span class="hljs-string">"outFile"</span>: <span class="hljs-string">"./"</span>,                       /* Concatenate <span class="hljs-keyword">and</span> emit output <span class="hljs-keyword">to</span> single file. */<br>    <span class="hljs-string">"outDir"</span>: <span class="hljs-string">"build"</span>,                        /* 输出目录 */<br>    // <span class="hljs-string">"rootDir"</span>: <span class="hljs-string">"./"</span>,                       /* Specify the<span class="hljs-built_in"> root</span> directory <span class="hljs-keyword">of</span> input files. Use <span class="hljs-keyword">to</span> control the output directory structure with --outDir. */<br>    // <span class="hljs-string">"composite"</span>:<span class="hljs-built_in"> true</span>,                     /* Enable project compilation */<br>    // <span class="hljs-string">"tsBuildInfoFile"</span>: <span class="hljs-string">"./"</span>,               /* Specify file <span class="hljs-keyword">to</span> store incremental compilation information */<br>    // <span class="hljs-string">"removeComments"</span>:<span class="hljs-built_in"> true</span>,                /* Do<span class="hljs-built_in"> not</span> emit comments <span class="hljs-keyword">to</span> output. */<br>    // <span class="hljs-string">"noEmit"</span>:<span class="hljs-built_in"> true</span>,                        /* Do<span class="hljs-built_in"> not</span> emit outputs. */<br>    // <span class="hljs-string">"importHelpers"</span>:<span class="hljs-built_in"> true</span>,                 /* Import emit helpers from <span class="hljs-string">'tslib'</span>. */<br>    // <span class="hljs-string">"downlevelIteration"</span>:<span class="hljs-built_in"> true</span>,            /* Provide full support <span class="hljs-keyword">for</span> iterables <span class="hljs-keyword">in</span> <span class="hljs-string">'for-of'</span>, spread, <span class="hljs-keyword">and</span> destructuring <span class="hljs-keyword">when</span> targeting <span class="hljs-string">'ES5'</span> <span class="hljs-keyword">or</span> <span class="hljs-string">'ES3'</span>. */<br>    // <span class="hljs-string">"isolatedModules"</span>:<span class="hljs-built_in"> true</span>,               /* 文件必须以模块的形式组织 */<br><br><br>    /*=== Strict Type-Checking Options 严格模式检查 ===*/<br>    <span class="hljs-string">"strict"</span>:<span class="hljs-built_in"> true</span>,                           /* default:false 启用所有严格类型检查选项。相当于全部启用下面这些 */<br>    // <span class="hljs-string">"noImplicitAny"</span>:<span class="hljs-built_in"> true</span>,                 /* 不能有隐式的any类型 */<br>    // <span class="hljs-string">"strictNullChecks"</span>:<span class="hljs-built_in"> true</span>,              /* Enable <span class="hljs-keyword">strict</span> null checks. */<br>    // <span class="hljs-string">"strictFunctionTypes"</span>:<span class="hljs-built_in"> true</span>,           /* Enable <span class="hljs-keyword">strict</span> checking <span class="hljs-keyword">of</span> <span class="hljs-keyword">function</span> types. */<br>    // <span class="hljs-string">"strictBindCallApply"</span>:<span class="hljs-built_in"> true</span>,           /* Enable <span class="hljs-keyword">strict</span> <span class="hljs-string">'bind'</span>, <span class="hljs-string">'call'</span>, <span class="hljs-keyword">and</span> <span class="hljs-string">'apply'</span> methods on functions. */<br>    // <span class="hljs-string">"strictPropertyInitialization"</span>:<span class="hljs-built_in"> true</span>,  /* Enable <span class="hljs-keyword">strict</span> checking <span class="hljs-keyword">of</span> property initialization <span class="hljs-keyword">in</span> classes. */<br>    // <span class="hljs-string">"noImplicitThis"</span>:<span class="hljs-built_in"> true</span>,                /* Raise<span class="hljs-built_in"> error</span> on <span class="hljs-string">'this'</span> expressions with an implied <span class="hljs-string">'any'</span> type. */<br>    // <span class="hljs-string">"alwaysStrict"</span>:<span class="hljs-built_in"> true</span>,                  /* Parse <span class="hljs-keyword">in</span> <span class="hljs-keyword">strict</span> mode <span class="hljs-keyword">and</span> emit <span class="hljs-string">"use strict"</span> <span class="hljs-keyword">for</span> each source file. */<br><br><br>    /*=== Additional Checks 一些格式检查===*/<br>    // <span class="hljs-string">"noUnusedLocals"</span>:<span class="hljs-built_in"> true</span>,                /* Report errors on unused locals. */<br>    // <span class="hljs-string">"noUnusedParameters"</span>:<span class="hljs-built_in"> true</span>,            /* Report errors on unused parameters. */<br>    // <span class="hljs-string">"noImplicitReturns"</span>:<span class="hljs-built_in"> true</span>,             /* Report<span class="hljs-built_in"> error</span> <span class="hljs-keyword">when</span><span class="hljs-built_in"> not</span> all code paths <span class="hljs-keyword">in</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">return</span> a <span class="hljs-keyword">value</span>. */<br>    // <span class="hljs-string">"noFallthroughCasesInSwitch"</span>:<span class="hljs-built_in"> true</span>,    /* Report errors <span class="hljs-keyword">for</span> fallthrough cases <span class="hljs-keyword">in</span> <span class="hljs-keyword">switch</span> statement. */<br><br><br>    /*=== Module Resolution Options 模块相关的一些方案===*/<br>    <span class="hljs-string">"moduleResolution"</span>: <span class="hljs-string">"node"</span>,            /* 指定模块解析策略为<span class="hljs-type">node</span> 否则会绝对路径去找找不到: <span class="hljs-string">'node'</span> (Node.js) <span class="hljs-keyword">or</span> <span class="hljs-string">'classic'</span> (TypeScript pre-<span class="hljs-number">1.6</span>). */<br>    // <span class="hljs-string">"baseUrl"</span>: <span class="hljs-string">"./"</span>,                       /* Base directory <span class="hljs-keyword">to</span> resolve non-absolute <span class="hljs-keyword">module</span> names. */<br>    // <span class="hljs-string">"paths"</span>: &#123;&#125;,                           /* A series <span class="hljs-keyword">of</span> entries which re-map imports <span class="hljs-keyword">to</span> lookup locations relative <span class="hljs-keyword">to</span> the <span class="hljs-string">'baseUrl'</span>. */<br>    // <span class="hljs-string">"rootDirs"</span>: [],                        /* List <span class="hljs-keyword">of</span><span class="hljs-built_in"> root</span> folders whose combined content represents the structure <span class="hljs-keyword">of</span> the project <span class="hljs-keyword">at</span> runtime. */<br>    // <span class="hljs-string">"typeRoots"</span>: [],                       /* List <span class="hljs-keyword">of</span> folders <span class="hljs-keyword">to</span> include type definitions from. */<br>    // <span class="hljs-string">"types"</span>: [],                           /* Type declaration files <span class="hljs-keyword">to</span> be included <span class="hljs-keyword">in</span> compilation. */<br>    <span class="hljs-string">"allowSyntheticDefaultImports"</span>:<span class="hljs-built_in"> true</span>,  /* 允许使用 <span class="hljs-keyword">import</span> React from <span class="hljs-string">"react"</span>; 否则要写成：<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React from <span class="hljs-string">"react"</span>; */<br>    <span class="hljs-string">"esModuleInterop"</span>:<span class="hljs-built_in"> true</span>,                  /* Enables emit interoperability between CommonJS <span class="hljs-keyword">and</span> ES Modules via creation <span class="hljs-keyword">of</span> <span class="hljs-type">namespace</span> objects <span class="hljs-keyword">for</span> all imports. Implies <span class="hljs-string">'allowSyntheticDefaultImports'</span>. */<br>    // <span class="hljs-string">"preserveSymlinks"</span>:<span class="hljs-built_in"> true</span>,              /* Do<span class="hljs-built_in"> not</span> resolve the real<span class="hljs-built_in"> path</span> <span class="hljs-keyword">of</span> symlinks. */<br>    // <span class="hljs-string">"allowUmdGlobalAccess"</span>:<span class="hljs-built_in"> true</span>,          /* Allow accessing UMD globals from modules. */<br><br><br>    /*=== Source Map Options source <span class="hljs-keyword">map</span>配置===*/<br>    // <span class="hljs-string">"sourceRoot"</span>: <span class="hljs-string">""</span>,                      /* Specify the location <span class="hljs-keyword">where</span> debugger should locate TypeScript files instead <span class="hljs-keyword">of</span> source locations. */<br>    // <span class="hljs-string">"mapRoot"</span>: <span class="hljs-string">""</span>,                         /* Specify the location <span class="hljs-keyword">where</span> debugger should locate <span class="hljs-keyword">map</span> files instead <span class="hljs-keyword">of</span> generated locations. */<br>    // <span class="hljs-string">"inlineSourceMap"</span>:<span class="hljs-built_in"> true</span>,               /* Emit a single file with source maps instead <span class="hljs-keyword">of</span> having a separate file. */<br>    // <span class="hljs-string">"inlineSources"</span>:<span class="hljs-built_in"> true</span>,                 /* Emit the source alongside the sourcemaps within a single file; requires <span class="hljs-string">'--inlineSourceMap'</span> <span class="hljs-keyword">or</span> <span class="hljs-string">'--sourceMap'</span> <span class="hljs-keyword">to</span> be set. */<br><br>    /*=== Experimental Options 实验性选项支持 ===*/<br>    // <span class="hljs-string">"experimentalDecorators"</span>:<span class="hljs-built_in"> true</span>,        /* Enables experimental support <span class="hljs-keyword">for</span> ES7 decorators. */<br>    // <span class="hljs-string">"emitDecoratorMetadata"</span>:<span class="hljs-built_in"> true</span>,         /* Default<span class="hljs-built_in">：false</span> 启用实验性的ES装饰器。 */<br><br>    /*=== Advanced Options 高级选项 ===*/<br>    <span class="hljs-string">"forceConsistentCasingInFileNames"</span>:<span class="hljs-built_in"> true</span>,  /* Default<span class="hljs-built_in">：false</span> 禁止对同一个文件的不一致的引用 */<br>    // <span class="hljs-string">"skipLibCheck"</span>:<span class="hljs-built_in"> false</span>, /* default:false 忽略所有的声明文件（ *.d.ts）的类型检查,适用于node_modules中有两个同样的库 */<br>  &#125;,<br><br>  /*=== File Inclusion 文件包含 ===*/<br>  <span class="hljs-string">"include"</span>: [<span class="hljs-string">"src"</span>],<br>  <span class="hljs-string">"exclude"</span>: [<span class="hljs-string">"src/**/*.tsx"</span>,<span class="hljs-string">"test"</span>, <span class="hljs-string">"stories"</span>]<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="typescript-React"><a href="#typescript-React" class="headerlink" title="typescript + React"></a>typescript + React</h2><p>常规写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<br><br>interface IHelloProps &#123;<br>    <span class="hljs-attr">name</span>: string<br>&#125;<br><br><span class="hljs-keyword">const</span> Hello = <span class="hljs-function">(<span class="hljs-params">props: IHelloProps</span>) =&gt;</span> &#123;<br><br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;`Hello $&#123;props.name&#125;`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Hello;<br></code></pre></td></tr></table></figure>
<p>使用 react 提供的声明</p>
<p>/node_modules/@types/react/index.d.ts 声明文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">..</span>.<span class="hljs-built_in"><br>type </span>FC&lt;P = &#123;&#125;&gt; = FunctionComponent&lt;P&gt;;<span class="hljs-built_in"><br>interface </span>FunctionComponent&lt;P = &#123;&#125;&gt; &#123;<br>    (props: PropsWithChildren&lt;P&gt;, context?: any): ReactElement&lt;any, any&gt; | <span class="hljs-literal">null</span>;<br>    propTypes?: WeakValidationMap&lt;P&gt;;<br>    contextTypes?: ValidationMap&lt;any&gt;;<br>    defaultProps?: Partial&lt;P&gt;;<br>    displayName?: string;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> React, &#123; FC, ButtonHTMLAttributes,<br>  AnchorHTMLAttributes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<br><br><span class="hljs-comment">// 为了允许我们的组件支持原生props 结合react提供的button、a原生props</span><br>type NativeButtonProps = IButtonProps &amp; ButtonHTMLAttributes&lt;HTMLElement&gt;<br>type AnchorButtonProps = IButtonProps &amp; AnchorHTMLAttributes&lt;HTMLElement&gt;<br><br>interface IHelloProps &#123;<br>  name?: string;<br>&#125;<br><span class="hljs-comment">// 提供了react函数组件的各种特性 如children displayName等</span><br><span class="hljs-comment">// 不然会报错 React.FC 是 React.FunctionComponent 的别名</span><br><span class="hljs-keyword">const</span> Hello: React.FC&lt;IHelloProps&gt; = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>      &#123;`Hello $&#123;props.name&#125;`&#125;<br>      &#123;props.children&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  );<br>&#125;;<br>Hello.defaultProps=&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'ts'</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Hello;<br></code></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化的一点思考</title>
    <url>/20190624-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>前端目前来说越来越庞大，对前端有了一种新的定义–大前端，PHP和node等一些弱类型的脚本辅助语言也逐渐归类为大前端的一部分。对于一个完整的，可持续优化的项目，前端的优化必不可少。</p>
<ul>
<li>减少 HTTP请求数</li>
<li>将外部脚本置底</li>
<li>异步执行 inline脚本</li>
<li>将 CSS放在 HEAD中</li>
<li>减少不必要的 HTTP跳转</li>
<li>避免重复的资源请求</li>
<li>Image压缩</li>
<li>文件等静态资源存储到CDN服务器<br>…<a id="more"></a>
</li>
</ul>
<p>除了以上这些最基础的性能优化方案，随着5G的普及，短视频的道路会越走越远。来看一组数据：<br><img data-src="1561365784722.jpg" alt="几组数据"></p>
<p>由此可见，5G的到来，会促进前端性能优化的大进发。</p>
<h1 id="SSR-CSR-NSR"><a href="#SSR-CSR-NSR" class="headerlink" title="SSR? CSR? NSR!"></a>SSR? CSR? NSR!</h1><h2 id="CSR（客户端渲染）"><a href="#CSR（客户端渲染）" class="headerlink" title="CSR（客户端渲染）"></a>CSR（客户端渲染）</h2><p>在当今SPA框架，Vue，React，Angular大行天下的时候，前后端分离开发异常可见。客户端渲染简单理解就是浏览器发送页面请求，服务器返回的是一个模板页面，浏览器从上至下解析过程中需要发送ajax请求获取数据，最后再调用模板引擎（art-template等）渲染HTML结构，并把渲染后的结果添加到页面指定容器中。</p>
<p>客户端渲染因为数据是异步获取，所以在展示完整页面的过程中最少发起两次请求，数据是动态的添加到页面中，因此，非常不利于SEO，便于前后端分离开发。现如今前端采用Vue等框架开发非常多见，因此为了解决纯客户端渲染面临的问题，很多类似Vue中使用SSR和前后端同构的思想也非常常见。</p>
<h2 id="SSR（服务端渲染）"><a href="#SSR（服务端渲染）" class="headerlink" title="SSR（服务端渲染）"></a>SSR（服务端渲染）</h2><p>简单理解就是浏览器发送请求后，服务器把客户端网页和数据在后台渲染解析，之后把渲染后的结果返回客户端。</p>
<p>客户端拿到的是渲染后的结果，可以直接展示。服务器端渲染的页面在网络中传输的时候，传输的是一个真实的页面。因此，爬虫客户端当爬到我们的页面后，会分析我们给他提供的这个页面，此时，我们页面中的关键数据就会被爬虫给收录了。服务端渲染可以解决首页白屏时间过久，但是也容易导致服务器压力大，因此，可以使用服务器端的页面缓存技术，减轻服务器的渲染压力。</p>
<blockquote>
<p>思考： 如果SSR是解决web性能问题的最优手段，它能对齐Native的性能吗？</p>
</blockquote>
<h2 id="NSR（Native渲染）"><a href="#NSR（Native渲染）" class="headerlink" title="NSR（Native渲染）"></a>NSR（Native渲染）</h2><p>顾名思义，NSR即是通过WebView内核的机制进行的提前渲染，web，h5加载页面的时候，先去读取Core MemiryCache搜寻数据，如果有数据，直接渲染，这个是理论上的最短渲染路径，相比SSR，CSR发请求，拉取数据来说，这个是最快的渲染方式。MemoryCache没有数据拦截IO请求，读取离线资源，解释如下图所示：<br><img data-src="1561366676938.jpg" alt="渲染的最短路径"></p>
<p>上图的内核缓存首先是基于已经存在的PreFetch，通过内核请求获取到的数据，缓存在内核Core MemoryCache中：<br><img data-src="1561366112343.jpg" alt="阿里巴巴UC目前已经拥有的优化过程PreFetch"></p>
<p><img data-src="1561367648768.jpg" alt="渲染流程对比"></p>
<p>NSR存在一个命中率的问题，如果内核没有缓存数据的时候，需要从离线资源缓存或者是http缓存获取数据，这个流程用CSR替代，这些缓存都没有数据的时候需要发起网络请求的时候，服务端返回的数据改用SSR返回已经渲染好的结果。这也就是<code>三端同构</code>，此时的性能更进一步。</p>
<h1 id="pure-jsx"><a href="#pure-jsx" class="headerlink" title="pure-jsx"></a>pure-jsx</h1><p>一个没有Vdom的但保留最小组件周期的React实现（只有1KB）。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>《咏玉兰》</title>
    <url>/20190313-%E5%92%8F%E7%8E%89%E5%85%B0-%E6%98%A5/</url>
    <content><![CDATA[<h3 id="儿子刚拍的照片，我亦十分喜欢，拙作一首以谢春！"><a href="#儿子刚拍的照片，我亦十分喜欢，拙作一首以谢春！" class="headerlink" title="儿子刚拍的照片，我亦十分喜欢，拙作一首以谢春！"></a>儿子刚拍的照片，我亦十分喜欢，拙作一首以谢春！</h3><p><div style="text-align:center;background:rgb(247,196,78);padding-bottom:20px"><br>    <i>没有叶伴蜂蝶舞<br>    自怜晨露沐寒风<br>    谁羡牡丹争国色<br>    玉骨冰心独领春</i><br></div><a id="more"></a></p>
<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/yyl3.jpeg" alt></p>
<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/yyl1.jpeg" alt></p>
<p><img data-src="https://test-hou.oss-cn-shanghai.aliyuncs.com/blog/yyl2.jpeg" alt></p>
]]></content>
      <categories>
        <category>Kevin专栏</category>
      </categories>
      <tags>
        <tag>Kevin专栏</tag>
        <tag>春</tag>
      </tags>
  </entry>
  <entry>
    <title>基于AI的Git Commit Message生成工具：从思路到实践</title>
    <url>/20250701-%E5%9F%BA%E4%BA%8EAI%E7%9A%84Git-Commit-Message%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%EF%BC%9A%E4%BB%8E%E6%80%9D%E8%B7%AF%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="基于AI的Git-Commit-Message生成工具：从思路到实践"><a href="#基于AI的Git-Commit-Message生成工具：从思路到实践" class="headerlink" title="基于AI的Git Commit Message生成工具：从思路到实践"></a>基于AI的Git Commit Message生成工具：从思路到实践</h1><p>在软件开发过程中，编写规范、清晰的commit message是一项重要但常被忽视的工作。良好的commit message不仅能帮助团队成员理解代码变更的目的和影响，还能为代码审查、版本追溯和自动化发布流程提供基础。然而，在日常开发中，开发者往往因为赶进度或习惯问题而忽略commit message的质量。本文将介绍一个基于AI的Git Commit Message生成工具，从思路、实现到使用全方位剖析这一解决方案。</p>
<h2 id="背景思考"><a href="#背景思考" class="headerlink" title="背景思考"></a>背景思考</h2><h3 id="为什么需要规范的Commit-Message？"><a href="#为什么需要规范的Commit-Message？" class="headerlink" title="为什么需要规范的Commit Message？"></a>为什么需要规范的Commit Message？</h3><p>规范的commit message具有以下几个关键价值：</p>
<ol>
<li><strong>提高代码可读性</strong>：清晰描述每次提交的目的和内容</li>
<li><strong>便于版本追溯</strong>：快速定位特定功能或修复的引入时间</li>
<li><strong>自动化支持</strong>：支持自动生成更新日志、版本号管理</li>
<li><strong>团队协作</strong>：减少沟通成本，提高代码审查效率</li>
</ol>
<a id="more"></a>
<h3 id="传统痛点"><a href="#传统痛点" class="headerlink" title="传统痛点"></a>传统痛点</h3><p>然而，在实际开发中，我们常常面临以下问题：</p>
<ul>
<li>编写规范message需要额外时间和精力</li>
<li>团队成员对规范理解不一致</li>
<li>难以全面概括复杂的代码变更</li>
<li>工作流ID（如Jira、Flow）需要手动关联</li>
</ul>
<h2 id="工具设计思路"><a href="#工具设计思路" class="headerlink" title="工具设计思路"></a>工具设计思路</h2><p>基于上述背景，我们设计了一个基于AI的commit message生成工具，核心思路如下：</p>
<ol>
<li><strong>智能分析代码变更</strong>：自动分析git diff内容，理解代码变更的本质</li>
<li><strong>规范化输出</strong>：生成符合团队约定格式的commit message</li>
<li><strong>工作流集成</strong>：支持Flow ID等工作流标识的自动关联</li>
<li><strong>便捷操作</strong>：提供一站式的commit和push操作体验</li>
</ol>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="核心架构"><a href="#核心架构" class="headerlink" title="核心架构"></a>核心架构</h3><p>工具的核心架构包括以下几个部分：</p>
<ol>
<li><strong>Git交互层</strong>：负责获取代码变更信息</li>
<li><strong>AI分析层</strong>：基于OpenAI API分析变更并生成message</li>
<li><strong>交互层</strong>：提供用户交互界面和操作流程</li>
<li><strong>工具集成层</strong>：与剪贴板、终端等系统组件集成</li>
</ol>
<h3 id="关键实现细节"><a href="#关键实现细节" class="headerlink" title="关键实现细节"></a>关键实现细节</h3><h4 id="1-Git变更分析"><a href="#1-Git变更分析" class="headerlink" title="1. Git变更分析"></a>1. Git变更分析</h4><p>工具通过<code>git diff</code>和<code>git status</code>命令获取当前工作区的变更情况，并区分两种主要场景：</p>
<ul>
<li><strong>已修改文件</strong>：通过<code>git diff</code>获取详细变更内容</li>
<li><strong>新增文件</strong>：通过<code>git status</code>识别新文件，并读取其内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取 git diff 变更</span><br><span class="hljs-keyword">const</span> gitDiff = execCommand(<span class="hljs-string">'git diff'</span>);<br><span class="hljs-comment">// 执行 git status 获取当前分支的文件列表</span><br><span class="hljs-keyword">const</span> gitStatus = execCommand(<span class="hljs-string">'git status'</span>);<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li><code>execCommand</code> 是一个封装了 Node.js 的 <code>child_process.execSync</code> 的工具函数，用于执行 shell 命令并捕获输出</li>
<li>这里使用了两个 Git 命令来获取不同类型的变更信息：<ul>
<li><code>git diff</code> 获取已暂存文件的具体变更内容</li>
<li><code>git status</code> 获取工作区状态，用于识别新增文件</li>
</ul>
</li>
</ul>
<h4 id="2-AI提示工程"><a href="#2-AI提示工程" class="headerlink" title="2. AI提示工程"></a>2. AI提示工程</h4><p>针对不同的变更场景，工具构建了专门的提示模板，引导AI生成符合规范的commit message：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 修改文件场景</span><br><span class="hljs-keyword">const</span> prompt = <span class="hljs-string">`根据以下 git diff 变更，生成一个 git commit 信息，只需要返回文字和换行符，不需要返回其他的字符，需要包含：\n1. 变更修改的内容\n2. 变更修改的原因\n\n按照以下格式返回（使用实际的 flowId: <span class="hljs-subst">$&#123;flowId&#125;</span>）：\nfix(<span class="hljs-subst">$&#123;flowId&#125;</span>): 修复xxx问题\n\n    - 详细变更点1\n    - 详细变更点2\n    - 详细变更点3\n    - 变更影响和意义总结\n`</span>;<br><br><span class="hljs-comment">// 新增文件场景</span><br><span class="hljs-keyword">const</span> prompt = <span class="hljs-string">`根据以下新增文件的代码内容，生成一个 git commit 信息，只需要返回文字和换行符，不需要返回其他的字符，需要包含：\n1. 新增了哪些文件及其主要功能\n2. 新增的业务或技术价值\n\n按照以下格式返回（使用实际的 flowId: <span class="hljs-subst">$&#123;flowId&#125;</span>）：\nfeat(<span class="hljs-subst">$&#123;flowId&#125;</span>): 新增xxx功能\n\n    - 新增了xxx文件，实现了xxx功能\n    - 主要逻辑说明\n    - 业务或技术价值总结\n`</span>;<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li>提示工程是AI应用的核心，这里针对两种不同场景设计了不同的提示模板</li>
<li>修改文件场景的提示侧重于变更内容和原因的分析</li>
<li>新增文件场景的提示侧重于功能和价值的描述</li>
<li>两种提示都明确指定了输出格式，确保生成的commit message符合规范</li>
</ul>
<h4 id="3-用户交互流程"><a href="#3-用户交互流程" class="headerlink" title="3. 用户交互流程"></a>3. 用户交互流程</h4><p>工具采用简洁的命令行交互方式，支持一站式操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 询问是否 commit</span><br><span class="hljs-keyword">const</span> isCommit = <span class="hljs-keyword">await</span> inquirer.prompt([<br>    &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'confirm'</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">'isCommit'</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">'是否执行 commit？(default no)'</span>,<br>        <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span>,<br>    &#125;<br>]);<br><br><span class="hljs-comment">// 询问是否 push</span><br><span class="hljs-keyword">const</span> isPush = <span class="hljs-keyword">await</span> inquirer.prompt([<br>    &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'confirm'</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">'isPush'</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">'是否执行 git push？(default no)'</span>,<br>        <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span>,<br>    &#125;<br>]);<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li>使用 <code>inquirer</code> 库提供交互式命令行界面</li>
<li>采用 <code>confirm</code> 类型的提示，让用户做出是/否的选择</li>
<li>默认选项设为 <code>false</code>，避免误操作</li>
<li>这种交互方式简洁明了，减少用户操作负担</li>
</ul>
<h4 id="4-系统集成"><a href="#4-系统集成" class="headerlink" title="4. 系统集成"></a>4. 系统集成</h4><p>工具还实现了与系统剪贴板的集成，方便用户直接复制使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 复制到剪贴板</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> tempFile = path.join(os.tmpdir(), <span class="hljs-string">`.temp_commit_msg_<span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now()&#125;</span>`</span>);<br>    fs.writeFileSync(tempFile, commitMessage, <span class="hljs-string">'utf8'</span>);<br>    execCommand(<span class="hljs-string">`cat "<span class="hljs-subst">$&#123;tempFile&#125;</span>" | pbcopy`</span>);<br>    fs.unlinkSync(tempFile);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'\n✅ 已复制到剪贴板！'</span>);<br>&#125; <span class="hljs-keyword">catch</span> (copyError) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'\n❌ 复制到剪贴板失败:'</span>, copyError.message);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li>这段代码实现了跨平台的剪贴板复制功能</li>
<li>先将生成的commit message写入临时文件</li>
<li>然后使用系统命令（这里是macOS的<code>pbcopy</code>）将内容复制到剪贴板</li>
<li>最后删除临时文件，避免垃圾文件残留</li>
<li>整个过程有完善的错误处理机制</li>
</ul>
<h3 id="核心功能实现详解"><a href="#核心功能实现详解" class="headerlink" title="核心功能实现详解"></a>核心功能实现详解</h3><h4 id="AI-调用与处理"><a href="#AI-调用与处理" class="headerlink" title="AI 调用与处理"></a>AI 调用与处理</h4><p>工具的核心功能是调用 OpenAI API 并处理返回结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateCommitMessageAndHandle</span>(<span class="hljs-params">&#123; prompt, aiContent &#125;</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!OPENAI_API_KEY) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'请设置 OPENAI_API_KEY 环境变量'</span>);<br>        process.exit(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> message = prompt + <span class="hljs-string">'\n'</span> + aiContent;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">$&#123;BASE_URL&#125;</span>/v1/chat/completions`</span>, &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/json'</span>,<br>            <span class="hljs-string">'Authorization'</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;OPENAI_API_KEY&#125;</span>`</span><br>        &#125;,<br>        <span class="hljs-attr">body</span>: <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>            <span class="hljs-attr">model</span>: process.env.MODEL,<br>            <span class="hljs-attr">messages</span>: [&#123; <span class="hljs-attr">role</span>: <span class="hljs-string">'user'</span>, <span class="hljs-attr">content</span>: message &#125;],<br>            <span class="hljs-attr">temperature</span>: <span class="hljs-number">0.7</span><br>        &#125;)<br>    &#125;);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.json();<br>    <span class="hljs-keyword">if</span> (!data.choices || !data.choices[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'API 响应格式错误:'</span>, data);<br>        process.exit(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> commitMessage = data.choices[<span class="hljs-number">0</span>].message.content;<br>    <span class="hljs-comment">// ... 后续处理代码</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li>函数接收两个参数：提示模板和待分析的代码内容</li>
<li>首先检查API密钥是否设置，确保API调用的前提条件</li>
<li>使用原生的<code>fetch</code>API发起HTTP请求，调用OpenAI的聊天补全接口</li>
<li>设置<code>temperature</code>为0.7，平衡创造性和一致性</li>
<li>对API响应进行错误处理，确保返回格式符合预期</li>
<li>从响应中提取生成的commit message内容</li>
</ul>
<h4 id="新增文件处理"><a href="#新增文件处理" class="headerlink" title="新增文件处理"></a>新增文件处理</h4><p>对于新增文件的处理，工具实现了智能的文件内容提取和截断：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (newFiles.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 有新增文件，走新增分析</span><br>    <span class="hljs-keyword">let</span> filesContent = <span class="hljs-string">''</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> file <span class="hljs-keyword">of</span> newFiles) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> content = fs.readFileSync(path.join(currentDir, file), <span class="hljs-string">'utf8'</span>);<br>            <span class="hljs-keyword">const</span> lines = content.split(<span class="hljs-string">'\n'</span>);<br>            <span class="hljs-keyword">let</span> displayContent = content;<br>            <span class="hljs-keyword">if</span> (lines.length &gt; <span class="hljs-number">400</span>) &#123;<br>                displayContent = lines.slice(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>).join(<span class="hljs-string">'\n'</span>) + <span class="hljs-string">'\n...\n'</span> + lines.slice(<span class="hljs-number">-200</span>).join(<span class="hljs-string">'\n'</span>);<br>            &#125;<br>            filesContent += <span class="hljs-string">`文件: <span class="hljs-subst">$&#123;file&#125;</span>\n内容:\n<span class="hljs-subst">$&#123;displayContent&#125;</span>\n\n`</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            filesContent += <span class="hljs-string">`文件: <span class="hljs-subst">$&#123;file&#125;</span>\n读取失败: <span class="hljs-subst">$&#123;e.message&#125;</span>\n\n`</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ... AI处理代码</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li>遍历所有新增文件，读取其内容</li>
<li>对于大文件（超过400行），只保留前200行和后200行，中间用省略号表示</li>
<li>这种处理方式既能保证API请求不会过大，又能保留文件的关键信息</li>
<li>完善的错误处理确保即使某个文件读取失败，整个流程也不会中断</li>
</ul>
<h4 id="Git操作集成"><a href="#Git操作集成" class="headerlink" title="Git操作集成"></a>Git操作集成</h4><p>工具实现了与Git命令的无缝集成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 执行 git add 和 commit</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'\n执行 git add...'</span>);<br>execCommand(<span class="hljs-string">'git add .'</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'✅ git add 成功！'</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'\n执行 git commit...'</span>);<br>execCommand(<span class="hljs-string">`git commit -m "<span class="hljs-subst">$&#123;commitMessage.replace(<span class="hljs-regexp">/"/g</span>, <span class="hljs-string">'\"'</span>)&#125;</span>"`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'✅ commit 成功！'</span>);<br><br><span class="hljs-comment">// 执行 git push</span><br>execCommand(<span class="hljs-string">'git push'</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'✅ push 成功！'</span>);<br></code></pre></td></tr></table></figure>
<p><strong>代码解析</strong>：</p>
<ul>
<li>使用前面定义的<code>execCommand</code>函数执行Git命令</li>
<li>在执行commit命令时，对生成的message中的双引号进行转义，避免命令行解析错误</li>
<li>每个步骤都有清晰的日志输出，让用户了解当前进度</li>
<li>这种集成方式使得整个工作流程一气呵成，大大提高了效率</li>
</ul>
<h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><ol>
<li><p><strong>全局安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install -g generator-commit-message<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>临时使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npx generator-commit-message flow-xxxx<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>环境配置</strong></p>
<p>在项目根目录创建<code>.env</code>文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">OPENAI_API_KEY</span>=your_api_key_here<br><span class="hljs-attr">BASE_URL</span>=your_api_base_url_here<br><span class="hljs-attr">MODEL</span>=gpt-<span class="hljs-number">3.5</span>-turbo<br></code></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol>
<li><p><strong>执行命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gcm flow-22914<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>查看生成结果</strong><br>工具会自动分析代码变更，生成规范的commit message并显示</p>
</li>
<li><p><strong>确认操作</strong></p>
<ul>
<li>选择是否执行commit</li>
<li>选择是否执行push</li>
</ul>
</li>
</ol>
<h3 id="实际效果展示"><a href="#实际效果展示" class="headerlink" title="实际效果展示"></a>实际效果展示</h3><h4 id="代码修改场景"><a href="#代码修改场景" class="headerlink" title="代码修改场景"></a>代码修改场景</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ gcm flow-22914<br><br>生成的 commit message:<br><br>fix(flow-22914): 修复购物车数量更新时的状态同步问题<br><br>- 解决了购物车组件在数量变更时状态不同步的问题<br>- 优化了购物车数据更新的时序处理逻辑<br>- 修复了并发更新导致的数据不一致问题<br>- 确保购物车状态在各个组件间的正确同步<br><br>✅ 已复制到剪贴板！<br>? 是否执行 commit？(default no) (y/N)<br></code></pre></td></tr></table></figure>
<h4 id="新增文件场景"><a href="#新增文件场景" class="headerlink" title="新增文件场景"></a>新增文件场景</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ gcm flow-22914<br><br>生成的 commit message:<br><br>feat(flow-22914): 新增用户权限管理模块<br><br>- 新增了 UserPermission.vue 组件，实现权限列表展示功能<br>- 添加了权限查询、编辑和删除的交互逻辑<br>- 集成了角色权限的动态配置功能<br>- 提升了系统的权限管理灵活性和用户体验<br><br>✅ 已复制到剪贴板！<br>? 是否执行 commit？(default no) (y/N)<br></code></pre></td></tr></table></figure>
<h2 id="技术亮点与实践经验"><a href="#技术亮点与实践经验" class="headerlink" title="技术亮点与实践经验"></a>技术亮点与实践经验</h2><h3 id="亮点分析"><a href="#亮点分析" class="headerlink" title="亮点分析"></a>亮点分析</h3><ol>
<li><p><strong>智能化分析</strong></p>
<ul>
<li>区分处理修改和新增文件场景</li>
<li>自动提取变更的核心内容和意图</li>
</ul>
</li>
<li><p><strong>流程优化</strong></p>
<ul>
<li>一站式完成从分析到提交的全流程</li>
<li>自动复制到剪贴板减少手动操作</li>
</ul>
</li>
<li><p><strong>规范保障</strong></p>
<ul>
<li>确保commit message格式一致</li>
<li>自动关联工作流ID（Flow ID）</li>
</ul>
</li>
</ol>
<h3 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h3><p>在实际使用过程中，我们积累了以下经验：</p>
<ol>
<li><p><strong>提示工程至关重要</strong></p>
<ul>
<li>精心设计的提示模板能显著提高AI输出质量</li>
<li>针对不同场景定制不同提示策略</li>
</ul>
</li>
<li><p><strong>文件内容处理</strong></p>
<ul>
<li>对大文件进行截断处理，避免超出API限制</li>
<li>保留文件头尾，确保关键信息不丢失</li>
</ul>
</li>
<li><p><strong>错误处理</strong></p>
<ul>
<li>完善的错误处理机制提高工具稳定性</li>
<li>友好的错误提示改善用户体验</li>
</ul>
</li>
</ol>
<h2 id="注意事项与最佳实践"><a href="#注意事项与最佳实践" class="headerlink" title="注意事项与最佳实践"></a>注意事项与最佳实践</h2><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ol>
<li><p><strong>API密钥安全</strong></p>
<ul>
<li>不要将API密钥硬编码在代码中</li>
<li>使用环境变量或配置文件管理敏感信息</li>
</ul>
</li>
<li><p><strong>网络依赖</strong></p>
<ul>
<li>工具依赖网络访问AI API，确保网络畅通</li>
<li>考虑API调用失败的降级策略</li>
</ul>
</li>
<li><p><strong>大型变更处理</strong></p>
<ul>
<li>对于大型变更，考虑拆分为多个小commit</li>
<li>AI可能无法完全理解复杂的变更意图</li>
</ul>
</li>
</ol>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol>
<li><p><strong>定期审查生成质量</strong></p>
<ul>
<li>定期检查AI生成的commit message质量</li>
<li>根据实际使用效果调整提示模板</li>
</ul>
</li>
<li><p><strong>与团队规范结合</strong></p>
<ul>
<li>根据团队的commit规范定制生成格式</li>
<li>考虑与CI/CD流程集成，实现自动化检查</li>
</ul>
</li>
<li><p><strong>渐进式采用</strong></p>
<ul>
<li>先在非关键项目中试用，积累经验</li>
<li>逐步推广到更多项目和团队成员</li>
</ul>
</li>
</ol>
<h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><h3 id="功能增强"><a href="#功能增强" class="headerlink" title="功能增强"></a>功能增强</h3><ol>
<li><p><strong>多语言支持</strong></p>
<ul>
<li>支持中英文等多语言commit message生成</li>
<li>根据项目设置自动选择语言</li>
</ul>
</li>
<li><p><strong>本地模型集成</strong></p>
<ul>
<li>支持本地运行的AI模型，减少API依赖</li>
<li>提高数据安全性和响应速度</li>
</ul>
</li>
<li><p><strong>团队定制化</strong></p>
<ul>
<li>支持团队自定义commit message模板</li>
<li>学习团队历史commit风格，生成更符合团队习惯的内容</li>
</ul>
</li>
</ol>
<h3 id="工具集成"><a href="#工具集成" class="headerlink" title="工具集成"></a>工具集成</h3><ol>
<li><p><strong>IDE插件</strong></p>
<ul>
<li>开发VS Code、WebStorm等IDE插件</li>
<li>提供图形化界面，进一步简化操作</li>
</ul>
</li>
<li><p><strong>CI/CD集成</strong></p>
<ul>
<li>与GitHub Actions、Jenkins等CI/CD工具集成</li>
<li>自动检查commit message质量，提供改进建议</li>
</ul>
</li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>基于AI的Git Commit Message生成工具不仅是一个技术工具，更是开发流程优化的实践。通过智能化手段解决传统痛点，它帮助开发团队在不增加额外负担的情况下提高代码管理质量。随着AI技术的不断进步，我们期待这类工具能在软件开发流程中发挥更大的价值。</p>
<p>无论是个人开发者还是大型团队，都可以从这一工具中受益，提升代码管理效率和质量。希望本文的分享能为您的开发工作带来启发和帮助。</p>
<hr>
<blockquote>
<p>本文介绍的工具已开源，欢迎访问 <a href="https://github.com/houchaowei/git-commit-message-generator-ai" target="_blank" rel="noopener">GitHub仓库</a> 获取更多信息或贡献代码。如果这个工具对您有帮助，请给个⭐Star！ </p>
</blockquote>
]]></content>
      <categories>
        <category>技术分享</category>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>AI</tag>
        <tag>开发工具</tag>
        <tag>效率工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue城市多选组件</title>
    <url>/20190530-Vue%E5%9F%8E%E5%B8%82%E5%A4%9A%E9%80%89%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>效果DEMO：</p>
</blockquote>
<p><img data-src="IMG_2810.GIF" alt="Vue城市多选组件"><br><a id="more"></a></p>
<h2 id="组件需求"><a href="#组件需求" class="headerlink" title="组件需求"></a>组件需求</h2><p>项目工具需求：给多个城市配置信息，城市选择具体到市，将全国这一选项设置为level=0，省level=1，市level=2。展示只展示level=2的市。<br>项目UI库：ant-design-vue</p>
<h2 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a>组件实现</h2><h3 id="组件代码"><a href="#组件代码" class="headerlink" title="组件代码"></a>组件代码</h3><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="xml">// selectCitys.vue<br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"abk-select-city"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"showCitysHandler"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span><br>      @<span class="hljs-attr">input</span>=<span class="hljs-string">"inputChangeHandler"</span><br>      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"searchText"</span><br>      <span class="hljs-attr">class</span>=<span class="hljs-string">"abk-select-input"</span><br>      <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">"placeholderText"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!showCitys"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-input__icon el-icon-caret-bottom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">v-else</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"hideCitysHandler"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-input__icon el-icon-caret-top"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dropdown-box"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"showCitys"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"city-tree-box"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"showTrees"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-tree</span><br>          <span class="hljs-attr">:data</span>=<span class="hljs-string">"cityInfos"</span><br>          <span class="hljs-attr">ref</span>=<span class="hljs-string">"selectCityTree"</span><br>          <span class="hljs-attr">show-checkbox</span><br>          @<span class="hljs-attr">check-change</span>=<span class="hljs-string">"treeChangeHandler"</span><br>          <span class="hljs-attr">node-key</span>=<span class="hljs-string">"value"</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-tree</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"city-search-box"</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"!showTrees"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checkCitiesList"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"checkbox-item"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"city in searchResultsList"</span><br>            <span class="hljs-attr">:label</span>=<span class="hljs-string">"city.regionId"</span><br>            <span class="hljs-attr">:key</span>=<span class="hljs-string">"city.regionId"</span><br>            @<span class="hljs-attr">change</span>=<span class="hljs-string">"value =&gt; searchItemHandler(city, value)"</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"city.level === 2"</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;getCityNameByRegionId(city.upRegionId)&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;city.name&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox-group</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;ul&gt;<br>          &lt;li v-for="item in searchResultsList" @click="searchItemHandler(item)"&gt;</span></span><span class="hljs-template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="hljs-comment">&lt;/li&gt;<br>        &lt;/ul&gt; --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"less"</span> <span class="hljs-attr">scoped</span>&gt;</span><br>.abk-select-city&#123;<br>  position: relative;<br>  width:300px;<br>  .el-icon-caret-bottom,.el-icon-caret-top&#123;<br>    margin-top:-4px;<br>    color: #528ED5;<br>  &#125;<br><br>  .dropdown-box&#123;<br>    position: absolute;<br>    left: 0;<br>    right:0;<br>    top:40px;<br>    padding: 12px 0;<br>    background-color: #fff;<br>    border: 1px solid #e4e7ed;<br>    border-radius: 4px;<br>    z-index: 10;<br>    .checkbox-item&#123;<br>      display: block;<br>      padding: 0px 12px;<br>    &#125;<br>    .el-checkbox+.el-checkbox&#123;<br>      margin-left: 0;<br>    &#125;<br>  &#125;<br>  .city-tree-box&#123;<br>    max-height: 350px;<br>    overflow-y:auto;<br>  &#125;<br>  .city-search-box&#123;<br>    max-height: 250px;<br>    overflow-y:auto;<br>    li&#123;<br>      padding: 5px 12px;<br>    &#125;<br>    li:hover&#123;<br>      background: #f5f7fa;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"less"</span>&gt;</span><span class="css"><br>  <span class="hljs-comment">/* 取消框架下拉右侧箭头 */</span><br>  <span class="hljs-selector-class">.abk-select-city</span> <span class="hljs-selector-class">.el-input__suffix-inner</span>&#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>  &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-comment">/**<br> * &lt;select-city ref="selectCity" placeholder="请输入省市啊"&gt;&lt;/select-city&gt;<br> *<br> * 获取所有选中节点 this.$refs.selectCity.getCheckedList()<br> */</span><br><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash'</span><br><span class="hljs-keyword">import</span> &#123;cityLists&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"@/api/json_regions"</span>;<br><br><span class="hljs-keyword">let</span> cityMap = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">'placeholder'</span>, <span class="hljs-string">'checkcitylist'</span>],<br>  data()&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">infos</span>:[],<br>      <span class="hljs-attr">citys</span>: [],<br>      <span class="hljs-attr">showTrees</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">showCitys</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">searchText</span>: <span class="hljs-string">''</span>,<br>      <span class="hljs-attr">checkCitiesList</span>: [],<br>      <span class="hljs-attr">searchResultsList</span>: [],<br>      <span class="hljs-attr">placeholderText</span>: <span class="hljs-keyword">this</span>.placeholder || <span class="hljs-string">'请添加地区'</span>,<br>      <span class="hljs-attr">data1</span>:<span class="hljs-literal">null</span>,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">model</span>: &#123;<br>    <span class="hljs-attr">prop</span>: <span class="hljs-string">'checkcitylist'</span>,<br>    <span class="hljs-attr">event</span>: <span class="hljs-string">'change'</span><br>  &#125;,<br>  mounted()&#123;<br>    <span class="hljs-keyword">this</span>.treeChangeHandler()<br>  &#125;,<br>  <span class="hljs-attr">watch</span>:&#123;<br>    citys(n,o)&#123;<br>      <span class="hljs-keyword">this</span>.placeholderText=<span class="hljs-string">'请添加地区'</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    cityInfos()&#123;<br>      <span class="hljs-keyword">let</span> infos = []<br>      <span class="hljs-keyword">this</span>.citys = cityLists<br><br>      <span class="hljs-keyword">let</span> province = <span class="hljs-keyword">this</span>.citys.filter(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> &#123;<br>        cityMap[o.regionId] = o.label<br>        <span class="hljs-keyword">return</span> o.level === <span class="hljs-number">1</span><br>      &#125;);<br><br>      province.map(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> &#123;<br>        p.children = [];<br>        <span class="hljs-keyword">this</span>.citys.map(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (o.level === <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (o.value.substr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) === p.value.substr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)) &#123;<br>              p.children.push(o)<br>            &#125;<br>          &#125;<br>        &#125;)<br>      &#125;)<br><br>      infos = [<br>        &#123;<br>          <span class="hljs-attr">label</span>: <span class="hljs-string">'全国'</span>,<br>          <span class="hljs-attr">value</span>: <span class="hljs-string">'000000'</span>,<br>          <span class="hljs-attr">level</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">children</span>: province<br>        &#125;<br>      ]<br>      <span class="hljs-keyword">return</span> infos<br>    &#125;,<br>    checkedTreeNodes()&#123;<br>      <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">this</span>.$refs.selectCityTree.getCheckedNodes();<br>      <span class="hljs-keyword">return</span> list<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    setChecked () &#123;<br>      <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 设置默认选中</span><br>        <span class="hljs-keyword">this</span>.$refs.selectCityTree.setCheckedKeys(<span class="hljs-keyword">this</span>.checkcitylist);<br>        <span class="hljs-keyword">this</span>.treeChangeHandler();<br>      &#125;);<br>    &#125;,<br>    hideSelectCityHandler()&#123;<br>      <span class="hljs-keyword">this</span>.hideCitysHandler()<br>      <span class="hljs-keyword">this</span>.showTrees = <span class="hljs-literal">true</span><br>      <span class="hljs-keyword">this</span>.searchText = <span class="hljs-string">''</span><br>    &#125;,<br>    getCheckedList()&#123;<br>      <span class="hljs-comment">// console.log('this.checkedTreeNodes', this.checkedTreeNodes)</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.checkedTreeNodes;<br>    &#125;,<br>    getCityNameByRegionId(id)&#123;<br>      <span class="hljs-keyword">return</span> cityMap[id]<br>    &#125;,<br>    showCitysHandler()&#123;<br>      <span class="hljs-keyword">this</span>.showCitys = <span class="hljs-literal">true</span><br>      <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">this</span>.hideSelectCityHandler)<br>      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">this</span>.hideSelectCityHandler, <span class="hljs-literal">false</span>)<br>    &#125;,<br>    hideCitysHandler()&#123;<br>      <span class="hljs-keyword">this</span>.showCitys = <span class="hljs-literal">false</span><br>      <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'blur'</span>)<br>      <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">this</span>.hideSelectCityHandler)<br>    &#125;,<br>    inputChangeHandler()&#123;<br>      <span class="hljs-keyword">let</span> searchKey = <span class="hljs-keyword">this</span>.searchText.toUpperCase()<br>      <span class="hljs-keyword">let</span> citys = <span class="hljs-keyword">this</span>.citys;<br>      <span class="hljs-keyword">if</span>(searchKey == <span class="hljs-string">""</span>)&#123;<br>        <span class="hljs-keyword">this</span>.searchResultsList = []<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.searchResultsList = citys<br>        .filter( <span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">return</span> o.level === <span class="hljs-number">1</span> || o.level === <span class="hljs-number">2</span><br>        &#125;)<br>        .filter( <span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> &#123;<br>          o.shortSpell = o.shortSpell || <span class="hljs-string">''</span><br>          o.spell = o.spell || <span class="hljs-string">''</span><br>          o.fullName = o.fullName || <span class="hljs-string">''</span><br>          <span class="hljs-keyword">return</span> o.shortSpell.toUpperCase().indexOf(searchKey) === <span class="hljs-number">0</span><br>                  || o.spell.toUpperCase().indexOf(searchKey) === <span class="hljs-number">0</span><br>                  || o.fullName.indexOf(searchKey) === <span class="hljs-number">0</span><br>        &#125;)<br>      &#125;<br><br>      <span class="hljs-keyword">this</span>.showTrees = <span class="hljs-keyword">this</span>.searchResultsList.length === <span class="hljs-number">0</span><br>    &#125;,<br>    searchItemHandler(city, value)&#123;<br>      <span class="hljs-keyword">this</span>.$refs.selectCityTree.setChecked(city.regionId, value, <span class="hljs-literal">true</span>);<br>    &#125;,<br>    treeChangeHandler()&#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.checkcitylist) &#123;<br>        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'change'</span>, <span class="hljs-keyword">this</span>.getCheckedList())<br>      &#125;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.getCheckedList()[<span class="hljs-number">0</span>] &amp;&amp; <span class="hljs-keyword">this</span>.getCheckedList()[<span class="hljs-number">0</span>].value === <span class="hljs-string">'000000'</span>)&#123;<br>        <span class="hljs-keyword">this</span>.placeholderText = <span class="hljs-string">'全国地区'</span><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">this</span>.placeholderText = <span class="hljs-keyword">this</span>.getCheckedList().filter(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> o.level === <span class="hljs-number">2</span> || o.level === <span class="hljs-number">0</span>).map(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> o.label).join(<span class="hljs-string">','</span>) || <span class="hljs-keyword">this</span>.placeholder || <span class="hljs-string">'请添加地区'</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// main.js</span><br><br><span class="hljs-keyword">import</span> Antd <span class="hljs-keyword">from</span> <span class="hljs-string">'ant-design-vue'</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">'ant-design-vue/dist/antd.css'</span><br>Vue.use(Antd)<br></code></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">/**<br>* 说明：setCheckedKeys接收的市城市code的数组：["1", "2"]<br>*/</span><br><br><span class="hljs-comment">// 引入</span><br><br><span class="hljs-keyword">import</span> SelectCity from <span class="hljs-string">'@/***/SelectCity'</span>;<br><br><span class="hljs-comment">// 组件名</span><br>components: &#123;<br>    SelectCity<br>&#125;,<br><br><span class="hljs-comment">// html导入</span><br>&lt;<span class="hljs-keyword">select</span><span class="hljs-params">-city</span> ref=<span class="hljs-string">"cityChild"</span> placeholder=<span class="hljs-string">"请选择省市"</span> @change=<span class="hljs-string">"getCityArr"</span> v<span class="hljs-params">-model</span>=<span class="hljs-string">"selectedCityLists"</span>&gt;&lt;/<span class="hljs-keyword">select</span><span class="hljs-params">-city</span>&gt;<br><br><span class="hljs-comment">// method</span><br>getCityArr(<span class="hljs-built_in">data</span>) &#123;<br>    console.<span class="hljs-keyword">log</span>(<span class="hljs-string">'data'</span>, <span class="hljs-built_in">data</span>)<br>    this.selectedCityLists = <span class="hljs-built_in">data</span><br>&#125;,<br></code></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 城市JSON</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> cityLists = [<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"110000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"北京"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"110100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"北京"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"京"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"120000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"天津"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"120100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"天津"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"津"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"河北省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"石家庄"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"唐山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"秦皇岛"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"邯郸"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"邢台"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"保定"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"张家口"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"承德"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"130900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"沧州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"131000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"廊坊"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"131100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"衡水"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"冀T"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"山西省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"太原"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"大同"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阳泉"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"长治"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"晋城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"朔州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"晋中"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"运城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"140900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"忻州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"141000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"临汾"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"141100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"吕梁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"晋J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"内蒙古"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"呼和浩特"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"包头"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"乌海"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"赤峰"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"通辽"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鄂尔多斯"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"呼伦贝尔"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"巴彦淖尔"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"150900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"乌兰察布"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"152200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"兴安盟"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"152500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"锡林郭勒盟"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"152900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阿拉善盟"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"蒙M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"辽宁省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"沈阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"大连"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鞍山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"抚顺"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"本溪"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"丹东"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"锦州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"营口"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"210900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阜新"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"211000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"辽阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"211100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"盘锦"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"211200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"铁岭"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"211300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"朝阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"211400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"葫芦岛"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"辽P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"吉林省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"长春"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"吉林"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"四平"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"辽源"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"通化"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"白山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"松原"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"220800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"白城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"222400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"延边"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"吉H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黑龙江省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"哈尔滨"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"齐齐哈尔"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鸡西"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鹤岗"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"双鸭山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"大庆"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"伊春"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"佳木斯"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"230900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"七台河"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"231000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"牡丹江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"231100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黑河"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"231200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"绥化"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"232700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"大兴安岭"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"黑P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"310000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"上海"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"310100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"上海"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"沪"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"江苏省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南京"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"无锡"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"徐州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"常州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"苏州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南通"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"连云港"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"淮安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"320900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"盐城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"321000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"扬州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"321100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"镇江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"321200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"泰州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"321300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宿迁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"苏N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"浙江省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"杭州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宁波"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"温州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"嘉兴"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"湖州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"绍兴"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"金华"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"衢州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"330900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"舟山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"331000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"台州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"331100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"丽水"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"浙K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"安徽省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"合肥"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"芜湖"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"蚌埠"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"淮南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"马鞍山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"淮北"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"铜陵"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"340800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"安庆"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黄山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"滁州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阜阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宿州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"六安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"亳州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"池州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"341800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宣城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"皖P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"福建省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"福州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"厦门"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"莆田"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"三明"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"泉州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"漳州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南平"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"龙岩"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"350900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宁德"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"闽J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"江西省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南昌"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"景德镇"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"萍乡"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"九江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"新余"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鹰潭"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"赣州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"吉安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"360900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宜春"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"361000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"抚州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"361100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"上饶"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"赣E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"山东省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"济南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"青岛"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"淄博"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"枣庄"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"东营"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"烟台"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"潍坊"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"济宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"370900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"泰安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"威海"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"日照"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"莱芜"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"临沂"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"德州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"聊城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"滨州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"371700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"菏泽"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鲁R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"河南省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"郑州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"开封"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"洛阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"平顶山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"安阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鹤壁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"新乡"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"焦作"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"410900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"濮阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"许昌"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"漯河"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"三门峡"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"商丘"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"信阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"周口"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"411700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"驻马店"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"419001"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"济源"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"豫U"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"湖北省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"武汉"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黄石"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"十堰"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宜昌"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"襄樊"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"鄂州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"荆门"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"420900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"孝感"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"421000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"荆州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"421100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黄冈"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"421200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"咸宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"421300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"随州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"422800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"恩施"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"429004"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"仙桃"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"429005"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"潜江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"429006"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"天门"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"429021"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"神农"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"鄂P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"湖南省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"长沙"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"株洲"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"湘潭"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"衡阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"邵阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"岳阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"常德"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"张家界"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"430900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"益阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"431000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"郴州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"431100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"永州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"431200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"怀化"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"431300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"娄底"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"433100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"湘西"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"湘U"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"广东省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"广州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"韶关"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"深圳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"珠海"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"汕头"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"佛山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"江门"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"湛江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"440900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"茂名"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"肇庆"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"惠州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"梅州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"汕尾"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"河源"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阳江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"清远"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"441900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"东莞"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"442000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"中山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤T"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"445100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"潮州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤U"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"445200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"揭阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤V"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"445300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"云浮"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"粤W"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"广西省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"柳州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"桂林"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"梧州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"北海"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"防城港"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"钦州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"贵港"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"450900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"玉林"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"451000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"百色"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"451100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"贺州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"451200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"河池"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"451300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"来宾"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"451400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"崇左"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"桂F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"460000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"海南省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"460100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"海口"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"460200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"三亚"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"460300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"三沙"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"469001"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"五指山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"469002"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"琼海"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"469003"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"儋州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"469005"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"文昌"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"469006"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"万宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"469007"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"东方"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"琼D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"500000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"重庆"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"500100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"重庆"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"渝"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"四川省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"成都"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"自贡"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"攀枝花"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"泸州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"德阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"绵阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"广元"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"510900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"遂宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"内江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"乐山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"南充"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"眉山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川Z"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宜宾"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"广安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川X"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"达州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"雅安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川T"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"511900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"巴中"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川Y"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"512000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"资阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"513200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阿坝"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川U"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"513300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"甘孜"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川V"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"513400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"凉山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"川W"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"贵州省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"贵阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"六盘水"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"遵义"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"安顺"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"毕节"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"520600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"铜仁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"522300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黔西"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"522600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黔东"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"522700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黔南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"贵J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"云南省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"昆明"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"曲靖"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"玉溪"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"保山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"昭通"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"丽江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"普洱"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"530900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"临沧"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云S"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"532300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"楚雄"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"532500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"红河"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"532600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"文山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"532800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"西双版纳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"532900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"大理"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"533100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"德宏"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"533300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"怒江"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"533400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"迪庆"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"云R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"540000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"西藏"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"540100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"拉萨"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"540200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"日喀则"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"542100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"昌都"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"542200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"山南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"542400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"那曲"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"542500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阿里"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"542600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"林芝"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"藏G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"陕西省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"西安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"铜川"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宝鸡"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"咸阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"渭南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"延安"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"汉中"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"榆林"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"610900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"安康"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"611000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"商洛"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"陕H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"甘肃省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"兰州"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"嘉峪关"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"金昌"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"白银"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"天水"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"武威"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"张掖"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"平凉"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"620900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"酒泉"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"621000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"庆阳"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"621100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"定西"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"621200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"陇南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"622900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"临夏"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"623000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"甘南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"甘P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"630000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"青海省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"630100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"西宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"630200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"海东"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"632200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"海北"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"632300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"黄南"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"632500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"海南（青海省）"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"632600"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"果洛"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"632700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"玉树"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"632800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"海西蒙"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"青H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"640000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"宁夏省"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"640100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"银川"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"宁A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"640200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"石嘴山"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"宁B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"640300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"吴忠"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"宁C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"640400"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"固原"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"宁D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"640500"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"中卫"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"宁E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"650000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"新疆"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"650100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"乌鲁木齐"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新A"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"650200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"克拉玛依"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新J"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"652100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"吐鲁番"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新K"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"652200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"哈密"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新L"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"652300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"昌吉"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"652700"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"博尔塔拉"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新E"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"652800"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"巴音郭楞"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新M"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"652900"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阿克苏"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"653000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"克孜勒苏"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新P"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"653100"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"喀什"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"653200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"和田"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新R"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"654000"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"伊犁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"654002"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"伊宁"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新F"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"654003"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"奎屯"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新D"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"654200"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"塔城"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新G"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"654300"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阿勒泰"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新H"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"659001"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"石河子"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新C"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"659002"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"阿拉尔"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新N"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"659003"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"图木舒克"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新Q"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">"value"</span>: <span class="hljs-string">"659004"</span>,<br>    <span class="hljs-string">"label"</span>: <span class="hljs-string">"五家渠"</span>,<br>    <span class="hljs-string">"pre"</span>: <span class="hljs-string">"新B"</span>,<br>    <span class="hljs-string">"level"</span>: <span class="hljs-number">2</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>可能这些是你想要的H5软键盘兼容方案</title>
    <url>/20190604-%E5%8F%AF%E8%83%BD%E8%BF%99%E4%BA%9B%E6%98%AF%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84H5%E8%BD%AF%E9%94%AE%E7%9B%98%E5%85%BC%E5%AE%B9%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><img data-src="WechatIMG514.jpeg" alt="可能这些是你想要的H5软键盘兼容方案"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近一段时间在做 H5 聊天项目，踩过其中一大坑：输入框获取焦点，软键盘弹起，要求输入框吸附（或顶）在输入法框上。需求很明确，看似很简单，其实不然。从实验过一些机型上看，发现主要存在以下问题：</p>
<ul>
<li>在 Android 和 IOS 上，获知软键盘弹起和收起状态存在差异，且页面 webview 表现不同。<a id="more"></a></li>
<li>在IOS12 上，微信版本 v6.7.4 及以上，输入框获取焦点，键盘弹起，页面（webview）整体往上滚动，当键盘收起后，不回到原位，导致键盘原来所在位置是空白的。</li>
<li>在 IOS 上，使用第三方输入法，高度计算存在偏差，导致在有些输入法弹起，将输入框挡住一部分。<br>在有些浏览器上使用一些操作技巧，还是存在输入框被输入法遮挡。<br>下面就上述发现的问题，逐个探索一下解决方案。</li>
</ul>
<h1 id="获知软键盘弹起和收起状态"><a href="#获知软键盘弹起和收起状态" class="headerlink" title="获知软键盘弹起和收起状态"></a>获知软键盘弹起和收起状态</h1><p>获知软键盘的弹起还是收起状态很重要，后面的兼容处理都要以此为前提。然而，H5 并没有直接监听软键盘的原生事件，只能通过软键盘弹起或收起，引发页面其他方面的表现间接监听，曲线救国。并且，在 IOS 和 Android 上的表现不尽相同。</p>
<!--more-->
<h2 id="IOS-软键盘弹起表现"><a href="#IOS-软键盘弹起表现" class="headerlink" title="IOS 软键盘弹起表现"></a>IOS 软键盘弹起表现</h2><p>在 IOS 上，输入框（input、textarea 或 富文本）获取焦点，键盘弹起，页面（webview）并没有被压缩，或者说高度（height）没有改变，只是页面（webview）整体往上滚了，且最大滚动高度（scrollTop）为软键盘高度。</p>
<h2 id="Android-软键盘弹起表现"><a href="#Android-软键盘弹起表现" class="headerlink" title="Android 软键盘弹起表现"></a>Android 软键盘弹起表现</h2><p>同样，在 Android 上，输入框获取焦点，键盘弹起，但是页面（webview）高度会发生改变，一般来说，高度为可视区高度（原高度减去软键盘高度），除了因为页面内容被撑开可以产生滚动，webview 本身不能滚动。</p>
<h2 id="IOS-软键盘收起表现"><a href="#IOS-软键盘收起表现" class="headerlink" title="IOS 软键盘收起表现"></a>IOS 软键盘收起表现</h2><p>触发软键盘上的“收起”按钮键盘或者输入框以外的页面区域时，输入框失去焦点，软键盘收起。</p>
<h2 id="Android-软键盘收起表现"><a href="#Android-软键盘收起表现" class="headerlink" title="Android 软键盘收起表现"></a>Android 软键盘收起表现</h2><p>触发输入框以外的区域时，输入框失去焦点，软键盘收起。但是，触发键盘上的收起按钮键盘时，输入框并不会失去焦点，同样软键盘收起。</p>
<p><img data-src="d30e05733706e83f517e548359f1aacc.jpg" alt="比对"></p>
<h2 id="监听软键盘弹起和收起"><a href="#监听软键盘弹起和收起" class="headerlink" title="监听软键盘弹起和收起"></a>监听软键盘弹起和收起</h2><p>综合上面键盘弹起和收起在 IOS 和 Android 上的不同表现，我们可以分开进行如下处理来监听软键盘的弹起和收起：</p>
<ul>
<li>在 IOS 上，监听输入框的 focus 事件来获知软键盘弹起，监听输入框的 blur 事件获知软键盘收起。</li>
<li>在 Android 上，监听 webview 高度会变化，高度变小获知软键盘弹起，否则软键盘收起。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 判断设备类型</span><br><span class="hljs-keyword">var</span> judgeDeviceType = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> ua = <span class="hljs-built_in">window</span>.navigator.userAgent.toLocaleLowerCase();<br>  <span class="hljs-keyword">var</span> isIOS = <span class="hljs-regexp">/iphone|ipad|ipod/</span>.test(ua);<br>  <span class="hljs-keyword">var</span> isAndroid = <span class="hljs-regexp">/android/</span>.test(ua);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isIOS</span>: isIOS,<br>    <span class="hljs-attr">isAndroid</span>: isAndroid<br>  &#125;<br>&#125;()<br><br><span class="hljs-comment">// 监听输入框的软键盘弹起和收起事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listenKeybord</span>(<span class="hljs-params">$input</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (judgeDeviceType.isIOS) &#123;<br>    <span class="hljs-comment">// IOS 键盘弹起：IOS 和 Android 输入框获取焦点键盘弹起</span><br>    $input.addEventListener(<span class="hljs-string">'focus'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'IOS 键盘弹起啦！'</span>);<br>      <span class="hljs-comment">// IOS 键盘弹起后操作</span><br>    &#125;, <span class="hljs-literal">false</span>)<br><br>    <span class="hljs-comment">// IOS 键盘收起：IOS 点击输入框以外区域或点击收起按钮，输入框都会失去焦点，键盘会收起，</span><br>    $input.addEventListener(<span class="hljs-string">'blur'</span>, () =&gt; &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'IOS 键盘收起啦！'</span>);<br>      <span class="hljs-comment">// IOS 键盘收起后操作</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-comment">// Andriod 键盘收起：Andriod 键盘弹起或收起页面高度会发生变化，以此为依据获知键盘收起</span><br>  <span class="hljs-keyword">if</span> (judgeDeviceType.isAndroid) &#123;<br>    <span class="hljs-keyword">var</span> originHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;<br><br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> resizeHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;<br>      <span class="hljs-keyword">if</span> (originHeight &lt; resizeHeight) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Android 键盘收起啦！'</span>);<br>        <span class="hljs-comment">// Android 键盘收起后操作</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Android 键盘弹起啦！'</span>);<br>        <span class="hljs-comment">// Android 键盘弹起后操作</span><br>      &#125;<br><br>      originHeight = resizeHeight;<br>    &#125;, <span class="hljs-literal">false</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> $inputs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.input'</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; $inputs.length; i++) &#123;<br>  listenKeybord($inputs[i]);<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="弹起软键盘始终让输入框滚动到可视区"><a href="#弹起软键盘始终让输入框滚动到可视区" class="headerlink" title="弹起软键盘始终让输入框滚动到可视区"></a>弹起软键盘始终让输入框滚动到可视区</h2><p>有时我们会做一个输入表单，有很多输入项，输入框获取焦点，弹起软键盘。当输入框位于页面下部位置时，在 IOS 上，会将 webview 整体往上滚一段距离，使得该获取焦点的输入框自动处于可视区，而在 Android 则不会这样，它只会改变页面高度，而不会去滚动到当前焦点元素到可视区。</p>
<p>由于上面已经实现监听 IOS 和 Android 键盘弹起和收起，在这里，只需在 Android 键盘弹起后，将焦点元素滚动（scrollIntoView()）到可视区。查看效果，可以戳这里1。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// 获取到焦点元素滚动到可视区</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">activeElementScrollIntoView</span>(<span class="hljs-params">activeElement, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> editable = activeElement.getAttribute(<span class="hljs-string">'contenteditable'</span>)<br><br>  <span class="hljs-comment">// 输入框、textarea或富文本获取焦点后没有将该元素滚动到可视区</span><br>  <span class="hljs-keyword">if</span> (activeElement.tagName == <span class="hljs-string">'INPUT'</span> || activeElement.tagName == <span class="hljs-string">'TEXTAREA'</span> || editable === <span class="hljs-string">''</span> || editable) &#123;<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      activeElement.scrollIntoView();<br>    &#125;, delay)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// Android 键盘弹起后操作</span><br>activeElementScrollIntoView(<span class="hljs-symbol">$i</span>nput, <span class="hljs-number">1000</span>);<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure>
<h2 id="唤起纯数字软键盘"><a href="#唤起纯数字软键盘" class="headerlink" title="唤起纯数字软键盘"></a>唤起纯数字软键盘</h2><p>上面的表单输入框有要求输入电话号码，类似这样就要弹出一个数字软键盘了，既然说到了软键盘兼容，在这里就安插一下。比较好的解决方案如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs undefined">&lt;p&gt;请输入手机号&lt;/p&gt;<br>&lt;input <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"tel"</span> novalidate=<span class="hljs-string">"novalidate"</span> pattern=<span class="hljs-string">"[0-9]*"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"input"</span>&gt;<br></code></pre></td></tr></table></figure>
<ul>
<li>type=”tel”， 是 HTML5 的一个属性，表示输入框类型为电话号码，在 Android 和 IOS 上表现差不多，都会有数字键盘，但是也会有字母，略显多余。</li>
<li>pattern=”[0-9]”， pattern 用于验证表单输入的内容，通常 HTML5 的 type 属性，比如 email、tel、number、data 类、url 等，已经自带了简单的数据格式验证功能了，加上 pattern 后，前端部分的验证更加简单高效了。IOS 中，只有 [0-9]* 才可以调起九宫格数字键盘，\d 无效，Android 4.4 以下（包括X5内核），两者都调起数字键盘。</li>
<li>novalidate=”novalidate”，novalidate 属性规定当提交表单时不对其进行验证，由于 pattern 校验兼容性2不好，可以不让其校验，只让其唤起纯数字键盘，校验工作由 js 去做。</li>
</ul>
<p><img data-src="33344451f87c819f4ac0efd733305a84.jpg" alt></p>
<h1 id="兼容-IOS12-V6-7-4"><a href="#兼容-IOS12-V6-7-4" class="headerlink" title="兼容 IOS12 + V6.7.4+"></a>兼容 IOS12 + V6.7.4+</h1><p>如果你在用 IOS12 和 V6.7.4+版本的微信浏览器打开上面表单输入的 demo ，就会惊奇的发现键盘收起后，原本被滚动顶起的页面并没有回到底部位置，导致原来键盘弹起的位置“空”了。</p>
<p><img data-src="94319fa53b049eb67cf2d9771aefe683.jpg" alt></p>
<p>其实这是 Apple 在 IOS 的 bug，会出现在所有的 Xcode10 打包的 IOS12 的设备上。微信官方已给出解决方案3，只需在软键盘收起后，将页面（webview）滚回到窗口最底部位置（clientHeight位置）。修复后的上面表单输入 demo 可以戳这里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'IOS 键盘收起啦！'</span>);<br><span class="hljs-comment">// IOS 键盘收起后操作</span><br><span class="hljs-comment">// 微信浏览器版本6.7.4+IOS12会出现键盘收起后，视图被顶上去了没有下来</span><br><span class="hljs-keyword">var</span> wechatInfo = <span class="hljs-built_in">window</span>.navigator.userAgent.match(<span class="hljs-regexp">/MicroMessenger\/([\d\.]+)/i</span>);<br><span class="hljs-keyword">if</span> (!wechatInfo) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">var</span> wechatVersion = wechatInfo[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> version = (navigator.appVersion).match(<span class="hljs-regexp">/OS (\d+)_(\d+)_?(\d+)?/</span>);<br><br><span class="hljs-keyword">if</span> (+wechatVersion.replace(<span class="hljs-regexp">/\./g</span>, <span class="hljs-string">''</span>) &gt;= <span class="hljs-number">674</span> &amp;&amp; +version[<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">12</span>) &#123;<br>  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.scrollTo(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.max(<span class="hljs-built_in">document</span>.body.clientHeight, <span class="hljs-built_in">document</span>.documentElement.clientHeight));<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="兼容第三方输入法"><a href="#兼容第三方输入法" class="headerlink" title="兼容第三方输入法"></a>兼容第三方输入法</h1><p>上面说了那么多，其实已经把 H5 聊天输入框的坑填了一大半了，接下来就先看下聊天输入框的基本HTML结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"chat__content"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>一些聊天内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 省略几千行聊天内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input__content"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input"</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">/* 省略一些样式 */</span><br><span class="hljs-selector-class">.chat__content</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">40px</span>);<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">overflow-y</span>: auto;<br>  <span class="hljs-attribute">overflow-x</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.input__content</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-comment">/* 省略一些样式 */</span><br></code></pre></td></tr></table></figure>
<p>很简单，就是划分内容区和输入区，输入区是绝对定位，按照上面表单输入 demo 的做法，确实大部分 Android 浏览器是没问题的，但是测试在 IOS 上，UC 浏览器配合原生输入法和第三方输入法（比如搜狗输入法），输入框都会被完全挡住；QQ 浏览器或微信浏览器，配合第三方输入法，输入框会被遮住一半；百度浏览器配合第三方输入法输入框也会被完全遮住。查看效果可以用相应浏览器中访问这里5。</p>
<p><img data-src="9478d53ccd8e82a44c022b4eecd7c8c4.jpg" alt></p>
<p>在 UC 浏览器上，软键盘弹起后，浏览器上面的标题栏高度就有个高度变小延时动态效果，这样导致 webview 往下滚了一点，底部输入框滚到了非可视区。<br>而对于第三方输入法，猜测本身是由于输入法面板弹起后高度计算有误，导致 webview 初始滚动定位有误。其实这两点都是 webview 滚动不到位造成的。可以让软键盘弹起后，让焦点元素再次滚到可视区，强迫 webview 滚到位。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs undefined">console.<span class="hljs-built-in">log</span>(<span class="hljs-string">'Android 键盘弹起啦！'</span>);<br><span class="hljs-comment">// Android 键盘弹起后操作</span><br>activeElementScrollIntoView(<span class="hljs-symbol">$</span>input, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure>
<h1 id="兼容-Android-小米浏览器的-Hack-方案"><a href="#兼容-Android-小米浏览器的-Hack-方案" class="headerlink" title="兼容 Android 小米浏览器的 Hack 方案"></a>兼容 Android 小米浏览器的 Hack 方案</h1><p>在 Android 的小米浏览器上，应用上面的方案，发现聊天输入框还是被遮挡得严严实实，scrollIntoView() 仍然纹丝不动。所以猜测，其实是滚到底了，软键盘弹起，页面实现高度大于可视区高度，这样只能在软键盘弹起后，强行增加页面高度，使输入框可以显示出来。综合上面兼容第三方输入法，查看效果可以戳这里6</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// Andriod 键盘收起：Andriod 键盘弹起或收起页面高度会发生变化，以此为依据获知键盘收起</span><br><span class="hljs-keyword">if</span> (judgeDeviceType.isAndroid) &#123;<br>  <span class="hljs-keyword">var</span> originHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;<br><br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> resizeHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;<br>    <span class="hljs-keyword">if</span> (originHeight &lt; resizeHeight) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Android 键盘收起啦！'</span>);<br>      <span class="hljs-comment">// Android 键盘收起后操作</span><br>      <span class="hljs-comment">// 修复小米浏览器下，输入框依旧被输入法遮挡问题</span><br>      <span class="hljs-keyword">if</span> (judgeDeviceType.isMiuiBrowser) &#123;<br>        <span class="hljs-built_in">document</span>.body.style.marginBottom = <span class="hljs-string">'0px'</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Android 键盘弹起啦！'</span>);<br>      <span class="hljs-comment">// Android 键盘弹起后操作</span><br>      <span class="hljs-comment">// 修复小米浏览器下，输入框依旧被输入法遮挡问题</span><br>      <span class="hljs-keyword">if</span> (judgeDeviceType.isMiuiBrowser) &#123;<br>        <span class="hljs-built_in">document</span>.body.style.marginBottom = <span class="hljs-string">'40px'</span>;<br>      &#125;<br>      activeElementScrollIntoView($input, <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    originHeight = resizeHeight;<br>  &#125;, <span class="hljs-literal">false</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>H5 端前路漫漫，坑很多，需要不断尝试。了解软键盘弹起页面在 IOS 和 Android 上的表现差异是前提，其次是将焦点元素滚动到可视区，同时要考虑到第三方输入法和某些浏览器上的差别。总结肯定不全面，欢迎大家指正哈，完~</p>
<blockquote>
<p>文中链接<br><a href="https://wuwhs.github.io/demo/keyboard-compatible/input.html" target="_blank" rel="noopener">https://wuwhs.github.io/demo/keyboard-compatible/input.html</a><br><a href="https://www.caniuse.com/#search=pattern" target="_blank" rel="noopener">https://www.caniuse.com/#search=pattern</a><br><a href="https://developers.weixin.qq.com/community/develop/doc/00044ae90742f8c82fb78fcae56800" target="_blank" rel="noopener">https://developers.weixin.qq.com/community/develop/doc/00044ae90742f8c82fb78fcae56800</a><br><a href="https://wuwhs.github.io/demo/keyboard-compatible/input-fix-ios12-wx6.7.4.html" target="_blank" rel="noopener">https://wuwhs.github.io/demo/keyboard-compatible/input-fix-ios12-wx6.7.4.html</a><br><a href="https://wuwhs.github.io/demo/keyboard-compatible/chat.html" target="_blank" rel="noopener">https://wuwhs.github.io/demo/keyboard-compatible/chat.html</a><br><a href="https://wuwhs.github.io/demo/keyboard-compatible/chat-fix-third-keyboard.html" target="_blank" rel="noopener">https://wuwhs.github.io/demo/keyboard-compatible/chat-fix-third-keyboard.html</a></p>
</blockquote>
<blockquote>
<p>编者按：本文转载自wuwhs的segmentfault专栏 <a href="https://mp.weixin.qq.com/s/EkB5yNJMmSpCj6h87-VZmw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/EkB5yNJMmSpCj6h87-VZmw</a></p>
</blockquote>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>基于React项目下的组件单元测试</title>
    <url>/20200424-%E5%9F%BA%E4%BA%8EReact%E9%A1%B9%E7%9B%AE%E4%B8%8B%E7%9A%84%E7%BB%84%E4%BB%B6%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="什么是单元测试？"><a href="#什么是单元测试？" class="headerlink" title="什么是单元测试？"></a>什么是单元测试？</h2><blockquote>
<p>一般测试分成几个类型：单元测试、集成测试、功能测试。集成测试和功能测试不赘述。单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，这里的单元是程序工作的最小工作单位。单元测试应该仅仅依赖输入，不依赖多余的环境，如果你的单元测试依赖很多环境，那么你可能需要的是集成测试。</p>
</blockquote>
<blockquote>
<p>单元测试又可以根据开发模式分成以下两类：<br>TDD, TDD指的是Test Drive Development，很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。<br>BDD指的是Behavior Drive Development，也就是行为驱动开发。行为驱动开发是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。主要是从用户的需求出发，强调系统行为。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。<br>目前我接触到的项目都是BDD，国内的前端项目对单元测试重视程度没有那么高，TDD这种先编写单元测试的模式应用并不多。</p>
</blockquote>
<blockquote>
<p>但是但是，我真的想说，高覆盖率的单元测试，可以保证每次上线bug率大大降低，也是代码重构的基础。很多老项目，开发人员离职、新接手的人员不敢重构，慢慢称为团队负担、又不能下线，就是因为没有单元测试，改一点都怕出现不可测的bug。<a id="more"></a></p>
</blockquote>
<h2 id="单元测试框架选择"><a href="#单元测试框架选择" class="headerlink" title="单元测试框架选择"></a>单元测试框架选择</h2><h3 id="1-测试用例在node环境下运行，不依赖于浏览器，建议选用Jest-Enzyme"><a href="#1-测试用例在node环境下运行，不依赖于浏览器，建议选用Jest-Enzyme" class="headerlink" title="1.测试用例在node环境下运行，不依赖于浏览器，建议选用Jest + Enzyme"></a>1.测试用例在<code>node环境</code>下运行，不依赖于浏览器，建议选用<code>Jest + Enzyme</code></h3><p>Jest 是 Facebook 发布的一个开源的、基于 Jasmine 框架的 JavaScript 单元测试工具。提供了包括内置的测试环境 DOM API 支持、断言库、Mock 库等，还包含了 Spapshot Testing、 Instant Feedback 等特性。</p>
<p>Enzyme是Airbnb开源的 React 测试类库，提供了一套简洁强大的 API，并通过 jQuery 风格的方式进行DOM 处理，开发体验十分友好。不仅在开源社区有超高人气，同时也获得了React 官方的推荐。</p>
<h3 id="2-测试用例依赖于浏览器环境，建议选用Karma-Jasmine-Enzyme"><a href="#2-测试用例依赖于浏览器环境，建议选用Karma-Jasmine-Enzyme" class="headerlink" title="2.测试用例依赖于浏览器环境，建议选用Karma + Jasmine + Enzyme"></a>2.测试用例依赖于浏览器环境，建议选用<code>Karma + Jasmine + Enzyme</code></h3><p>Karma 是一个用来搜索测试文件、编译它们然后运行断言的测试器，Angular团队作品。</p>
<p>Jasmine 是一个断言库，它仅仅问“我们得到我们期待的东西了么？”。它提供类似describe，expect 和 it的函数，也提供监听一个函数或方法有没有被触发的监听器。</p>
<blockquote>
<p>我这里选用的是node环境下的<code>Jset + Enzyme</code>进行的前端组件测试用例的开发和使用</p>
</blockquote>
<h2 id="环境数据"><a href="#环境数据" class="headerlink" title="环境数据"></a>环境数据</h2><ul>
<li>nodejs v8.16.0</li>
<li>npm 6.4.1</li>
<li>依赖版本 <figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">"@babel/core"</span>: <span class="hljs-string">"^7.9.0"</span>,<br><span class="hljs-string">"@babel/plugin-transform-runtime"</span>: <span class="hljs-string">"^7.9.0"</span>,<br><span class="hljs-string">"@babel/preset-env"</span>: <span class="hljs-string">"^7.9.0"</span>,<br><span class="hljs-string">"@babel/preset-react"</span>: <span class="hljs-string">"^7.9.4"</span>,<br><span class="hljs-string">"babel-loader"</span>: <span class="hljs-string">"^8.0.5"</span>,<br><span class="hljs-string">"jest"</span>: <span class="hljs-string">"^25.1.0"</span>,<br><span class="hljs-string">"enzyme"</span>: <span class="hljs-string">"^3.11.0"</span>,<br><span class="hljs-string">"enzyme-adapter-react-16"</span>: <span class="hljs-string">"^1.15.2"</span>,<br><span class="hljs-string">"chai"</span>: <span class="hljs-string">"^4.2.0"</span>,<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="执行及结果"><a href="#执行及结果" class="headerlink" title="执行及结果"></a>执行及结果</h2><h3 id="Demo-test-jsx示例代码"><a href="#Demo-test-jsx示例代码" class="headerlink" title="Demo.test.jsx示例代码"></a><code>Demo.test.jsx</code>示例代码</h3><p><img data-src="1.png" alt="在这里插入图片描述"></p>
<h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img data-src="2.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-MR6HrOSa-1585295902034)(quiver-image-url/8F7701A9849A10F4230A4809F945FF83.jpg =686x191)\]"></p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="1-Plugin-Preset-files-are-not-allowed-to-export-objects-only-functions"><a href="#1-Plugin-Preset-files-are-not-allowed-to-export-objects-only-functions" class="headerlink" title="1. Plugin/Preset files are not allowed to export objects,only functions."></a>1. <code>Plugin/Preset files are not allowed to export objects,only functions.</code></h3><ul>
<li>原因：babel版本冲突不兼容的问题</li>
<li><p>解决方案：</p>
<ul>
<li><p>升级babel到babel7.0</p>
<ul>
<li><p>将所有有关babel的包都升级为7.0版本</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">"@babel/core"</span>: <span class="hljs-string">"^7.2.2"</span>,<br><span class="hljs-string">"@babel/preset-env"</span>: <span class="hljs-string">"^7.3.1"</span>,<br><span class="hljs-string">"@babel/preset-react"</span>: <span class="hljs-string">"^7.0.0"</span>,<br><span class="hljs-string">"babel-loader"</span>: <span class="hljs-string">"^8.0.5"</span>,<br></code></pre></td></tr></table></figure>
</li>
<li><p>并且修改.babel文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs undefined">&#123; <span class="hljs-attr">"presets"</span>:[<span class="hljs-string">"@babel/react"</span>,<span class="hljs-string">"@babel/env"</span>,]&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>降级到babel6.0版本</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">"babel-core"</span>: <span class="hljs-string">"^6.26.3"</span>,<br><span class="hljs-string">"babel-preset-env"</span>: <span class="hljs-string">"^1.7.0"</span>,<br><span class="hljs-string">"babel-preset-react"</span>: <span class="hljs-string">"^6.24.1"</span>,<br><span class="hljs-string">"babel-loader"</span>: <span class="hljs-string">"^7.1.5"</span>,<br></code></pre></td></tr></table></figure>
<ul>
<li>对应修改.babelrc文件<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs undefined">&#123; <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"react"</span>, <span class="hljs-string">"env"</span>]&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>这里我选择的是升级babel到babel7.0</p>
</blockquote>
<h4 id="我当前的项目中在结合babel升级过程中遇到的问题进行了总结，解决的具体问题以及方案，在Error-Requires-Babel-“-7-0-0-0”-but-was-loaded-with-“6-26-3”-If-you-are-sure-you-have-a-compatible-version-of-babel-core-11337，-整理如下："><a href="#我当前的项目中在结合babel升级过程中遇到的问题进行了总结，解决的具体问题以及方案，在Error-Requires-Babel-“-7-0-0-0”-but-was-loaded-with-“6-26-3”-If-you-are-sure-you-have-a-compatible-version-of-babel-core-11337，-整理如下：" class="headerlink" title="我当前的项目中在结合babel升级过程中遇到的问题进行了总结，解决的具体问题以及方案，在Error: Requires Babel “^7.0.0-0”, but was loaded with “6.26.3”. If you are sure you have a compatible version of @babel/core, #11337， 整理如下："></a>我当前的项目中在结合babel升级过程中遇到的问题进行了总结，解决的具体问题以及方案，在<a href="https://github.com/babel/babel/issues/11337" target="_blank" rel="noopener">Error: Requires Babel “^7.0.0-0”, but was loaded with “6.26.3”. If you are sure you have a compatible version of @babel/core, #11337</a>， 整理如下：</h4><ul>
<li>babel-upgrade插件安装<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs js"># npx lets you run babel-upgrade without installing it locally <br>npx babel-upgrade --write<br># or install globally and run <br>npm install babel-upgrade -g<br>babel-upgrade --write<br></code></pre></td></tr></table></figure>
</li>
</ul>
<p>这个安装完成之后，package.json文件依赖已经更新，而且按照新版的babel7.+的内容结合你本地的.babelrc已存在的内容进行了更新。</p>
<ul>
<li>install &amp;&amp; run<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">npm</span> install<br><span class="hljs-built_in">npm</span> start<br></code></pre></td></tr></table></figure>
</li>
</ul>
<p>在npm run start的时候，遇到了一个棘手的问题，<br><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs undefined">ERROR in ./client/index.jsx<br>Module build failed (from ./node_modules/babel-loader/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>):</span><br><span class="hljs-symbol">Error:</span> [BABEL] /Users/resource/BeiKe/pikachu-static-front-owner/client/index.<span class="hljs-symbol">jsx:</span> The <span class="hljs-string">'polyfill'</span> option has been removed. Use the <span class="hljs-string">'corejs'</span>option to polyfill <span class="hljs-keyword">with</span> <span class="hljs-string">`core-js`</span> via @babel/runtime. (While <span class="hljs-symbol">processing:</span> <span class="hljs-string">"/Users/resource/BeiKe/pikachu-static-front-owner/node_modules/@babel/plugin-transform-runtime/lib/index.js"</span>)<br>    at _default (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/@babel/plugin-transform-runtime/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:144:13)</span><br>    at /Users/resource/BeiKe/pikachu-static-front-owner/node_modules/@babel/helper-plugin-utils/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">index</span>.<span class="hljs-title">js</span>:19:12</span><br>    at /Users/resource/BeiKe/pikachu-static-front-owner/node_modules/@babel/core/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">config</span>/<span class="hljs-title">full</span>.<span class="hljs-title">js</span>:199:14</span><br>    at Generator.<span class="hljs-keyword">next</span> (&lt;anonymous&gt;)<br>    at Function.&lt;anonymous&gt; (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/@babel/core/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">gensync</span>-<span class="hljs-title">utils</span>/<span class="hljs-title">async</span>.<span class="hljs-title">js</span>:26:3)</span><br>    at Generator.<span class="hljs-keyword">next</span> (&lt;anonymous&gt;)<br>    at step (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/gensync/index.<span class="hljs-symbol">js:</span><span class="hljs-number">254</span>:<span class="hljs-number">32</span>)<br>    at evaluateAsync (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/gensync/index.<span class="hljs-symbol">js:</span><span class="hljs-number">284</span>:<span class="hljs-number">5</span>)<br>    at Function.errback (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/gensync/index.<span class="hljs-symbol">js:</span><span class="hljs-number">108</span>:<span class="hljs-number">7</span>)<br>    at errback (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/@babel/core/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">gensync</span>-<span class="hljs-title">utils</span>/<span class="hljs-title">async</span>.<span class="hljs-title">js</span>:70:18)</span><br>    at async (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/gensync/index.<span class="hljs-symbol">js:</span><span class="hljs-number">183</span>:<span class="hljs-number">31</span>)<br>    at onFirstPause (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/gensync/index.<span class="hljs-symbol">js:</span><span class="hljs-number">209</span>:<span class="hljs-number">13</span>)<br>    at Generator.<span class="hljs-keyword">next</span> (&lt;anonymous&gt;)<br>    at cachedFunction (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/@babel/core/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">config</span>/<span class="hljs-title">caching</span>.<span class="hljs-title">js</span>:68:46)</span><br>    at cachedFunction.<span class="hljs-keyword">next</span> (&lt;anonymous&gt;)<br>    at loadPluginDescriptor (<span class="hljs-regexp">/Users/resource</span><span class="hljs-regexp">/BeiKe/pikachu</span>-static-front-owner/node_modules/@babel/core/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">config</span>/<span class="hljs-title">full</span>.<span class="hljs-title">js</span>:235:43)</span><br>ℹ ｢wdm｣: Failed to compile.<br></code></pre></td></tr></table></figure></p>
<p>编译失败！原因是.babelrc中的两个corejs冲突了。corejs3.0+对应的是babel7.0+的版本。</p>
<blockquote>
<p>Remove the polyfill option from @babel/plugin-transform-runtime.<br>移除前我的.babelrc：<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs undefined">&#123;<br>  <span class="hljs-attr">"presets"</span>: [<br>    <span class="hljs-string">"@babel/preset-react"</span>,<br>    [<br>      <span class="hljs-string">"@babel/preset-env"</span>,<br>      &#123;<br>        <span class="hljs-attr">"useBuiltIns"</span>: <span class="hljs-string">"usage"</span>,<br>        <span class="hljs-attr">"corejs"</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">"targets"</span>: &#123;<br>          <span class="hljs-attr">"chrome"</span>: <span class="hljs-number">48</span>,<br>          <span class="hljs-attr">"ie"</span>: <span class="hljs-number">9</span>,<br>          <span class="hljs-attr">"browsers"</span>: [<br>            <span class="hljs-string">"&gt; 1%"</span>,<br>            <span class="hljs-string">"last 5 versions"</span><br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  ],<br>  <span class="hljs-attr">"plugins"</span>: [<br>    [<br>      <span class="hljs-string">"@babel/plugin-transform-runtime"</span>,<br>      &#123;<br>        <span class="hljs-attr">"corejs"</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">"helpers"</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">"polyfill"</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">"regenerator"</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">"moduleName"</span>: <span class="hljs-string">"babel-runtime"</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">"@babel/plugin-proposal-class-properties"</span>,<br>    <span class="hljs-string">"@babel/plugin-syntax-dynamic-import"</span>,<br>    <span class="hljs-string">"@babel/plugin-proposal-object-rest-spread"</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></p>
</blockquote>
<p>移除后我的.babelrc:<br><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs undefined">&#123;<br>  <span class="hljs-attr">"presets"</span>: [<br>    <span class="hljs-string">"@babel/preset-react"</span>,<br>    [<br>      <span class="hljs-string">"@babel/preset-env"</span>,<br>      &#123;<br>        <span class="hljs-attr">"useBuiltIns"</span>: <span class="hljs-string">"usage"</span>,<br>        <span class="hljs-attr">"corejs"</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">"targets"</span>: &#123;<br>          <span class="hljs-attr">"chrome"</span>: <span class="hljs-number">48</span>,<br>          <span class="hljs-attr">"ie"</span>: <span class="hljs-number">9</span>,<br>          <span class="hljs-attr">"browsers"</span>: [<br>            <span class="hljs-string">"&gt; 1%"</span>,<br>            <span class="hljs-string">"last 5 versions"</span><br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  ],<br>  <span class="hljs-attr">"plugins"</span>: [<br>    <span class="hljs-string">"@babel/plugin-proposal-class-properties"</span>,<br>    <span class="hljs-string">"@babel/plugin-syntax-dynamic-import"</span>,<br>    <span class="hljs-string">"@babel/plugin-proposal-object-rest-spread"</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></p>
<p>然后<code>npm run start</code>，正常运行。</p>
<p>重新<code>jest</code>：<br><img data-src="3.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>参考：<a href="https://www.npmjs.com/package/babel-upgrade" target="_blank" rel="noopener">https://www.npmjs.com/package/babel-upgrade</a></p>
</blockquote>
<h3 id="2-当组件中引入了图片或者css文件，"><a href="#2-当组件中引入了图片或者css文件，" class="headerlink" title="2.当组件中引入了图片或者css文件，"></a>2.当组件中引入了图片或者css文件，</h3><p><img data-src="4.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ns8BcwyF-1585295902040)(quiver-image-url/C1664B6CD073AF290832F1AA255887CE.jpg =618x139)\]"><br><img data-src="5.png" alt="在这里插入图片描述"></p>
<h3 id="3-npm包提供的module格式问题"><a href="#3-npm包提供的module格式问题" class="headerlink" title="3.npm包提供的module格式问题"></a>3.npm包提供的module格式问题</h3><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs undefined"> FAIL  <span class="hljs-keyword">test</span>/product.<span class="hljs-keyword">test</span>.jsx<br>  ● <span class="hljs-keyword">Test</span> suite failed to <span class="hljs-keyword">run</span><br><br>    Jest encountered <span class="hljs-keyword">an</span> unexpected <span class="hljs-keyword">token</span><br><br>    This usually <span class="hljs-keyword">means</span> that you are trying to import a <span class="hljs-keyword">file</span> <span class="hljs-keyword">which</span> Jest cannot <span class="hljs-keyword">parse</span>, <span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>. it's not plain JavaScript.<br><br>    <span class="hljs-keyword">By</span> default, <span class="hljs-keyword">if</span> Jest sees a Babel config, it will <span class="hljs-keyword">use</span> that to transform your files, ignoring <span class="hljs-string">"node_modules"</span>.<br><br>    Here's what you can <span class="hljs-keyword">do</span>:<br>     • To have some of your <span class="hljs-string">"node_modules"</span> files transformed, you can specify a custom <span class="hljs-string">"transformIgnorePatterns"</span> <span class="hljs-keyword">in</span> your config.<br>     • <span class="hljs-keyword">If</span> you need a custom transformation specify a <span class="hljs-string">"transform"</span> option <span class="hljs-keyword">in</span> your config.<br>     • <span class="hljs-keyword">If</span> you simply want to mock your non-JS modules (<span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>. binary assets) you can stub them <span class="hljs-keyword">out</span> with the <span class="hljs-string">"moduleNameMapper"</span> config option.<br><br>    You'll find <span class="hljs-keyword">more</span> details and examples of these config options <span class="hljs-keyword">in</span> the docs:<br>    https:<span class="hljs-comment">//jestjs.io/docs/en/configuration.html</span><br><br>    Details:<br><br>    /Users/resource/BeiKe/pikachu-static-front-owner/node_modules/glue-redux/es/index.js:1<br>    (&#123;<span class="hljs-string">"Object.&lt;anonymous&gt;"</span>:function(module,exports,require,__dirname,__filename,<span class="hljs-keyword">global</span>,jest)&#123;import _defineProperty from 'babel-runtime/helpers/defineProperty';<br>                                                                                             ^^^^^^<br><br>    SyntaxError: Unexpected <span class="hljs-keyword">token</span> import<br><br>      1 | <br>      2 |<br>    &gt; 3 | import &#123; createGlue, gluePair &#125; from 'glue-redux';<br>        | ^<br>      4 | import confirmLoan from './confirmLoan';<br>      5 | import Certification from './certification';<br>      6 |<br><br>      at Runtime.createScriptFromCode (../../.nvm/versions/node/v8.16.0/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1059:14)<br>      at Object.&lt;anonymous&gt; (client/glue/glue.js:3:1)<br><br><span class="hljs-keyword">Test</span> Suites: 1 failed, 1 <span class="hljs-keyword">total</span><br>Tests:       0 <span class="hljs-keyword">total</span><br>Snapshots:   0 <span class="hljs-keyword">total</span><br>Time:        9.061s<br>Ran all <span class="hljs-keyword">test</span> suites.<br></code></pre></td></tr></table></figure>
<ul>
<li>原因：是glue-redux旧版本在包的导出格式有问题。</li>
<li><p>解决方案：</p>
<ul>
<li><p>修改glue-redux的文件指向cj模块：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> &#123; createGlue, gluePair &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'glue-redux'</span>;<br></code></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> &#123; createGlue, gluePair &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'glue-redux/cj'</span>;<br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>JavaScript</tag>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>应用缓存方案</title>
    <url>/20190801-%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p> PWA（Progressive Web App）是一种理念，使用多种技术来增强web app的功能，可以让网站的体验变得更好，能够模拟一些原生功能，比如通知推送。在移动端利用标准化框架，让网页应用呈现和原生应用相似的体验。主要应用到的技术：serviceWorker等。</p>
<h1 id="serviceWorker"><a href="#serviceWorker" class="headerlink" title="serviceWorker"></a>serviceWorker</h1><p> Service Worker 是浏览器在后台独立于网页运行的脚本，它打开了通向不需要网页或用户交互的功能的大门。 现在，它们已包括如推送通知和后台同步等功能。 将来，Service Worker 将会支持如定期同步或地理围栏等其他功能。 本教程讨论的核心功能是拦截和处理网络请求，包括通过程序来管理缓存中的响应。</p>
<h2 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h2><p><img data-src="1564639543040.jpg" alt="ServiceWorker生命周期"><br>目前浏览器支持情况： <a href="https://jakearchibald.github.io/isserviceworkerready/" target="_blank" rel="noopener">https://jakearchibald.github.io/isserviceworkerready/</a><br><a id="more"></a></p>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul>
<li>它是一种 JavaScript Worker，无法直接访问 DOM。 Service Worker 通过响应 postMessage 接口发送的消息来与其控制的页面通信，页面可在必要时对 DOM 执行操作。</li>
<li>Service Worker 是一种可编程网络代理，让您能够控制页面所发送网络请求的处理方式。</li>
<li>Service Worker 在不用时会被中止，并在下次有需要时重启，因此，您不能依赖 Service Worker onfetch 和 onmessage 处理程序中的全局状态。 如果存在您需要持续保存并在重启后加以重用的信息，Service Worker 可以访问 IndexedDB API。</li>
<li>Service Worker 广泛地利用了 Promise，要熟悉Promise机制。</li>
</ul>
<h1 id="Workbox"><a href="#Workbox" class="headerlink" title="Workbox"></a><a href="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin" target="_blank" rel="noopener">Workbox</a></h1><p>Workbox，Google官方 PWA 框架，解决的就是 Service Worker 编写太过复杂的问题。</p>
<h2 id="提供的缓存策略"><a href="#提供的缓存策略" class="headerlink" title="提供的缓存策略"></a>提供的缓存策略</h2><ul>
<li><p><code>stateWhileRevalidate</code>：当请求的路由有对应的 Cache 缓存结果就直接返回，在返回 Cache 缓存结果的同时会在后台发起网络请求拿到请求结果并更新 Cache 缓存，如果本来就没有 Cache 缓存的话，直接就发起网络请求并返回结果，这对用户来说是一种非常安全的策略<br><img data-src="stale-while-revalidate.png" alt="stateWhileRevalidate"></p>
</li>
<li><p><code>networkFirst</code>：当请求路由是被匹配的，就采用网络优先的策略，也就是优先尝试拿到网络请求的返回结果，如果拿到网络请求的结果，就将结果返回给客户端并且写入 Cache 缓存，如果网络请求失败，那最后被缓存的 Cache 缓存结果就会被返回到客户端，这种策略一般适用于返回结果不太固定或对实时性有要求的请求，为网络请求失败进行兜底.<br><img data-src="2.png" alt="networkFirst"></p>
</li>
<li><p><code>cacheFirst</code>：当匹配到请求之后直接从 Cache 缓存中取得结果，如果 Cache 缓存中没有结果，那就会发起网络请求，拿到网络请求结果并将结果更新至 Cache 缓存，并将结果返回给客户端。这种策略比较适合结果不怎么变动且对实时性要求不高的请求.<br><img data-src="3.png" alt="cacheFirst"></p>
</li>
<li><p><code>networkOnly</code>：强制使用正常的网络请求，并将结果返回给客户端，这种策略比较适合对实时性要求非常高的请求。<br><img data-src="4.png" alt="networkOnly"></p>
</li>
<li><p><code>cacheOnly</code>：直接使用 Cache 缓存的结果，并将结果返回给客户端，这种策略比较适合一上线就不会变的静态资源请求。<br><img data-src="5.png" alt="cacheOnly"></p>
</li>
</ul>
<p>以上，如果满足不了你，还可以自定义缓存策略。</p>
]]></content>
      <categories>
        <category>ServiceWorker</category>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>ServiceWorker</tag>
        <tag>前端缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出webpack教程系列</title>
    <url>/20190322-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAwebpack%E6%95%99%E7%A8%8B%E7%B3%BB%E5%88%971-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%89%93%E5%8C%85%E7%94%A8%E6%B3%95%E5%92%8C%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/ghostwu/p/7499237.html" target="_blank" rel="noopener">https://www.cnblogs.com/ghostwu/p/7499237.html</a></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>坐井观天</title>
    <url>/20190126-%E5%9D%90%E4%BA%95%E8%A7%82%E5%A4%A9/</url>
    <content><![CDATA[<p><img data-src="https://res.cloudinary.com/dqxtn0ick/image/upload/v1538793499/article/essay/well.jpg" alt="坐井观天"></p>
<p>   慢慢长大，有时候才会发现有些事情是不可为的。</p>
<p>​　　曾经在很小的时候，我发现我自己是会思考的，我以为全世界只有我一个人会思考，当时觉得很有意思。后来更大一些，也就更懂一些，知道了自己是在一个群体中的，这个群体是我可以接触到或感受到的范围，这个群体每个人都是独立的个体，而我只是其中一个。</p>
<a id="more"></a>
<p>​　　小学，初中，高中，大学，我们就这样被一步一步地筛选上来，每个人像是一个产品又不像是一个产品，主动或者被动地选择了自己的生活。曾经你以为的全世界就是一个学校，一个县城，一个都市。年龄越来越大，经历和见识的也越来越多，你慢慢的知道了，世界也越来越大了，或者说是你知道的世界越来越大了。</p>
<p>​　　我想起了以前的一个故事：坐井观天。青蛙和小鸟在争辩天有多大，青蛙认为天只有井口那么大，小鸟认为天无边无际，飞不到尽头。有一天，当我再想到这个故事的时候，就突然感受到曾经认为自己是那只小鸟，然后自己却还是那只青蛙。所能见的只有眼前这片天，只有井口那么大，因为你从出生到现在，所能见的就是你所触所及，只不过越来越靠近井口，发现井口的天空越来越大了。你从一开始就生活在井中，你根本没有意识到你生活在井中，也根本不会意识到井外还有一个世界，直到那只小鸟告诉你了。当你没有跳出井口的时候，你也无法想象天上还有云朵，云朵长什么样，是白色的还是灰色的。</p>
<p>​　　有的人一辈子也不知道自己生活的井并不是世界的全部，就算是别人告诉他了，他知道了，也不知道井外的天地。但是不知道又不代表没有意义，自己一辈子的世外桃源不见得比别人的世外桃源差，白驹过隙，追求不同，拿什么来衡量活得有价值。又有多少人会问，我要怎样过这一生才会流芳千古。</p>
<p>​　　我们都生活在井中，只不过不同人所生的井不一样大，每个人都在往上爬，有时候并不是为了看到更大的天空，而只是大家都在往上爬而已，然后前言后语说着看的天空有多大，看到了更多在井底没看到的东西。而有的人可能一出生就出生在井边，一落地所见的天空就如锅盖一样遍及自己的四周，广阔无边。他也不知道原来还有人生活在井底，原来有人看到的天空只有井口那么大。当他听到别人描述说天只有井口那么大的时候，他可能会冷笑一声，这是哪里来的乡巴佬。但他或许不知道他自己也生活在井中，只不过他看不到井口在哪，他所仰望的天空也是别人翱翔的天空，别人在翱翔的时候都没空来俯视他。</p>
<p>​　　如果有一天，有一只青蛙跳出了井口，第一次看到井外的天空，他可能会愕然，他可能已经知道了井外的天空不止井口那么大，可能会更大一圈或两圈，然而他再怎么想象也无法想象到井外的天已经不是一圈两圈可以形容得了，而他愕然的天空在别人看来可能习以为常，毕竟是两个世界的人。青蛙意识到了小鸟说的天空，真的很大很大。但小鸟或许也不知道，他所看到的全世界并不是全世界，他只是看到了他能看到的全世界而已。无论他意识到或者没有意识到，他都无法去构想他没看到的全世界是什么样的。有人说也许这就够了，为什么非要看到全世界呢，你看到的全世界也不一定是你想要的全世界，你想要的全世界也不一定是你要得到的全世界，你想要并最终拼尽全力要到的全世界也不一定是你那时候想要的全世界。</p>
<p>​　　好像生活本来就是充满悖论，城外的人想进去，城里的人想出来，得不到的永远在骚动，被偏爱的都有恃无恐。而大多数人爬了一辈子也不一定爬到井口，看见他所谓所理想的天空，就算爬到井口也可能耗尽一生的力气，已没有力气再看下更广阔的世界了。</p>
<p>​　　慢慢长大，有时候才会发现有些事情是不可为的。知其不可为而为之吗？尽人事，听天命。适，可而止！</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs undefined">转载自https:<span class="hljs-regexp">//</span>www.huweihuang.com<span class="hljs-regexp">/article/</span>essay<span class="hljs-regexp">/sky-and-well/</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>应用缓存ServiceWork实践</title>
    <url>/20201114-%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98ServiceWork%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="五个Why？"><a href="#五个Why？" class="headerlink" title="五个Why？"></a>五个Why？</h1><blockquote>
<ul>
<li>什么是Service Work？</li>
<li>Service Work能帮助我们前端提供什么基础能力？</li>
<li>Service Work的原理是什么？</li>
<li>JS中如何使用它？</li>
<li>在我们现有的React项目中怎么去使用它？<a id="more"></a>
</li>
</ul>
</blockquote>
<h1 id="什么是Service-Work？"><a href="#什么是Service-Work？" class="headerlink" title="什么是Service Work？"></a>什么是Service Work？</h1><p>Service Worker是浏览器在后台独立于网页运行的脚本，独立于页面，是一个worker线程，也可以理解为一个网络代理服务器。 </p>
<p><strong>不受页面刷新的影响，可以监听和截拦作用域范围内所有页面的 HTTP 请求；</strong></p>
<p>Service Worker是PWA的重要组成部分，主要用来做持久的离线缓存；</p>
<h1 id="Service-Work能为前端提供什么基础能力？"><a href="#Service-Work能为前端提供什么基础能力？" class="headerlink" title="Service Work能为前端提供什么基础能力？"></a>Service Work能为前端提供什么基础能力？</h1><p>ServiceWorker给前端开发者开放了内核大量的底层能力，比如，它给前端提供了细粒度操作请求缓存的底层原语，等同于给前端开放了操作HTTP Cache级别缓存的能力，与Fetch API结合，让前端具备了完全操控请求，响应，缓存的能力，这点对于pwa的实现至关重要。因此serviceWorker是pwa的核心。</p>
<p>实际应用中，为了兼容安卓与ios，serviceWorker的应用最广泛的还不在pwa上面，而是在网站的优化方面。</p>
<p>基于 Service Worker API 的特性，结合 Fetch API、Cache API、Push API、postMessage API 和 Notification API，可以在基于浏览器的 web 应用中实现如离线缓存、消息推送、静默更新等 native 应用常见的功能，以给 web 应用提供更好更丰富的使用体验。</p>
<h1 id="Service-Work的原理是什么？"><a href="#Service-Work的原理是什么？" class="headerlink" title="Service Work的原理是什么？"></a>Service Work的原理是什么？</h1><p>Service Worker 的工作原理主要体现在它的生命周期上，一个 Service Worker 从被注册开始，就会经历自身的一些生命周期的节点，而在这些节点都可以去做一些特定的事情，比如一些复杂的计算、缓存的写入、缓存的读取等操作。通过这些生命周期节点的联合调度，Service Worker 才能完成复杂的资源离线缓存的工作。而开发者只有了解了 Service Worker 的生命周期，才能通过设计相关逻辑，并开发 Service Worker 文件 <code>sw.js</code> ，让 Service Worker 去完成 PWA 离线缓存策略。</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>先来了解下什么是 Service Worker 的生命周期，每个 Service Worker 都有一个独立于 Web 页面的生命周期，其示意图如下图所示。</p>
<p><img data-src="1621051649315-cb08e-9c41a6f29f1d.png" alt="image"></p>
<ol>
<li>在主线程成功注册 Service Worker 之后，开始下载并解析执行 Service Worker 文件，执行过程中开始安装 Service Worker，在此过程中会触发 worker 线程的 install 事件。</li>
<li>如果 install 事件回调成功执行（在 install 回调中通常会做一些缓存读写的工作，可能会存在失败的情况），则开始激活 Service Worker，在此过程中会触发 worker 线程的 activate 事件，如果 install 事件回调执行失败，则生命周期进入 Error 终结状态，终止生命周期。（生命周期终止之后会影响页面的正常加载吗？）</li>
<li>完成激活之后，Service Worker 就能够控制作用域下的页面的资源请求，可以监听 fetch 事件。</li>
</ol>
<blockquote>
<p>（如何监听fetch事件？）</p>
</blockquote>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs undefined">self.addEventListener(<span class="hljs-string">'fetch'</span>, <span class="hljs-keyword">event</span> =&gt; &#123;<br>  console.<span class="hljs-keyword">log</span>(<span class="hljs-string">'service worker 抓取请求成功: '</span> + <span class="hljs-keyword">event</span>.request.url)<br>&#125;)<br></code></pre></td></tr></table></figure>
<ol>
<li>如果在激活后 Service Worker 被 unregister 或者有新的 Service Worker 版本更新，则当前 Service Worker 生命周期完结，进入 Terminated 终结状态。</li>
</ol>
<p>注意：</p>
<ul>
<li>首次注册成功的 Service Worker 没能拦截当前页面的请求，非首次注册的 Service Worker 可以控制当前的页面并能拦截请求</li>
</ul>
<blockquote>
<p>（为什么首次注册的时候，却没有拦截到网络资源请求的？）</p>
<p>主要是因为在 Service Worker 的注册是一个异步的过程，在激活完成后当前页面的请求都已经发送完成，因为时机太晚，此时是拦截不到任何请求的，只能等待下次访问再进行。</p>
<p>而第二次刷新页面，由于当前站点的 Service Worker 是处于激活状态，所以不会再次新建 worker 工作线程并执行 Service Worker。也就是说激活状态的 Service Worker 在一个站点只会存在一个 worker 工作线程，除非 Service Worker 文件发生了变化（手动 unregister Service Worker 也会注销掉 worker 工作线程），触发了浏览器更新，才会重新开启生命周期。而由于 Service Worker 工作线程的离线特性，只要处于激活状态，在后续的任何访问中，都会通过 fetch 事件监听器拦截当前页面的网络请求，并执行 <code>fetch</code> 事件回调。</p>
</blockquote>
<ul>
<li>在手机端或者 PC 端浏览器，每新打开一个已经激活了 Service Worker 的页面，那 Service Worker 所控制的终端就新增一个，每关闭一个包含已经激活了 Service Worker 页面的时候（不包含手机端浏览器进入后台运行的情况），则 Service Worker 所控制的终端就减少一个，如上图打开了三个浏览器标签，则当前 Service Worker 控制了三个终端，通过 Chrome 浏览器 Devtools 的 <code>Applications -&gt; ServiceWorker</code> 标签可以查看如下图所示 Service Worker 控制的三个终端。当刷新其中一个浏览器标签的时候，会发现一个奇怪的现象，当前的浏览器标签的控制台打印了一条信息，而并没有对其他的两个浏览器标签进行刷新，但是它们的控制台也出现了打印信息</li>
</ul>
<blockquote>
<p>主要是因为，所有的终端共用一个 worker 工作线程，当在 worker 线程中执行 <code>console.log()</code> 方法打印内容的时候，会作用到所有的终端，worker 工作线程和终端的关系如下图所示。</p>
<p><img data-src="1621052731609-0f75c6df-32fb-4059-9e2c-c95706aa0c95.png" alt="image"></p>
</blockquote>
<p>Service Worker 在内部都有一系列的工作流程，这些工作流程决定了开发者可以在 Service Worker 文件中如何进行开发。下图展示的是 Service Worker 工作流程图。</p>
<p><img data-src="1621052162876-4e921605-a41b-42de-a3a0-a8c01faf6d14.png" alt="image"></p>
<h1 id="JS中如何使用它？"><a href="#JS中如何使用它？" class="headerlink" title="JS中如何使用它？"></a>JS中如何使用它？</h1><p>首先在页面注册一个service worker</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">if</span> (<span class="hljs-string">'serviceWorker'</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  navigator.serviceWorker.register(<span class="hljs-string">'./index.js'</span>).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(reg)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'register a service worker: '</span>, reg)<br>  &#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'err: '</span>, err);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>接着就可以在Service worker中尽情畅想，以页面的离线应用为出发点，说明sw如实做到离线应用的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">const</span> cacheUrl = [<br>  <span class="hljs-string">'/base.css'</span>,<br>  <span class="hljs-string">'/france.html'</span><br>];<br><span class="hljs-keyword">const</span> cacheName = <span class="hljs-string">'my-site-cache'</span>;<br><br><span class="hljs-comment">// install阶段</span><br>self.addEventListener(<span class="hljs-string">'install'</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'sw event: install'</span>);<br>  event.waitUntil(<br>    caches.open(cacheName).then(<span class="hljs-function">(<span class="hljs-params">cache</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'open cache'</span>);<br>      <span class="hljs-keyword">return</span> cache.addAll(cacheUrl);<br>    &#125;)<br>  );<br>&#125;);<br><br>self.addEventListener(<span class="hljs-string">'fetch'</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  event.respondWith(caches.match(event.request).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (res) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'match'</span>);<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fetch(event.request);<br>  &#125;));<br>&#125;);<br></code></pre></td></tr></table></figure>
<h1 id="在我们现有的React项目中怎么去使用它？"><a href="#在我们现有的React项目中怎么去使用它？" class="headerlink" title="在我们现有的React项目中怎么去使用它？"></a>在我们现有的React项目中怎么去使用它？</h1><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>Service Worker 出于安全性和其实现原理，在使用的时候有一定的前提条件。</p>
<ul>
<li>由于 Service Worker 要求 HTTPS 的环境，我们通常可以借助于 <a href="https://pages.github.com/" target="_blank" rel="noopener">github page</a> 进行学习调试。当然一般浏览器允许调试 Service Worker 的时候 host 为 localhost 或者 127.0.0.1 也是 ok 的。</li>
<li>Service Worker 的缓存机制是依赖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Cache" target="_blank" rel="noopener">Cache API</a> 实现的</li>
<li>依赖<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener"> HTML5 fetch API</a></li>
<li>依赖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/javaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise </a>实现</li>
</ul>
<h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p><a href="https://caniuse.com/?search=serviceWork" target="_blank" rel="noopener">https://caniuse.com/?search=serviceWork</a></p>
<h3 id="workbox方案：workbox-webpack-plugin"><a href="#workbox方案：workbox-webpack-plugin" class="headerlink" title="workbox方案：workbox-webpack-plugin"></a>workbox方案：workbox-webpack-plugin</h3><p>官方文档: <a href="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin" target="_blank" rel="noopener">https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin</a></p>
<h4 id="插件版本"><a href="#插件版本" class="headerlink" title="插件版本"></a>插件版本</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">"webpack"</span>: <span class="hljs-string">"^4.46.0"</span>,<br><span class="hljs-string">"webpack-bundle-analyzer"</span>: <span class="hljs-string">"^3.3.2"</span>,<br><span class="hljs-string">"webpack-cli"</span>: <span class="hljs-string">"^3.3.12"</span>,<br><span class="hljs-string">"webpack-dev-server"</span>: <span class="hljs-string">"^3.1.4"</span>,<br><span class="hljs-string">"webpack-manifest-plugin"</span>: <span class="hljs-string">"^2.0.3"</span>,<br><span class="hljs-string">"workbox-webpack-plugin"</span>: <span class="hljs-string">"^6.1.5"</span><br></code></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs undefined">npm <span class="hljs-keyword">install</span> workbox-webpack-<span class="hljs-keyword">plugin</span> -D<br></code></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>webpack插件中使用~</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">const</span> &#123; GenerateSW &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'workbox-webpack-plugin'</span>)<br><br>exports.override = <span class="hljs-function">(<span class="hljs-params">webpackConfig, options</span>) =&gt;</span> &#123;<br><br>  webpackConfig.plugins.push(<span class="hljs-keyword">new</span> GenerateSW(&#123;<br>    <span class="hljs-attr">swDest</span>: <span class="hljs-string">'workboxServiceWorker.js'</span>, <span class="hljs-comment">// 注意点1: 不写这个名字, 插件默认会生成 service-worker.js 这个文件,然后不知道WHO又生成了一次service-worker.js这个文件(内容不是workbox预期), 所以webpack生成的workbox的脚本就这样被替换了! 导致插件配置好的文件其实没被写出!!!</span><br>    <br>    <span class="hljs-comment">// 当我们每次访问网站时都会去下载这个文件，当发现文件不一致时，就会安装这个新 Service Worker ，安装成功后，它将进入等待阶段。</span><br><br>    <span class="hljs-comment">// importWorkboxFrom: 'disabled', // 可填`cdn`,`local`,`disabled`, 区别下面整理</span><br>    <span class="hljs-attr">importScripts</span>: [<span class="hljs-string">'https://fds.api.x.net/workbox-cdn/workbox-sw.js'</span>], <span class="hljs-comment">// 我从自己的cdn引入了workbox,这样就不用每个项目都上传</span><br><br>    <span class="hljs-comment">// 这三个都写true</span><br>    <span class="hljs-attr">skipWaiting</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 新 Service Worker 安装成功后需要进入等待阶段，skipWaiting: true 将使其跳过等待，安装成功后立即接管网站。</span><br>    <span class="hljs-attr">clientsClaim</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 立即接管</span><br>    <span class="hljs-attr">offlineGoogleAnalytics</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 离线也记录ga数据, 有网了再上报的意思。</span><br>    <span class="hljs-attr">cleanupOutdatedCaches</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 尝试删除老版本缓存</span><br>    <span class="hljs-comment">// 缓存规则, 具体下面记录, 更详细的请查阅文档。 目前只缓存api</span><br>    <span class="hljs-attr">runtimeCaching</span>: [<br>      &#123;<br>        <span class="hljs-comment">// Match any request that ends with .png, .jpg, .jpeg or .svg.</span><br>        <span class="hljs-attr">urlPattern</span>: <span class="hljs-regexp">/\.(?:png|jpg|jpeg|svg)$/</span>,<br><br>        <span class="hljs-comment">// Apply a cache-first strategy.</span><br>        <span class="hljs-attr">handler</span>: <span class="hljs-string">'CacheFirst'</span>,<br><br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-comment">// Use a custom cache name.</span><br>          <span class="hljs-attr">cacheName</span>: <span class="hljs-string">'images'</span>,<br><br>          <span class="hljs-comment">// Only cache 10 images.</span><br>          <span class="hljs-attr">expiration</span>: &#123;<br>            <span class="hljs-attr">maxEntries</span>: <span class="hljs-number">10</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;))<br>  <br>  <span class="hljs-keyword">return</span> webpackConfig<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>在react入口js的代码里注册代码</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">if</span> (<span class="hljs-string">'serviceWorker'</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 敲黑板, 这里的/workbox/workboxServiceWorker.js需要根据实际情况变化, 因为我项目没部署到根域名, 所以加了workbox的路径名...</span><br>    <span class="hljs-comment">// 注意: 这里有个坑 workboxServiceWorker 会被缓存, 解决方案在下面的坑点介绍</span><br>    navigator.serviceWorker.register(<span class="hljs-string">'/workboxServiceWorker.js'</span>).then(<span class="hljs-function"><span class="hljs-params">registration</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'SW registered: '</span>, registration)<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">registrationError</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'SW registration failed: '</span>, registrationError)<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h4><p>针对<code>urlPattern: /\.(?:png|jpg|jpeg|svg)$/,</code>图片加载速度，在开启sw前后进行对比</p>
<p>未开启sw之前，原图是800KB左右，加载时间是79ms左右：</p>
<p><img data-src="1621056712488-045a43f0-7512-45b1-a0fe-5c7d3b0334f9.png" alt="image.png"></p>
<p><img data-src="https://cdn.nlark.com/yuque/0/2021/png/326697/1621057076593-223b28a2-add3-4d21-876a-21d551463f0e.png" alt="image.png"></p>
<p>service work中没有信息</p>
<p><img data-src="1621057086504-a7bd6519-42c5-4b19-b241-d87ee03d1bb3.png" alt="image.png"></p>
<p>开启sw之后，图片显示加载自ServiceWorker，且加载时间为4ms，速度提升20倍左右：</p>
<p><img data-src="1621056782748-d2d62be0-f9a3-4a59-820d-8770b62b4803.png" alt="image.png"></p>
<p><img data-src="1621056910564-025ca9be-111e-41f4-976e-f9352260a027.png" alt="image.png"></p>
<p><img data-src="1621057001192-1e61fa15-556c-42ad-be88-c006aca70dd7.png" alt="image.png"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/6844904040489287694" target="_blank" rel="noopener">service-worker工作原理浅析</a></p>
<p><a href="https://juejin.cn/post/6844903845995216909" target="_blank" rel="noopener">React如何通过Webpack优雅的接入serviceWorker的成熟方案workBox &amp;&amp; Google Analytics</a></p>
<p><a href="http://zhenhua-lee.github.io/http/service-worker.html" target="_blank" rel="noopener">Service worker介绍</a></p>
<p><a href="https://blog.csdn.net/chiuwingyan/article/details/88264192" target="_blank" rel="noopener">Service Worker初探</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Cache" target="_blank" rel="noopener">MDN Cache</a></p>
<p><a href="https://lavas-project.github.io/pwa-book/chapter04/3-service-worker-dive.html" target="_blank" rel="noopener">Service Worker 工作原理</a></p>
<p><a href="https://www.jianshu.com/p/8fecf39e04c5" target="_blank" rel="noopener">【sw】service worker概述</a></p>
]]></content>
      <tags>
        <tag>ServiceWork</tag>
        <tag>应用缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>聊一聊模块化（二）原理篇</title>
    <url>/20190925-%E8%81%8A%E4%B8%80%E8%81%8A%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8E%9F%E7%90%86%E7%AF%87/</url>
    <content><![CDATA[<p>上一篇介绍了模块化的历史进程以及各个模块化规范的优缺点。而这一篇，主要从模块化规范的实现原理出发，让大家能够更加了解其底层实现，从而应用起来更加得心应手。了解其原理还是有一定必要的，除了能更好的掌握外，更重要的是锻炼自己的思维能力。下面就简单介绍一下模块化规范的原理。</p>
<p><img data-src="微信图片_20190819012247.jpg" alt="聊一聊模块化（一）简介篇"></p>
<h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p>对于 CommonJS 规范，最重要的就是 require 方法，我们需要带着几个问题去了解 require 的原理实现：</p>
<ul>
<li>当我们引入一个模块的时候，我们究竟做了怎样一件事情？</li>
<li>exports 和 module.exports 有什么联系和区别？</li>
</ul>
<a id="more"></a>
<p>在文档中，有简易版的 require 的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">require</span>(<span class="hljs-params"><span class="hljs-regexp">/* ... */</span></span>) </span>&#123;<br>  <span class="hljs-comment">// exports 是 module 中的一个属性</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = &#123; <span class="hljs-attr">exports</span>: &#123;&#125; &#125;;<br>  <br>  <span class="hljs-function">(<span class="hljs-params">(<span class="hljs-built_in">module</span>, exports</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 这里的 exports 实际上只是 module.export 的引用</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">someFunc</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 直接修改exports 的值，实际上 module.export 中仍然是空对象，导出的是空对象</span><br>    exports = someFunc;<br>    <br>    <span class="hljs-comment">// 而直接修改 module.export 的值是有效的</span><br>    <span class="hljs-built_in">module</span>.exports = someFunc;<br>   <br>  &#125;)(<span class="hljs-built_in">module</span>, <span class="hljs-built_in">module</span>.exports);<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>（1）require 相当于把被引用的 module 拷贝了一份到当前 module 中</p>
<p>（2）export 实际上是 module.exports 的引用</p>
<p>作为一个引用，如果我们修改它的值，实际上修改的是它对应的引用对象的值。但是如果我们修改其引用地址，对于其原来的内容并不会有影响，反而切断了与 module.exports 的联系。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">exports.a = <span class="hljs-number">1</span><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span><br>&#125;<br><br><br>exports = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment">// 相当于</span><br><span class="hljs-keyword">let</span> other = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125; <span class="hljs-comment">// 为了更加直观，我们这样声明了一个变量</span><br>exports = other <span class="hljs-comment">// 此时 exports 指向 other</span><br></code></pre></td></tr></table></figure>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>AMD 规范中的核心就是 define 和 require 方法，下面来看看这两个方法的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">global</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> modules = &#123;&#125;;<br>  <span class="hljs-comment">// 定义模块</span><br>  <span class="hljs-keyword">var</span> define = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">id,factory</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!modules[id])&#123;<br>      modules[id] = &#123;<br>        <span class="hljs-attr">id</span> : id,<br>        <span class="hljs-attr">factory</span> : factory<br>      &#125;;<br>    &#125;<br>  &#125;;<br>  <span class="hljs-comment">// 引入模块</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">require</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">module</span> = modules[id];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">module</span>)&#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">module</span>.exports)&#123;<br>      <span class="hljs-built_in">module</span>.exports = &#123;&#125;;<br>      <span class="hljs-built_in">module</span>.factory.call(<span class="hljs-built_in">module</span>.exports,<span class="hljs-built_in">require</span>,<span class="hljs-built_in">module</span>.exports,<span class="hljs-built_in">module</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports;<br>  &#125;<br><br>  global.define = define;<br>  global.require = <span class="hljs-built_in">require</span>;<br>&#125;)(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>Javascript 模块化管理的来世今生</li>
<li>从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>胡思乱想</title>
    <url>/20190126-%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
    <content><![CDATA[<p><img data-src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1548421742657&amp;di=924531cc9ad0fd5265fb8edc7f4cf8f0&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.90sjimg.com%2Fback_pic%2Fqk%2Fback_origin_pic%2F00%2F04%2F29%2F06c655888789b697459e18ba27801761.jpg" alt="胡思乱想"></p>
<p>   最近又开始乱想了，走在路上脑海都有莫名的思绪在飘，而当你静下来的时候又一溜烟跑没了，都不知道去哪里找。2018年还有几天就要结束了，好像来得太快了些。<br><a id="more"></a></p>
<p>​　　回想自己刚毕业的时候，总觉得还年轻，有试错的资本，比大多数人幸运的是比较早的找到了方向，不用挣扎在换方向和不得不做自己不喜欢的事情。毕竟挺多人陷入这样的一个循环：做着自己不喜欢的事情，而又不能从中得到提升，得不到提升就无法胜任更好的工作，不能胜任更好的工作，就不得不做原来的事情，如此循环。而时间久了，你原来的工作是你下一个阶段的筹码，当你要换别的方向，原来积累的筹码便会贬值，或者说你没有你要换的方向的筹码，在当前利益最大化的情况下，你不得不继续做原来的方向，进入二次循环。这就好比大学选了一个不喜欢的专业，你必须把自己不喜欢的专业的成绩提高才可以申请转专业，当然跳出这种循环，这是一种行之有效的方法，另一种方法是从头开始，这就要权衡成本和收益。但并不是说你当前认为的无价值的东西它真的无价值，或许某一天它反而可以助你一臂之力，功不唐捐。</p>
<p>​　　我们总是想的太多，做的太少了。我总感觉自己看得还不够远，努力地去踮起脚尖，睁大眼睛，希望可以看得更远，再远一些，但是脚掌就那么大，眼睛能看到的也就那么远，最多也就跳一跳，偶尔可以瞥上一两眼，这毕竟不是长久之计，终究还是自己所站的台阶不够高。而这个台阶也不完全是你自己爬上去的，你的祖辈，你的父辈，还有你自己共同铸就了你当前所站的位置，只不过有的人是父辈帮忙爬的多一些，有的人是自己爬的多一些。爬台阶也是很累的，腿短的一次只能上一个台阶，一个台阶可能都需要迈很久，腿长的一次可能跨两三个台阶也不在话下，而有的或许靠父母或自己买了缆车的票，直接上去了，不需要自己爬。众生百态，不能因为轻松而沾沾自喜，也不能因为太累而干脆放弃，毕竟天道好轮回，苍天饶过谁。</p>
<p>​　　回想自己的2018年，没有太多的意外，也没有太多的惊喜。我能掌握主动权的事情，基本控制在我预期的范围内，我拿不到主动权的事情，也没有取得太大的进展。我有预感未来的某一天，我会为自己这一两年没做的，不敢做的事情感到遗憾和后悔，但是我真想告诉未来的自己，现在的我已经尽力将手上的牌打好，手上的好牌不算多，难免会过于小心和犹豫，这自然是需要改进的地方。另外一点是，有些事不能看得太明白，或许是我自认为看得太明白了，就好比我站在此处，看到路的远方写着此路不通的牌子，我便不再想往前走了，心想既然此路不通，我何必浪费我的时间和精力再走过去呢，我何不换一条路，毕竟走过去再走回来除了时间精力成本外，也是会累的，走多了太累了，以后就更走不动，更不想走了。如果我没看清那个牌子，兴许我会怀着希望与好奇心走过去，走到最后发现写着此路不通，但也有可能此路不通旁边会放着另外一条路的指示牌，你可以继续走下去，刚才走过的路并没有白费力气。看得太明白了就丧失了很多可能性了！而我终有一天会为这种可能性后悔的。</p>
<p>​　　最近一段时间，越来越意识到20岁到30岁这十年的积累可能对一个人的下半辈子甚至下一代产生的影响。10年的前一半时间大多在学生阶段，大学或者研究生，后一半的时间则在步入工作的5年期内。而这10年的效应是在前一年的基础上累增的。总是说三十而立，三十岁好像是一个分界岭，需要更换角色，进入下一个阶段的打怪中，如果把三十岁作为一个路标，又觉得没有缓冲期，那28岁呢，当28岁的时候，我应该是一个什么样的人。这样想来，所剩的时间不算多也不算少，不过时间真的很快，想想却会有点焦虑了。像极了考试倒计时，总觉得什么都没复习，这个也会考，那个也会考，如果我早点把基础打好一点，或许就会比较淡定了，但是对于过去对于未来，你都无能为力，所能够把握和支配的只有现在，这种焦虑感来源于什么都要复习，却又复习不下去，浪费了一点时间就会陷入自责与愧疚中。</p>
<p>​　　2018年真的要过去了，外部环境来讲，这一年并不是很好的一年，都说10年一周期，1998年、2008年经济都不是太好。而2018年对我来讲，有些事情没达到预期，而我又暂时想不到好的办法。努力就是一个不断获取主动权的过程，但有的努力也不一定可以拿到主动权。过于理性，不好；想太多，不好；不敢轻易尝试，不好。</p>
<p>​　　今天晚上下雨了，天还真的有点冷。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs undefined">转载自https://houchaowei.github.io/<span class="hljs-number">20190125</span>/<span class="hljs-symbol">%E8</span><span class="hljs-symbol">%83</span><span class="hljs-symbol">%A1</span><span class="hljs-symbol">%E6</span><span class="hljs-symbol">%80</span><span class="hljs-symbol">%9</span>D<span class="hljs-symbol">%E4</span><span class="hljs-symbol">%B9</span><span class="hljs-symbol">%B1</span><span class="hljs-symbol">%E6</span><span class="hljs-symbol">%83</span><span class="hljs-symbol">%B3</span>/<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>聊一聊模块化（一）简介篇</title>
    <url>/20190825-%E8%81%8A%E4%B8%80%E8%81%8A%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E7%AF%87/</url>
    <content><![CDATA[<p>前端从刀耕火种时代脱离出来，离不开其生态环境的完善，各种插件和库的层出不穷，让我们减少了自己造轮子的繁杂过程，从而大大提高了开发者的工作效率。造轮子也就是模块化的过程。</p>
<p>但是随着模块化的发展，一个项目也就会由很多的模块组成，而这些模块有一部分是自己的，也有一部分是别人开发的，模块的管理就成为了很大的一个问题。正是因为有这样的需求，才引起了模块化管理规范的发展。</p>
<p><img data-src="微信图片_20190819012247.jpg" alt="聊一聊模块化（一）简介篇"></p>
<p>模块化经历了下面几个阶段，也表明了模块化的作用和发展方向：</p>
<ul>
<li>代码的封装和复用</li>
<li>减少全局的污染、冲突</li>
<li>部分属性和方法的私有化</li>
<li>模块的管理规范化<a id="more"></a>
现在在大型项目中，对模块的管理基本上是 Webpack + CommonJS + ES6 Module，但是了解其背后的发展和原理还是很有意义的。</li>
</ul>
<h1 id="封装和复用"><a href="#封装和复用" class="headerlink" title="封装和复用"></a>封装和复用</h1><p>当代码越写越多时，我们常常会把重复出现的内容或者复杂的功能封装成一个个的函数，方便我们直接调用，减少维护成本和工作量。<br>减少污染和冲突</p>
<p>当我们封装的函数越来越多，全局的变量就会越来越多，不可避免会导致一些冲突，尤其是不同开发者写的模块。<br>为了避免全局变量的污染和减少模块的冲突，我们会将单个模块封装到一个对象内部：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = &#123;<br>  <span class="hljs-attr">_number</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">f1</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>)<br>  &#125;,<br>  <span class="hljs-attr">f2</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">456</span>)<br>  &#125;,<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure></p>
<h1 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h1><p>但是这样仍然存在问题，就是模块内部的属性可以通过外部直接修改，这是非常危险的。</p>
<p>于是，聪明的开发者们想到了使用 IIFE，即立即执行函数表达式。也称为模块模式。函数拥有自己的作用域，这不仅能减少全局的污染，还可以对内部属性起到一定保护作用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> _money = <span class="hljs-number">100</span>;<br>  <span class="hljs-keyword">const</span> m1 = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> m2 = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">f1</span>: m1,<br>    <span class="hljs-attr">f2</span>: m2<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure>
<p>如 JQuery：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">global, factory</span>) </span>&#123;<br><br>&#125;)(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span> !== <span class="hljs-string">'undefined'</span> ? <span class="hljs-built_in">window</span> : <span class="hljs-keyword">this</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">window, noGlobal</span>) </span>&#123;<br>  <span class="hljs-comment">// 这里把 JQ 抛出给全局</span><br>&#125;);<br></code></pre></td></tr></table></figure></p>
<p>JQ 的这种模块创建模式也成为了一种经典。</p>
<p>其好处在于外部不能直接修改内部的属性，从而起到一定防御作用，可以模拟私有属性。只需要将外部所需的方法和属性通过一定的方式抛出去即可。</p>
<p>IIFE 可以说是主要的模块化手段，其中 CMD、AMD、commonJS 都是基于 IIFE 实现的。ES6 Module 在各大浏览器中还没有得到支持，仍然会转成 IIFE 来运行。</p>
<h1 id="模块管理规范"><a href="#模块管理规范" class="headerlink" title="模块管理规范"></a>模块管理规范</h1><p>有了了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则在使用的时候就会出现问题。因此就有了模块规范的出现。</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>2009 年， 一名来自 Mozilla 团队的的工程师 Kevin Dangoor 开始捣鼓了一个叫 ServerJS 的项目，他是这样描述的：</p>
<blockquote>
<p>“在这里我描述的不是一个技术问题。这是一个关于大家齐心合力，做出决定向前迈进，并且开始一起建造一些更大更酷的东西的问题。”</p>
</blockquote>
<p>这个项目在 2009 年的 8 月份更名为今日我们熟悉的 CommonJS 以显示 API 更广泛的适用性。</p>
<blockquote>
<p>CommonJS 是一个旨在 Web 浏览器之外，为 JavaScript 建立模块生态系统的约定的项目。其创建的主要原因是缺乏普遍接受的 JavaScript 脚本模块单元形式，而这一形式可以让 JavaScript 在不同于传统网络浏览器提供的环境中重复使用。</p>
</blockquote>
<p>同在 2009 年，美国程序员 Ryan Dahl 创造了 Node.js 项目，将 JavaScript 语言用于服务器端编程。</p>
<p>在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p>
<p><code>Node.js 的模块系统，就是参照 CommonJS 规范实现的。</code>也是我们最为关注的 CommonJS 规范的实现。</p>
<h3 id="（1）Node-js-中的-CommonJS-规范："><a href="#（1）Node-js-中的-CommonJS-规范：" class="headerlink" title="（1）Node.js 中的 CommonJS 规范："></a>（1）Node.js 中的 CommonJS 规范：</h3><ul>
<li>一个文件就是一个模块，拥有独立的作用域</li>
<li>通过 require 加载模块</li>
<li>通过 exports 和 module.exports 来暴露模块中的内容<h3 id="（2）Node-js-中模块的使用"><a href="#（2）Node-js-中模块的使用" class="headerlink" title="（2）Node.js 中模块的使用"></a>（2）Node.js 中模块的使用</h3></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 通过 module.exports 来导出模块</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"zhang"</span>,<br>  <span class="hljs-attr">getName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);<br>  &#125;,<br>  <span class="hljs-attr">changeName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = n;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./module/index"</span>); <span class="hljs-comment">// 使用</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">module</span>); <span class="hljs-comment">//=&gt;  &#123;name: "zhang", getName: ƒ, changeName: ƒ&#125;</span><br><br><span class="hljs-comment">// 2. 通过 exports 来导出模块</span><br><span class="hljs-keyword">const</span> getParam = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">456</span>;<br><br>exports.a = a;<br>exports.b = b;<br>exports.getParam = getParam;<br><br><span class="hljs-keyword">const</span> module1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./module/index1"</span>); <span class="hljs-comment">// 使用</span><br>consoel.log(module1); <span class="hljs-comment">//=&gt; &#123;a: 123, b: 456, getParam: ƒ&#125;</span><br></code></pre></td></tr></table></figure>
<p>对比 exports 和 module.exports 的区别：</p>
<ul>
<li>当 exports 和 module.exports 同时存在的时候，module.exports 会盖过 exports  </li>
<li>当模块内部全部是 exports 的时候， 就等同于 module.exports  </li>
<li>exports  其实就是 module.exports 的子集</li>
</ul>
<p><code>CommonJS 规范不适用于浏览器环境。</code>它采用的是<code>同步加载方式</code>。这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>
<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>AMD 是 Asynchronous Module Definition 的缩写，意思就是 <code>异步模块定义</code> 。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。它是一个在浏览器端模块化开发的规范，由于不是原生支持，使用AMD规范进行页面开发需要用到对应的函数库 —— 也就是大名鼎鼎的 RequireJS，实际上 AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p>
<ul>
<li><p>RequireJS 主要解决了异步加载模块，以及文件之间的依赖问题。它具有两个核心方法：</p>
<ul>
<li>define(id, dependencies, factory)：定义模块</li>
<li>id：可选参数，模块标识，即名称。如果没有，则使用文件名作为标识</li>
<li>dependencies：可选参数，当前模块的所有依赖模块，是一个包含所有依赖模块名称的数组</li>
<li>factory：必选参数，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次，其返回值作为模块的输出值；如果是对象，此对象应该为模块的输出值。<ul>
<li>作为函数时，其参数为前置依赖模块的输出值</li>
</ul>
</li>
</ul>
</li>
<li><p>require(dependencies, callback)：引入模块</p>
<ul>
<li>dependencies：可选参数，需要加载的依赖模块名称数组</li>
<li>callback：必选参数，在模块加载完成之后执行的回调函数    <ul>
<li>其接收的参数是前置依赖模块的输出值</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义模块</span><br>define([<span class="hljs-string">'myModule'</span>],() =&gt; &#123;<br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">'Byron'</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printName</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">printName</span>:printName<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 加载模块</span><br><span class="hljs-built_in">require</span>([<span class="hljs-string">'myModule'</span>],<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">myModule</span>)</span>&#123;<br>   myModule.printName(); <span class="hljs-comment">// myModule 是定义模块时的函数返回值</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<p>在使用 RequireJS 声明一个模块时，必须指定所有的依赖项 ，这些依赖项会被当做形参传到 factory 中，对于依赖的模块会提前执行，这被称为：<code>依赖前置</code>。</p>
<p>这会导致一个问题，<code>当模块中的内容是条件执行，并不需要加载所有的依赖模块时，RequireJS 仍然会加载所有的依赖模块</code>。正是因为 RequireJS 存在这样的问题，也就导致了 CMD 的出现。</p>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>CMD 是 Common Module Definition 的缩写，意思是通用的模块定义。它实际上只是对 AMD 规范进行了一定的优化，其经典实现之一 SeaJS 的用法与 RequireJS 十分相似。</p>
<p>其主要区别在于解决 RequireJS 的依赖前置问题，CMD 推崇的是依赖就近，实际上仍然是异步加载模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// AMD 的一个例子，当然这是一种极端的情况</span><br>define([<span class="hljs-string">"header"</span>, <span class="hljs-string">"main"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">header, main, footer</span>) </span>&#123; <br>  <span class="hljs-keyword">if</span> (xxx) &#123;<br>    header.setHeader(<span class="hljs-string">'new-title'</span>)<br>  &#125;<br>  <span class="hljs-keyword">if</span> (xxx) &#123;<br>    main.setMain(<span class="hljs-string">'new-content'</span>)<br>  &#125;<br>&#125;);<br><br> <span class="hljs-comment">// 与之对应的 CMD 的写法</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require, exports, module</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (xxx) &#123;<br>    <span class="hljs-comment">// 当我想要的时候才进行模块的加载</span><br>    <span class="hljs-keyword">var</span> header = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./header'</span>)<br>    header.setHeader(<span class="hljs-string">'new-title'</span>)<br>  &#125;<br>  <span class="hljs-keyword">if</span> (xxx) &#123;<br>    <span class="hljs-keyword">var</span> main = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./main'</span>)<br>    main.setMain(<span class="hljs-string">'new-content'</span>)<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 加载模块</span><br>seajs.use([<span class="hljs-string">'myModule.js'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">my</span>)</span>&#123;<br><br>&#125;);<br></code></pre></td></tr></table></figure>
<p>factory 有三个参数：</p>
<ul>
<li>require：就是核心方法，用于在内部加载模块</li>
<li>exports：是一个对象，用来向外提供模块接口</li>
<li>module：是一个对象，上面存储了与当前模块相关联的一些属性和方法</li>
</ul>
<p>按照 CMD 规范的依赖就近的规则定义一个模块，会导致模块的加载逻辑偏重，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病 CMD 的一点。</p>
<p>CMD 的市场不大，在 ES6 Module 出现之前，社区中最主要是 CommonJS + AMD，一个用于后端，一个用于前端。</p>
<h1 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h1><p>ES6 Module 的出现，表示 JavaScript 终于有了原生的模块体系，在语言标准的层面上，实现了模块功能，而且实现得相当简单，<code>完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</code>。</p>
<blockquote>
<p>ECMAScript 6 Modules 的目标是创造一个让 CommonJS 和 AMD 用户都满意的格式</p>
</blockquote>
<p>ES6 模块的设计思想是尽量的<code>静态化</code>，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// CommonJS模块</span><br><span class="hljs-keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// 实际上等同于</span><br><span class="hljs-keyword">let</span> _fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-keyword">let</span> stat = _fs.stat;<br><span class="hljs-keyword">let</span> exists = _fs.exists;<br><span class="hljs-keyword">let</span> readfile = _fs.readfile;<br></code></pre></td></tr></table></figure>
<p>CommonJS 实质上是整体加载了 fs 模块（即加载fs的所有方法），生成一个对象，然后再从这个对象上面读取 3 个方法。这种加载称为<code>运行时加载</code>，因为只有运行时才能得到这个对象，导致完全没办法在编译时做静态优化。</p>
<p>ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过 import 命令输入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6模块</span><br><span class="hljs-keyword">import</span> &#123; stat, exists, readFile &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'fs'</span>;<br></code></pre></td></tr></table></figure>
<p>ES6 Module 实质上是从 fs 模块加载 3 个方法，其他方法不加载。这种加载称为编译时加载或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。</p>
<p>由于 ES6 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 JavaScript 的语法，比如引入宏和类型检验这些只能靠静态分析实现的功能。</p>
<p>除了静态加载带来的各种好处，ES6 模块还有以下好处：</p>
<ul>
<li>不再需要 UMD 模块格式，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点</li>
<li>将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者 navigator 对象的属性</li>
<li>不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供</li>
</ul>
<p>ES6 Module 主要由两个命令组成：</p>
<ul>
<li>export 导出模块内容</li>
<li>import 导入模块内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. export 导出</span><br><span class="hljs-comment">// 导出模块内容, xxx.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-string">'1'</span>;<br><br><span class="hljs-comment">// import 必须制定相同名称的变量进行接收</span><br><span class="hljs-keyword">import</span> &#123; a &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'xxx.js'</span><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//=&gt; 1</span><br><br><span class="hljs-comment">// 2. export default 导出</span><br><span class="hljs-comment">// 导出，只能使用一个 export default</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">var</span> b = <span class="hljs-string">'2'</span>;<br><br><span class="hljs-comment">// 导入，不需要大括号包裹</span><br><span class="hljs-keyword">import</span> b <span class="hljs-keyword">from</span> <span class="hljs-string">'xxx.js'</span>;<br><span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">//=&gt; 2</span><br><br><span class="hljs-comment">// 3. 模块的整体导入</span><br><span class="hljs-comment">// export 可以导出多个</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-string">'1'</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> b = <span class="hljs-string">'2'</span>;<br><br><span class="hljs-comment">// import 导入整体，将所有的导出都作为一个对象的属性，放入变量中</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> obj <span class="hljs-keyword">from</span> <span class="hljs-string">'xxx.js'</span>;<br><span class="hljs-built_in">console</span>.log(obj);<span class="hljs-comment">//=&gt; &#123;a: '1', b: '2'&#125;</span><br></code></pre></td></tr></table></figure>
<p>export 和 export default 的区别：</p>
<ul>
<li>export default 作为默认输出，只能使用一次，并且不能与 export 同时使用，而 export 可以在模块中多次使用</li>
<li>export 导出时必须就有名称，且在导入的时候必须使用相同的变量名来接收，并且需要使用解构的形式；而 export default 导出时可以不需要名称，导入时也不需要考虑模块内部的变量名，并且不需要大括号包裹，只需要自己定义名称进行接收即可</li>
</ul>
<p>import 也可以直接执行一个模块，而不去接收值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">"jquery"</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架实践: 集成模板搭建及线上部署</title>
    <url>/20220529-%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%9E%E8%B7%B5-%E9%9B%86%E6%88%90%E6%A8%A1%E6%9D%BF%E6%90%AD%E5%BB%BA%E5%8F%8A%E7%BA%BF%E4%B8%8A%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>bin目录下创建zh-cli.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">#!/usr/bin/env node //让系统动态的去查找node来执行你的脚本文件</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello zh-cli'</span>)<br></code></pre></td></tr></table></figure>
<p>执行<code>node bin/zh-cli.js</code>，即可输出</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220527214905927" style="zoom:50%;"></p>
<p>配置下package.json的bin：<br><a id="more"></a></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs json">"bin": &#123;<br>  "zhcli": "bin/zh-cli.js"<br>&#125;<br></code></pre></td></tr></table></figure>
<p>本地<code>npm link</code> , 即可执行<code>zhcli</code> , 等价于<code>node bin/zh-cli.js</code>。</p>
<blockquote>
<p>==npm是如何识别并执行对应的文件?==</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">阮一峰：Npm Scripts 使用指南</a></p>
</blockquote>
<h4 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h4><p>Nodejs 命令行解决方案。</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> program = <span class="hljs-built_in">require</span>(<span class="hljs-string">"commander"</span>);<br>program.command().parse(process.argv);<br></code></pre></td></tr></table></figure>
<h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><h6 id="command"><a href="#command" class="headerlink" title=".command()"></a>.command()</h6><p><code>.command()</code>的第一个参数为命令名称。命令参数可以跟在名称后面，也可以用<code>.argument()</code>单独指定。参数可为必选的（尖括号表示）、可选的（方括号表示）或变长参数（点号表示，如果使用，只能是最后一个参数）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">program<br>  .command(<span class="hljs-string">'clone &lt;source&gt; [destination]'</span>)<br>  .description(<span class="hljs-string">'clone a repository into a newly created directory'</span>)<br>  .action(<span class="hljs-function">(<span class="hljs-params">source, destination</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'clone command called'</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure>
<h6 id="parse-params-params"><a href="#parse-params-params" class="headerlink" title=".parse(params, [params])"></a>.parse(params, [params])</h6><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">program.parse(process.argv); <span class="hljs-comment">// 指明，按 node 约定</span><br>program.parse(); <span class="hljs-comment">// 默认，自动识别 electron</span><br>program.parse([<span class="hljs-string">'-f'</span>, <span class="hljs-string">'filename'</span>], &#123; <span class="hljs-attr">from</span>: <span class="hljs-string">'user'</span> &#125;);<br></code></pre></td></tr></table></figure>
<p>新增node命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">program<br>  .command(<span class="hljs-string">'add'</span>)<br>  .description(<span class="hljs-string">'add a new template'</span>)<br>  .action(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;)<br>program.parse(process.argv);<br></code></pre></td></tr></table></figure>
<p>终端输入<code>zhcli -h</code>，可以查看新增的命令及注释。</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220527222335168" style="zoom:50%;"></p>
<p>通过commander对用户输入的参数进行解析，只接受一个参数，多余的参数不处理。然后对用户输入的projectName进行处理。</p>
<p>入口文件<code>zh-cli.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">#!/usr/bin/env node</span><br><span class="hljs-keyword">const</span> program = <span class="hljs-built_in">require</span>(<span class="hljs-string">"commander"</span>);<br><span class="hljs-keyword">const</span> minimist = <span class="hljs-built_in">require</span>(<span class="hljs-string">"minimist"</span>);<br><span class="hljs-keyword">const</span> chalk = <span class="hljs-built_in">require</span>(<span class="hljs-string">"chalk"</span>);<br><br>program<br>  .command(<span class="hljs-string">"create &lt;app-name&gt;"</span>)<br>  .description(<span class="hljs-string">"您正在使用zh-cli脚手架创建工程"</span>)<br>  .action(<span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (minimist(process.argv.slice(<span class="hljs-number">3</span>))._.length &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<br>        chalk.yellow(<span class="hljs-string">"\n Info: 只会取第一个参数作为项目名称，其他参数忽略"</span>)<br>      );<br>    &#125;<br>  	<span class="hljs-comment">// todo 执行创建命令：createProjectByName()</span><br>  &#125;);<br><br>program.parse(process.argv);<br></code></pre></td></tr></table></figure>
<h3 id="校验输入的projectName"><a href="#校验输入的projectName" class="headerlink" title="校验输入的projectName"></a>校验输入的<code>projectName</code></h3><h4 id="validate-npm-package-name"><a href="#validate-npm-package-name" class="headerlink" title="validate-npm-package-name"></a>validate-npm-package-name</h4><p>检验字符串是否是一个有效的包命名。</p>
<h5 id="包命名规则"><a href="#包命名规则" class="headerlink" title="包命名规则"></a><a href="https://juejin.cn/post/7012047954995314701" target="_blank" rel="noopener">包命名规则</a></h5><ul>
<li><p>包名不能是空字符串；</p>
</li>
<li><p>所有的字符串必须小写；</p>
</li>
<li><p>可以包含 连字符 - ；</p>
</li>
<li><p>包名不得包含任何非 url 安全字符；</p>
</li>
<li><p>包名不得以 . 或者 _ 开头;</p>
</li>
<li><p>包名首尾不得包含空格；</p>
</li>
<li><p>包名不得包含 <strong>~)(‘!*</strong> 任意一个字符串;</p>
</li>
<li><p>包名不得与node.js/io.js 的核心模块 或者 保留名 以及 黑名单相同；</p>
</li>
<li><p>包名的长度不得超过 214；</p>
</li>
</ul>
<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> validateProjectName = <span class="hljs-built_in">require</span>(<span class="hljs-string">"validate-npm-package-name"</span>)<br><br><span class="hljs-keyword">const</span> result = validateProjectName(name);<br><span class="hljs-keyword">if</span> (!result.validForNewPackages) &#123;<br>  <span class="hljs-built_in">console</span>.error(chalk.red(<span class="hljs-string">`非法项目名称: "<span class="hljs-subst">$&#123;name&#125;</span>"`</span>));<br>  result.errors &amp;&amp;<br>    result.errors.forEach(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.error(chalk.red.dim(<span class="hljs-string">"Error: "</span> + err));<br>  &#125;);<br>  result.warnings &amp;&amp;<br>    result.warnings.forEach(<span class="hljs-function">(<span class="hljs-params">warn</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.error(chalk.red.dim(<span class="hljs-string">"Warning: "</span> + warn));<br>  &#125;);<br>  exit(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="命令行交互"><a href="#命令行交互" class="headerlink" title="命令行交互"></a>命令行交互</h3><h4 id="我们的需求"><a href="#我们的需求" class="headerlink" title="我们的需求"></a>我们的需求</h4><p>我们需要提供几套模板给用户选择，比如：</p>
<ul>
<li>纯前端工程（CSR模式，不带node）</li>
<li>hobber + React前端模板</li>
<li>SSR工程</li>
<li>…</li>
</ul>
<p>我们需要指定提示并获取用户输入的内容，比如：</p>
<ul>
<li>项目描述</li>
<li>初始化版本号</li>
<li>是否自动安装依赖</li>
<li>前端默认端口</li>
<li>PC端还是移动端</li>
<li>…</li>
</ul>
<p>了解了我们的需求，==inquirer==可以满足我们的需求。</p>
<h4 id="inquirer：命令行交互问询。"><a href="#inquirer：命令行交互问询。" class="headerlink" title="inquirer：命令行交互问询。"></a><a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a>：命令行交互问询。</h4><h5 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h5><h6 id="inquirer-prompt-questions-answers-gt-promise"><a href="#inquirer-prompt-questions-answers-gt-promise" class="headerlink" title="inquirer.prompt(questions, answers) -&gt; promise"></a><code>inquirer.prompt(questions, answers) -&gt; promise</code></h6><p>启动提示接口。</p>
<p><strong>questions</strong>(Array): <a href="https://www.npmjs.com/package/inquirer#question" target="_blank" rel="noopener">Question Object</a></p>
<p><strong>answers</strong>(Object)</p>
<p><strong>Question Object</strong>:</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528105350735" style="zoom:50%;"></p>
<h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">'inquirer'</span>);<br>inquirer<br>  .prompt([<br>    <span class="hljs-comment">/* Pass your questions in here */</span><br>  ])<br>  .then(<span class="hljs-function">(<span class="hljs-params">answers</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// Use user feedback for... whatever!!</span><br>  &#125;)<br>  .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error.isTtyError) &#123;<br>      <span class="hljs-comment">// Prompt couldn't be rendered in the current environment</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// Something else went wrong</span><br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure>
<p>执行结果如图所示:</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528135956543" style="zoom:50%;"></p>
<h4 id="预置模板-amp-收集信息"><a href="#预置模板-amp-收集信息" class="headerlink" title="预置模板 &amp; 收集信息"></a>预置模板 &amp; 收集信息</h4><p>我们先创建一个template的json串：==templatePreset.js==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">"React client template"</span>,<br>    <span class="hljs-attr">gitDirs</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">"React CSR 模板"</span>,<br>        <span class="hljs-attr">git</span>: <span class="hljs-string">"https://github.com/houchaowei/react-template-client.git"</span>,<br>        <span class="hljs-attr">gitSsh</span>: <span class="hljs-string">"git@github.com:houchaowei/react-template-client.git"</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">"React server template"</span>,<br>    <span class="hljs-attr">gitDirs</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">"React SSR 模板"</span>,<br>        <span class="hljs-attr">git</span>: <span class="hljs-string">"https://github.com/houchaowei/react-template-server.git"</span>,<br>        <span class="hljs-attr">gitSsh</span>: <span class="hljs-string">"git@github.com:houchaowei/react-template-server.git"</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure>
<p>当选择了CSR或者SSR之后，提供meta设置，通过==inquirer.prompt==用户输入提前预置的问题，并收集用户输入的所有answer，==meta.js==：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> prompts = [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">"version"</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">"string"</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">"Initial version of the project"</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">"0.0.1"</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">"description"</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">"string"</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">"project description"</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">"description"</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">"needInstall"</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">"string"</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">"auto install dependencies?[Y/N]"</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">"N"</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">"isMobileTemplate"</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">"list"</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">"组件库是pc端还是移动端？"</span>,<br>      <span class="hljs-attr">choices</span>: [<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">"pc端"</span>,<br>          <span class="hljs-attr">value</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">short</span>: <span class="hljs-literal">false</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">"移动端"</span>,<br>          <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">short</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      ],<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">"reactFePort"</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">"string"</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">"前端默认端口[7001]"</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">"7001"</span>,<br>    &#125;,<br>  ];<br>  <span class="hljs-keyword">return</span> &#123;<br>    prompts,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>当用户输入完信息之后，需要对用户的输入信息进行收集:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 收集meta问题用户的answer</span><br><span class="hljs-keyword">const</span> globalPromptsAnswers = <span class="hljs-keyword">await</span> inquirer.prompt(<br>  meta().prompts<br>);<br></code></pre></td></tr></table></figure>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528141403845" style="zoom:50%;"></p>
<p>于此同时，需要去clone已经提前预置好的模板，我们内置了两套模板仓库，分别为CSR和SSR的模板。在==templatePreset.js==里已经内置了仓库地址。</p>
<h4 id="Clone-模板到本地缓存"><a href="#Clone-模板到本地缓存" class="headerlink" title="Clone 模板到本地缓存"></a>Clone 模板到本地缓存</h4><p>clone的方式分为https和ssh，这里我们也提供两套clone方式去使用。</p>
<h5 id="https-download-git-repo"><a href="#https-download-git-repo" class="headerlink" title="https: download-git-repo"></a>https: download-git-repo</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">download(<span class="hljs-string">`direct:<span class="hljs-subst">$&#123;gitDir.git&#125;</span>`</span>, tmpdir, &#123;<span class="hljs-attr">clone</span>: <span class="hljs-literal">true</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure>
<ul>
<li>注意事项，默认是master分支，非master分支：direct:${gitDir.git}/#${branchName}</li>
</ul>
<h5 id="ssh-child-process-spawn"><a href="#ssh-child-process-spawn" class="headerlink" title="ssh: child_process.spawn()"></a>ssh: <a href="http://nodejs.cn/api/child_process.html#child_processspawncommand-args-options" target="_blank" rel="noopener">child_process.spawn()</a></h5><h6 id="child-process-spawn-command-args-options"><a href="#child-process-spawn-command-args-options" class="headerlink" title="child_process.spawn(command[, args][, options])"></a><code>child_process.spawn(command[, args][, options])</code></h6><p>为什么要用到child_process.spawn？</p>
<p>我们当前运行的命令是我们执行的主进程，不可被打断。如果我们要clone提前预置的仓库模板且不影响主进程，通过child_process开启子进程去运行clone命令。创建一个shell，然后在shell里执行命令。执行完成后，将stdout、stderr作为参数传入回调方法。</p>
<p>参数说明：</p>
<p><img data-src="image-20220528161244379.png" alt="image-20220528161244379"></p>
<p>包装runCommand方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runCommand</span>(<span class="hljs-params">cmd, args, options</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> spwan = spawn(cmd, args, &#123;<br>      <span class="hljs-attr">cwd</span>: process.cwd(),<br>      <span class="hljs-attr">stdio</span>: <span class="hljs-string">"inherit"</span>,<br>      <span class="hljs-attr">shell</span>: <span class="hljs-literal">true</span>,<br>      ...options,<br>    &#125;);<br><br>    spwan.on(<span class="hljs-string">"exit"</span>, () =&gt; &#123;<br>      resolve();<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>对clone的过程进行一个内容的输出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">exports.gitClone = <span class="hljs-function">(<span class="hljs-params">&#123; cwd, gitSSH, tmpName &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`\n\n# <span class="hljs-subst">$&#123;chalk.green(<span class="hljs-string">"tmp路径："</span> + cwd)&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`# <span class="hljs-subst">$&#123;chalk.green(<span class="hljs-string">"正在clone '"</span> + tmpName + <span class="hljs-string">"' 模板 ..."</span>)&#125;</span>`</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"# ========================\n"</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(gitSSH));<br>  <span class="hljs-keyword">return</span> runCommand(<span class="hljs-string">"git"</span>, [<span class="hljs-string">`clone <span class="hljs-subst">$&#123;gitSSH&#125;</span>`</span>], &#123; cwd &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>执行clone的命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> tmpdir = path.join(path.join(os.tmpdir(), <span class="hljs-string">"zhcli-presets-temp"</span>), presetName);<br><br><span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  gitClone(&#123;<br>    <span class="hljs-attr">cwd</span>: tmpdir,<br>    <span class="hljs-attr">gitSSH</span>: gitDir.gitSsh,<br>    <span class="hljs-attr">tmpName</span>: gitDir.name,<br>  &#125;)<br>    .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(chalk.green(<span class="hljs-string">'模板仓库克隆成功'</span>))<br>    resolve();<br>  &#125;)<br>    .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    error(err);<br>    exit(<span class="hljs-number">1</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>
<p>==os.tmpdir()==: 远程模板仓库clone成功后，暂存到本机的缓存目录里。</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528211922062" style="zoom:50%;"></p>
<p>在缓存目录下可以看到模板仓库：</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528212157517" style="zoom:50%;"></p>
<p>走到这一步已经能拿到的信息有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">answers</span>: &#123;<br>    <span class="hljs-attr">name</span>: appName <span class="hljs-comment">// 用户创建时的app name</span><br>  &#125;,<br>  <span class="hljs-attr">tmpdir</span>: fullname, <span class="hljs-comment">// 模板clone的缓存目录全路径</span><br>  <span class="hljs-attr">gitDir</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">"React CSR 模板"</span>, <span class="hljs-comment">// 模板名称</span><br>    <span class="hljs-attr">git</span>: <span class="hljs-string">"https://github.com/xx/react-redux-tutorial.git"</span>, <span class="hljs-comment">// git https地址</span><br>    <span class="hljs-attr">gitSsh</span>: <span class="hljs-string">"git@github.com:xx/react-redux-tutorial.git"</span>, <span class="hljs-comment">// git ssh地址</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>
<p>下一步就是生成模板文件，如果只是个人使用的，就直接生成模板文件就可以了，如果是涉及到公司的流水线部署时，这里会涉及到集成CI/CD的一个流程，后面会以阿里云服务器为例进行讲解。</p>
<h4 id="generator-file"><a href="#generator-file" class="headerlink" title="generator file"></a>generator file</h4><p>根据tmpdir的缓存模板目录，通过fs对文件进行递归遍历，拿到每一个目录下的所有的文件。</p>
<p>代码参考：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileList</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> list = [];<br>  <span class="hljs-keyword">const</span> arr = fs.readdirSync(dir);<br>  <span class="hljs-keyword">try</span> &#123;<br>    arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> fullpath = path.join(dir, item);<br>      <span class="hljs-keyword">const</span> stats = fs.statSync(fullpath);<br>      <span class="hljs-keyword">if</span> (stats.isDirectory()) &#123;<br>        list.push(...getFileList(fullpath));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        list.push(fullpath);<br>      &#125;<br>    &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'获取文件目录error：'</span>, chalk.red(error))<br>  &#125;<br>  <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>对拿到的fileList通过async.each()进行异步遍历，用fs.readFileSync()拿到每一个文件的内容进行写操作。其中对每个文件的lastIndexOf(“/“)执行fs.mkdif()建立文件夹，绝对路径执行fs.writeFile()写操作。</p>
<p>其中基于当前主进程的路径组合绝对路径：当前路径 + appName + 每一个文件的相对路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = path.join(process.cwd(), appName, relativePath);<br></code></pre></td></tr></table></figure>
<p>关键代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**<br> * 写文件<br> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>param0 <br> * <span class="hljs-doctag">@returns </span><br> */</span><br><span class="hljs-keyword">var</span> writeFileRecursive = <span class="hljs-function">(<span class="hljs-params">_path, buffer, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> lastPath = _path.substring(<span class="hljs-number">0</span>, _path.lastIndexOf(<span class="hljs-string">"/"</span>));<br>  fs.mkdir(lastPath, &#123;<br>    <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span><br>  &#125;, (err) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);<br>    fs.writeFile(_path, buffer, (_err) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (_err) <span class="hljs-keyword">return</span> callback(_err);<br>      <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>);<br>    &#125;);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeFiles</span>(<span class="hljs-params">&#123;<br>  fileObjArray,<br>  answers,<br>  tmpdir<br>&#125;</span>) </span>&#123;<br>  <span class="hljs-comment">// fileObjArray 包含os.tmpdir中使用handleBar替换过的git项目的全部路径和文件内容</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">async</span>.each(<br>      fileObjArray,<br>      (fileObj, next) =&gt; &#123;<br>        <span class="hljs-keyword">let</span> rp = getRelativePath(fileObj.file, tmpdir);<br>        <span class="hljs-keyword">if</span> (rp === <span class="hljs-string">"gitignore"</span>) &#123;<br>          rp = <span class="hljs-string">`.<span class="hljs-subst">$&#123;rp&#125;</span>`</span>;<br>        &#125;<br>        <span class="hljs-comment">// 基于当前主进程的路径组合绝对路径：当前路径 + appName + 每一个文件的相对路径</span><br>        rp = path.join(process.cwd(), answers.name, rp);<br><br>        writeFileRecursive(rp, fileObj.contents, () =&gt; &#123;<br>          next();<br>        &#125;);<br>      &#125;,<br>      resolve<br>    );<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = (&#123;<br>  tmpdir,<br>  answers,<br>&#125;) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    renderTemplateFiles(&#123;<br>        tmpdir,<br>        answers,<br>      &#125;)<br>      .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log('result', res);</span><br>        writeFiles(&#123;<br>            <span class="hljs-attr">fileObjArray</span>: res.fileObjArray,<br>            <span class="hljs-attr">answers</span>: res.answers,<br>            tmpdir,<br>          &#125;)<br>          .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            resolve();<br>          &#125;)<br>          .catch(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            reject();<br>          &#125;);<br>      &#125;)<br>      .catch(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        reject();<br>      &#125;);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>至此，缓存模板写入当前路径文件已完成。</p>
<p>相关知识点：模板引擎替换<a href="https://www.tabnine.com/code/javascript/functions/consolidate/Consolidate/handlebars" target="_blank" rel="noopener">https://www.tabnine.com/code/javascript/functions/consolidate/Consolidate/handlebars</a></p>
<p>gif图实现效果图：</p>
<p><img data-src="demo.gif" alt="demo"></p>
<h3 id="阿里云ecs申请购买服务器，安装nginx服务，配置安全组，开启80端口。"><a href="#阿里云ecs申请购买服务器，安装nginx服务，配置安全组，开启80端口。" class="headerlink" title="阿里云ecs申请购买服务器，安装nginx服务，配置安全组，开启80端口。"></a>阿里云ecs申请购买服务器，安装nginx服务，配置安全组，开启80端口。</h3><p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528230130324" style="zoom:50%;"></p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528230103891" style="zoom:50%;"></p>
<p>访问线上地址：</p>
<p><img data-src="image-20220528230416958.png" alt="image-20220528230416958"></p>
<p>在本地启动demo项目</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm run start<br></code></pre></td></tr></table></figure>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220528235808993" style="zoom:50%;"></p>
<p>修改其中一行代码：</p>
<p><img data-src="image-20220528235924553.png" alt="image-20220528235924553"></p>
<p>package.json中配置的script命令：</p>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220529000018425" style="zoom:50%;"></p>
<blockquote>
<p>build命令和deploy.sh发线上部署脚本都已经内置在脚手架中，创建新项目的时候，会一并附带来，将部署脚本集成到脚手架，且脚手架可能只多套脚本。</p>
</blockquote>
<p>发版和部署：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm run build<br></code></pre></td></tr></table></figure>
<p><img data-src="/20220529-脚手架实践-集成模板搭建及线上部署/undefined" alt="image-20220529000333623" style="zoom:50%;"></p>
<p>刷新线上地址：</p>
<p><img data-src="image-20220529000500833.png" alt="image-20220529000500833"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>H5</tag>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>课程资料</title>
    <url>/20190127-%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<h2 id="课程资料json数据"><a href="#课程资料json数据" class="headerlink" title="课程资料json数据"></a>课程资料json数据</h2><a id="more"></a>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs undefined">[<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：c4a5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1u-rs2NfSQX84TpHX5dQFKA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：微服务架构的分布式事务解决方案"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1u-rs2NfSQX84TpHX5dQFKA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1u-rs2NfSQX84TpHX5dQFKA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：微服务架构的分布式事务解决方案"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：q3rb"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18kVwJyvqWCgwLo0JDYNrSQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：面向服务体系架构 + JAX + Dubbo + Zookeeper"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18kVwJyvqWCgwLo0JDYNrSQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18kVwJyvqWCgwLo0JDYNrSQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：面向服务体系架构 + JAX + Dubbo + Zookeeper"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：wp09"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1aG9ngich9IhYyf30qFd-CA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：从天气看SpringCloud 微服务项目"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1aG9ngich9IhYyf30qFd-CA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1aG9ngich9IhYyf30qFd-CA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：从天气看SpringCloud 微服务项目"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2cwx"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1dESMetPhGkmFjem-sxC9MA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：SpringCloud 微服务大型电商架构亿级流量电商详情页系统实战-缓存架构+高可用服务架构+微服务架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1dESMetPhGkmFjem-sxC9MA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1dESMetPhGkmFjem-sxC9MA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：SpringCloud 微服务大型电商架构亿级流量电商详情页系统实战-缓存架构+高可用服务架构+微服务架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：sfsu"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-mcjvrtKQEs6eHG2kpFyQw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：SpringCloud 尚硅谷视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-mcjvrtKQEs6eHG2kpFyQw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-mcjvrtKQEs6eHG2kpFyQw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：SpringCloud 尚硅谷视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：t67k"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/10vlwK2iwqm0voeH16r3WsQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：SpringCloud 零基础入门与微服务教程2018年4月"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/10vlwK2iwqm0voeH16r3WsQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/10vlwK2iwqm0voeH16r3WsQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：SpringCloud 零基础入门与微服务教程2018年4月"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：3jx3"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1BA9_E-w2PAg5F-8zC68dEA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：SpringCloud +SpringBoot+docker全套视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1BA9_E-w2PAg5F-8zC68dEA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1BA9_E-w2PAg5F-8zC68dEA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：SpringCloud +SpringBoot+docker全套视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：l0vb"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XUzXQQpZoYKHp6pa2uLEIg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：Spring Cloud 微服务实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XUzXQQpZoYKHp6pa2uLEIg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XUzXQQpZoYKHp6pa2uLEIg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：Spring Cloud 微服务实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：yzkl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1pQN_WkoItYma_iye8zQ8zg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"微服务：Java深入微服务原理改造房产销售平台"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1pQN_WkoItYma_iye8zQ8zg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1pQN_WkoItYma_iye8zQ8zg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"微服务：Java深入微服务原理改造房产销售平台"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：p0su"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1g3r-P7FD0ADN9-5gfxumRg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"算法：学习算法思想，修炼编程内功"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1g3r-P7FD0ADN9-5gfxumRg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1g3r-P7FD0ADN9-5gfxumRg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"算法：学习算法思想，修炼编程内功"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：obgi"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HwkU77lN9XhYrVG0aLRLpw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"算法：玩转算法面试 从真题到思维全面提升算法思维"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HwkU77lN9XhYrVG0aLRLpw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HwkU77lN9XhYrVG0aLRLpw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"算法：玩转算法面试 从真题到思维全面提升算法思维"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：yav2\n"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1CrqhbJ7xvnU3vOsD7vw7xQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"算法：玩转数据结构 从入门到进阶"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1CrqhbJ7xvnU3vOsD7vw7xQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1CrqhbJ7xvnU3vOsD7vw7xQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"算法：玩转数据结构 从入门到进阶"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：oi5u"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/11eYh4u63B_aOxYIxmVR7eA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"算法：看得见的算法 7个经典应用诠释算法精髓"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/11eYh4u63B_aOxYIxmVR7eA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/11eYh4u63B_aOxYIxmVR7eA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"算法：看得见的算法 7个经典应用诠释算法精髓"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：kisp"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Zl9o-hX8rkNnssHDkpgjPQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"算法：进阶班第4期课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Zl9o-hX8rkNnssHDkpgjPQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Zl9o-hX8rkNnssHDkpgjPQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"算法：进阶班第4期课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：o0nt"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DjgYknblJpjpLRHYqiuJuw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"算法：初级班第4期课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DjgYknblJpjpLRHYqiuJuw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DjgYknblJpjpLRHYqiuJuw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"算法：初级班第4期课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7agz"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1j4b-4K1-PwX9WT_x7T5s8A"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：最新大型分步式项目实战redis+solr+linux+springmvc+mybatis"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1j4b-4K1-PwX9WT_x7T5s8A"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1j4b-4K1-PwX9WT_x7T5s8A"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：最新大型分步式项目实战redis+solr+linux+springmvc+mybatis"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：a6hu"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1hDVt_KStIQgeZWPfLxxNAQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：亿级流量电商详情页系统实战（第二版）：缓存架构+高可用服务架构+微服务架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1hDVt_KStIQgeZWPfLxxNAQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1hDVt_KStIQgeZWPfLxxNAQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：亿级流量电商详情页系统实战（第二版）：缓存架构+高可用服务架构+微服务架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：y9xt"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WlR7LSsXs6SOm-TGq-zr1A"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：亿级流量电商详情页系统的大型高并发与高可用缓存架构实战 一"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WlR7LSsXs6SOm-TGq-zr1A"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WlR7LSsXs6SOm-TGq-zr1A"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：亿级流量电商详情页系统的大型高并发与高可用缓存架构实战 一"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：vmqq"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1C2qo6WgbUYXt9vrBe3t6UA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：亿级流量电商详情页系统的大型高并发与高可用缓存架构实战 二"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1C2qo6WgbUYXt9vrBe3t6UA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1C2qo6WgbUYXt9vrBe3t6UA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：亿级流量电商详情页系统的大型高并发与高可用缓存架构实战 二"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：vltd"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Dr5Kp11ZmM_0x7yKq6o6dA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：徐老师大数据培训Hadoop+HBase+ZooKeeper+Spark+Kafka+Scala+Ambari"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Dr5Kp11ZmM_0x7yKq6o6dA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Dr5Kp11ZmM_0x7yKq6o6dA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：徐老师大数据培训Hadoop+HBase+ZooKeeper+Spark+Kafka+Scala+Ambari"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：upcc"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1OBrDTAsYyxsR-PBDAJfBiA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：手把手从零打造企业级电商平台-前端"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1OBrDTAsYyxsR-PBDAJfBiA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1OBrDTAsYyxsR-PBDAJfBiA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：手把手从零打造企业级电商平台-前端"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7i33"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yBTlo92tOnhMvZqgcpIHWg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：企业级大型监控系统zabbix深入介绍 分集 53课"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yBTlo92tOnhMvZqgcpIHWg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yBTlo92tOnhMvZqgcpIHWg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：企业级大型监控系统zabbix深入介绍 分集 53课"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：uqfu"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cU2v5HVwQryuiPXxMxeADA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：秒杀系统企业级实战应用"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cU2v5HVwQryuiPXxMxeADA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cU2v5HVwQryuiPXxMxeADA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：秒杀系统企业级实战应用"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：z6y4"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1whwYOiAR4RRZeRW2r7ZPTQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：架构技术之keepalived高可用和Nginx负载均衡实战案例视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1whwYOiAR4RRZeRW2r7ZPTQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1whwYOiAR4RRZeRW2r7ZPTQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：架构技术之keepalived高可用和Nginx负载均衡实战案例视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：74ue"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1dD1eQPGTwCs4bJPgwBjALQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：基于Storm+Kafka+Zookeeper锁+Memcached+mysql架构全方位系统Storm项目案例实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1dD1eQPGTwCs4bJPgwBjALQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1dD1eQPGTwCs4bJPgwBjALQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：基于Storm+Kafka+Zookeeper锁+Memcached+mysql架构全方位系统Storm项目案例实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：z91b"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fA553eSEzG4bELCG5XnuSA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：基于Dubbo分布式系统架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fA553eSEzG4bELCG5XnuSA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fA553eSEzG4bELCG5XnuSA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：基于Dubbo分布式系统架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：exbf"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/184o9KUFo9-3aNolnOm8EHQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：高级系统架构设计师视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/184o9KUFo9-3aNolnOm8EHQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/184o9KUFo9-3aNolnOm8EHQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：高级系统架构设计师视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：j6hk"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1RMWgMR_cQLnuchRj_8g8mw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：分布式消息系统与Flume整合kafka集成"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1RMWgMR_cQLnuchRj_8g8mw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1RMWgMR_cQLnuchRj_8g8mw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：分布式消息系统与Flume整合kafka集成"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：qgoy"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1TpW41bVWkB6KmKDVAk6Yhg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：分布式事务实践 解决数据一致性"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1TpW41bVWkB6KmKDVAk6Yhg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1TpW41bVWkB6KmKDVAk6Yhg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：分布式事务实践 解决数据一致性"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：w84x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1d5-tu7QjB5srRxaSj5Zicg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：单点登陆基础到实战（jkxy）"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1d5-tu7QjB5srRxaSj5Zicg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1d5-tu7QjB5srRxaSj5Zicg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：单点登陆基础到实战（jkxy）"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2193"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18H1DHVb4gpUpMORHXiX9uQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：大型分布式架构课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18H1DHVb4gpUpMORHXiX9uQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18H1DHVb4gpUpMORHXiX9uQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：大型分布式架构课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：9km2"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_h0i5iUpfkJzWPIm6YeBtw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：大数据实时流统计实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_h0i5iUpfkJzWPIm6YeBtw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_h0i5iUpfkJzWPIm6YeBtw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：大数据实时流统计实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：fd58"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YSMOwdnWENlnY9dLwqLvkA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：大数据技术推荐系统算法案例实战视频教程（mahout,spark）附完整资料数据软件环境 84课"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YSMOwdnWENlnY9dLwqLvkA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YSMOwdnWENlnY9dLwqLvkA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：大数据技术推荐系统算法案例实战视频教程（mahout,spark）附完整资料数据软件环境 84课"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：bqyl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1jNYmRl6vlCVZimha-Y_x0Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：从无到有搭建中小型互联网公司后台服务架构与运维架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1jNYmRl6vlCVZimha-Y_x0Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1jNYmRl6vlCVZimha-Y_x0Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：从无到有搭建中小型互联网公司后台服务架构与运维架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：yy9p"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kKa6qwtb2S4NuRgdNwcylQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：从零开始学架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kKa6qwtb2S4NuRgdNwcylQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kKa6qwtb2S4NuRgdNwcylQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：从零开始学架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：yq3r"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kHDFZifgv_zkXHBkHNLVbQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：SpringBoot金融项目实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kHDFZifgv_zkXHBkHNLVbQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kHDFZifgv_zkXHBkHNLVbQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：SpringBoot金融项目实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：zi1s"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JMfgDkC9Ca2bErqZhLqWCg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：SpringBoot互联网架构平台实战与运维架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JMfgDkC9Ca2bErqZhLqWCg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JMfgDkC9Ca2bErqZhLqWCg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：SpringBoot互联网架构平台实战与运维架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：sjk1"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mstvGr2ERlf2MCAEZ3Rfaw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：Java秒杀系统方案优化 高性能高并发实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mstvGr2ERlf2MCAEZ3Rfaw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mstvGr2ERlf2MCAEZ3Rfaw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：Java秒杀系统方案优化 高性能高并发实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：orqy"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FANE0_0VxaWr809sMz05SQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：Java从零到企业级电商项目实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FANE0_0VxaWr809sMz05SQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FANE0_0VxaWr809sMz05SQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：Java从零到企业级电商项目实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ahvp"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1KS-FMjxONMKu1xtGeuBhOQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：Java并发编程与高并发解决方案"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1KS-FMjxONMKu1xtGeuBhOQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1KS-FMjxONMKu1xtGeuBhOQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：Java并发编程与高并发解决方案"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：y20p"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1waSJ5oJlL4vvKq4ic0NyEw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"架构：Apache Strom+Zookeeper集群技术实战 Strom理论实战结合视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1waSJ5oJlL4vvKq4ic0NyEw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1waSJ5oJlL4vvKq4ic0NyEw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"架构：Apache Strom+Zookeeper集群技术实战 Strom理论实战结合视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：9zeo"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18BNb4QKJhw1SJSdXg8t8iw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：Python小象学院机器学习"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18BNb4QKJhw1SJSdXg8t8iw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18BNb4QKJhw1SJSdXg8t8iw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：Python小象学院机器学习"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ovoh"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1PQXPUXwbSRuDBlhnFlnO1w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：Python数据分析与机器学习实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1PQXPUXwbSRuDBlhnFlnO1w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1PQXPUXwbSRuDBlhnFlnO1w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：Python数据分析与机器学习实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：3b6b"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JnxetbN6wINkWcZpxpaJfg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：Python视频教程量化投资与机器学习实战课程高频交易组合投资源码"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JnxetbN6wINkWcZpxpaJfg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JnxetbN6wINkWcZpxpaJfg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：Python视频教程量化投资与机器学习实战课程高频交易组合投资源码"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：os4m"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JgXy9P85_KEEBcKoZRMgFQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：Python3 入门机器学习经典算法与应用"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JgXy9P85_KEEBcKoZRMgFQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JgXy9P85_KEEBcKoZRMgFQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：Python3 入门机器学习经典算法与应用"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：g9os"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Obk4cEMLq5_UtB5zQ5ZbDA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：Python3 入门机器学习 经典算法与应用"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Obk4cEMLq5_UtB5zQ5ZbDA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Obk4cEMLq5_UtB5zQ5ZbDA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：Python3 入门机器学习 经典算法与应用"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ulgn"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1RnOLcQRloSArUixiy2zkjQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：2018北风网人工智能(完结)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1RnOLcQRloSArUixiy2zkjQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1RnOLcQRloSArUixiy2zkjQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：2018北风网人工智能(完结)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：tgvy"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1tVIy7wDjyXWk0ci4m5kNng"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"机器学习：2018北风网人工智能"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1tVIy7wDjyXWk0ci4m5kNng"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1tVIy7wDjyXWk0ci4m5kNng"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"机器学习：2018北风网人工智能"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：6nof"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YfGrSfLBrdnOm4fG5_dmkg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"测试：Kali Linux渗透测试"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YfGrSfLBrdnOm4fG5_dmkg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YfGrSfLBrdnOm4fG5_dmkg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"测试：Kali Linux渗透测试"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：j1dh"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Ph-c6Azu0woBFBc2IVlsTQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"测试：JMeter 深入进阶性能测试体系 各领域企业实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Ph-c6Azu0woBFBc2IVlsTQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Ph-c6Azu0woBFBc2IVlsTQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"测试：JMeter 深入进阶性能测试体系 各领域企业实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：x760"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/15a1BXPWd3XoDwkv6ofprpw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"测试：JMete r接口测试"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/15a1BXPWd3XoDwkv6ofprpw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/15a1BXPWd3XoDwkv6ofprpw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"测试：JMete r接口测试"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：mwz5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1xPVRzdgh1rz271vslFiYLA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper 实战教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1xPVRzdgh1rz271vslFiYLA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1xPVRzdgh1rz271vslFiYLA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper 实战教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：xtec"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1E0_inLoz5kF78Gis4Ev_Ng"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper 尚硅谷大数据之ZooKeeper视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1E0_inLoz5kF78Gis4Ev_Ng"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1E0_inLoz5kF78Gis4Ev_Ng"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper 尚硅谷大数据之ZooKeeper视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7znl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1qSHaLssjZnOYK1d0LMx6Cg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper 基于ZooKeeper的分布式锁实现"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1qSHaLssjZnOYK1d0LMx6Cg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1qSHaLssjZnOYK1d0LMx6Cg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper 基于ZooKeeper的分布式锁实现"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：91ax"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1OmENF37amAiOOGwolyvtLA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper 分布式专题与Dubbo微服务入门"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1OmENF37amAiOOGwolyvtLA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1OmENF37amAiOOGwolyvtLA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper 分布式专题与Dubbo微服务入门"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：53he"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yt8q4gjyLvc82A2YWZOa4g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper 分布式系统开发实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yt8q4gjyLvc82A2YWZOa4g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yt8q4gjyLvc82A2YWZOa4g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper 分布式系统开发实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：clnk"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ehcUlRgdpLk_Xwv72BlCDA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper Spring跨机房容灾系统以及灰度发布"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ehcUlRgdpLk_Xwv72BlCDA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ehcUlRgdpLk_Xwv72BlCDA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper Spring跨机房容灾系统以及灰度发布"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：gmo7"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fot9ldB-4DAOiB8jEz6G4w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ZooKeeper 11讲实战课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fot9ldB-4DAOiB8jEz6G4w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fot9ldB-4DAOiB8jEz6G4w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ZooKeeper 11讲实战课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：n2vy"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17UsvrciDoFkgUAjSv6X3SQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 源码全方位深入解析【前7章】"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17UsvrciDoFkgUAjSv6X3SQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17UsvrciDoFkgUAjSv6X3SQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 源码全方位深入解析【前7章】"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ge0m"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XZ2qL7LINpERONXomKz14Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 向军老师Vue开发宝典"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XZ2qL7LINpERONXomKz14Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XZ2qL7LINpERONXomKz14Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 向军老师Vue开发宝典"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：q264"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1X_YoX9wPDMrvY9TNDiZnsw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 全栈技能点 Vue2.0,Node.js,MongoDB 打造商城系统"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1X_YoX9wPDMrvY9TNDiZnsw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1X_YoX9wPDMrvY9TNDiZnsw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 全栈技能点 Vue2.0,Node.js,MongoDB 打造商城系统"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：6m7z"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UeBXjD5I8vb6isbIm3zDNg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 全网首发mpvue课程小程序"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UeBXjD5I8vb6isbIm3zDNg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UeBXjD5I8vb6isbIm3zDNg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 全网首发mpvue课程小程序"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：k6m2"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/19F1Dtw775izQzWpD68WEWA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 前端面试项目冲刺，京东金融Vue组件化实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/19F1Dtw775izQzWpD68WEWA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/19F1Dtw775izQzWpD68WEWA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 前端面试项目冲刺，京东金融Vue组件化实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ny7j"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/191mM2Bj0oYkwfBfodsjB8Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 开发微信全家桶项目Vue,Node,MongoDB高级技术栈全覆盖"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/191mM2Bj0oYkwfBfodsjB8Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/191mM2Bj0oYkwfBfodsjB8Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 开发微信全家桶项目Vue,Node,MongoDB高级技术栈全覆盖"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：8k9x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1QJJOyfMZiRLgxvER7U4nhA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 高仿饿了么APP"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1QJJOyfMZiRLgxvER7U4nhA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1QJJOyfMZiRLgxvER7U4nhA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 高仿饿了么APP"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：wdt1"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1v7c925arsAEQ_fdO3ulnxQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js WebApp 书城整站开发"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1v7c925arsAEQ_fdO3ulnxQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1v7c925arsAEQ_fdO3ulnxQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js WebApp 书城整站开发"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：k8qp"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1G4cXxvBdEyqI6iFid3jW3A"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js MUI 仿豆瓣电影 APP跨平台混编框架"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1G4cXxvBdEyqI6iFid3jW3A"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1G4cXxvBdEyqI6iFid3jW3A"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js MUI 仿豆瓣电影 APP跨平台混编框架"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：oydi"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1hX77Ve0lwxkk3mx2ayhYwQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Vue.js 2.5开发去哪儿网App 从零基础入门到实战项目"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1hX77Ve0lwxkk3mx2ayhYwQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1hX77Ve0lwxkk3mx2ayhYwQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Vue.js 2.5开发去哪儿网App 从零基础入门到实战项目"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：3ayv"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_XecCUpw5TPm9EsWLJzO5g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringSecurity 开发企业级认证与授权全套视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_XecCUpw5TPm9EsWLJzO5g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_XecCUpw5TPm9EsWLJzO5g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringSecurity 开发企业级认证与授权全套视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：xogs"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1BFTGwg9kF6tNCMbQ0YgUwQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringMVC框架"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1BFTGwg9kF6tNCMbQ0YgUwQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1BFTGwg9kF6tNCMbQ0YgUwQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringMVC框架"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：j8fz"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mXAacalyRooOdm-MQEv2cA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringMVC从入门到上手工作"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mXAacalyRooOdm-MQEv2cA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringMVC从入门到上手工作"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：egpy"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YrfHkF8WGCqCo1wImNOJyA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringMVC+Spring+MyBatis+Maven整合视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YrfHkF8WGCqCo1wImNOJyA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1YrfHkF8WGCqCo1wImNOJyA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringMVC+Spring+MyBatis+Maven整合视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：whsh"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1PV_hh0GfATgBfC63hEMwRg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringMVC 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1PV_hh0GfATgBfC63hEMwRg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1PV_hh0GfATgBfC63hEMwRg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringMVC 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：51n8"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/16Jm5KYmDguU4oTznoxgHyw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringData 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/16Jm5KYmDguU4oTznoxgHyw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/16Jm5KYmDguU4oTznoxgHyw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringData 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：6xqn"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gSHnaJlCq7rPbGkMyWzkyw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"SpringBoot 技术栈博客企业前后端"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gSHnaJlCq7rPbGkMyWzkyw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gSHnaJlCq7rPbGkMyWzkyw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"SpringBoot 技术栈博客企业前后端"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：rgut"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XtmvpZQ1UhCKHIK5jXoRug"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spring 注解驱动开发"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XtmvpZQ1UhCKHIK5jXoRug"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XtmvpZQ1UhCKHIK5jXoRug"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spring 注解驱动开发"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：dy7u"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1rfW67LCXSmKuvBcIZ-C91w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spring 赵栋5天视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1rfW67LCXSmKuvBcIZ-C91w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1rfW67LCXSmKuvBcIZ-C91w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spring 赵栋5天视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：0ipo"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FdPfc9aE-bQB0N1d1mi__w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spring 源码深度解析+注解开发全套视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FdPfc9aE-bQB0N1d1mi__w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FdPfc9aE-bQB0N1d1mi__w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spring 源码深度解析+注解开发全套视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ojne"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/16E027c_O2cB7KK-982N5eg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spring 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/16E027c_O2cB7KK-982N5eg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/16E027c_O2cB7KK-982N5eg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spring 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：licm"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1t5wYXiwU-7jSUqv66JmJGg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 视频教程 陈博老师"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1t5wYXiwU-7jSUqv66JmJGg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1t5wYXiwU-7jSUqv66JmJGg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 视频教程 陈博老师"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：bb2e"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1sXDI7a8GKkkJbIppsCVvXA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 内核源码剖析、Hadoop高端 实战教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1sXDI7a8GKkkJbIppsCVvXA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1sXDI7a8GKkkJbIppsCVvXA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 内核源码剖析、Hadoop高端 实战教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：8djx"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HunWFNikdL7N3CvTBO-rtw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 大型项目实战：电商用户行为分析大数据平台"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HunWFNikdL7N3CvTBO-rtw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HunWFNikdL7N3CvTBO-rtw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 大型项目实战：电商用户行为分析大数据平台"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：msrn"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Zt1z7eK7QBNp1_OT4J6xjg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark Streaming+Kafka+Spark SQL+TopN+Mysql 电商广告点击综合案例实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Zt1z7eK7QBNp1_OT4J6xjg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Zt1z7eK7QBNp1_OT4J6xjg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark Streaming+Kafka+Spark SQL+TopN+Mysql 电商广告点击综合案例实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：45nq"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XEHM2aLYuGlHaJb1dMcchA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 9.Spark Summit"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XEHM2aLYuGlHaJb1dMcchA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XEHM2aLYuGlHaJb1dMcchA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 9.Spark Summit"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：39nx"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17zGoeeDUYthG7I3EkjR72g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 8.Spark面试宝典（数据倾斜、性能调优等）(135-147)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17zGoeeDUYthG7I3EkjR72g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 8.Spark面试宝典（数据倾斜、性能调优等）(135-147)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：15c8"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ZY9r7Jyed0MqJAUeSLeNWA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 7.Spark Streaming疯狂解密系列(125-134)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ZY9r7Jyed0MqJAUeSLeNWA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ZY9r7Jyed0MqJAUeSLeNWA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 7.Spark Streaming疯狂解密系列(125-134)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：kmpl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1uDa-As4jpv7CTWx5zpXkFg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 6.大型Spark项目性能优化系列(115-124讲)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1uDa-As4jpv7CTWx5zpXkFg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1uDa-As4jpv7CTWx5zpXkFg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 6.大型Spark项目性能优化系列(115-124讲)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ik3u"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cTDUIBo8s2XBTAJLhI7s3w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 5.Spark Streaming专家之路(82-113讲)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cTDUIBo8s2XBTAJLhI7s3w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cTDUIBo8s2XBTAJLhI7s3w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 5.Spark Streaming专家之路(82-113讲)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：zsyv"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1EtnFWTSMxJK_42OBxz5f-g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 4.Spark SQL从零起步彻底精通彻底实战(55-73讲)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1EtnFWTSMxJK_42OBxz5f-g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1EtnFWTSMxJK_42OBxz5f-g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 4.Spark SQL从零起步彻底精通彻底实战(55-73讲)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：v2ge"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1N0PACr_sWALVB6nN5B-lHw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 3.Spark性能优化(44-54讲)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1N0PACr_sWALVB6nN5B-lHw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1N0PACr_sWALVB6nN5B-lHw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 3.Spark性能优化(44-54讲)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2ffb"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Xbw_qaxUuSWriYzsqMFXBw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 2.Spark内核解密(13-43讲)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Xbw_qaxUuSWriYzsqMFXBw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Xbw_qaxUuSWriYzsqMFXBw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 2.Spark内核解密(13-43讲)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7e8v"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L3jtiDZryi9Er5e13Yuzig"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Spark 1.从0基础到调通第一个wordcount程序 (课程1-12讲)"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L3jtiDZryi9Er5e13Yuzig"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L3jtiDZryi9Er5e13Yuzig"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Spark 1.从0基础到调通第一个wordcount程序 (课程1-12讲)"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：cih7"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1lgYasWfHw8xv0A_p7ntbog"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Shiro 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1lgYasWfHw8xv0A_p7ntbog"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1lgYasWfHw8xv0A_p7ntbog"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Shiro 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：z9nz"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/14_ZvvYNmJEUoBmS4kTkNgA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 之高性能服务存储应用"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/14_ZvvYNmJEUoBmS4kTkNgA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/14_ZvvYNmJEUoBmS4kTkNgA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 之高性能服务存储应用"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：kl4x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1VQXplO0zoEvjeo6ultk4Aw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 新特性、主从复制、集群视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1VQXplO0zoEvjeo6ultk4Aw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1VQXplO0zoEvjeo6ultk4Aw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 新特性、主从复制、集群视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：mefz"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1J0nm-3EhpBSyNIG7WF9_xw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1J0nm-3EhpBSyNIG7WF9_xw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1J0nm-3EhpBSyNIG7WF9_xw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：csyp"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1j2FpeIrz489VbteBhJaYFA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 视频 02"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1j2FpeIrz489VbteBhJaYFA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1j2FpeIrz489VbteBhJaYFA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 视频 02"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：8x0j"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18wq54U7sG3lGUJ-yMdfqVQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 视频 01"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18wq54U7sG3lGUJ-yMdfqVQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/18wq54U7sG3lGUJ-yMdfqVQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 视频 01"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：0q26"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17UiZc68RgvPw2i9C_JJZlA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 缓存与性能优化 + Memcached + Redis + Nginx"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17UiZc68RgvPw2i9C_JJZlA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/17UiZc68RgvPw2i9C_JJZlA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 缓存与性能优化 + Memcached + Redis + Nginx"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：nw8v"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DD3ah34OmQ4cF8jDDhj68Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 从入门到精通、集群与应用"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DD3ah34OmQ4cF8jDDhj68Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DD3ah34OmQ4cF8jDDhj68Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 从入门到精通、集群与应用"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：rq1i"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UOsG-jtBpma11ZfyFhCDxw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 从入门到高可用 分布式实践"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UOsG-jtBpma11ZfyFhCDxw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UOsG-jtBpma11ZfyFhCDxw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 从入门到高可用 分布式实践"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：kzcn"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gcYRYLkYLT477wMR5cGQnw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Redis 持久化、集群、MySQL5.6优化、Tomcat7优化"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gcYRYLkYLT477wMR5cGQnw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gcYRYLkYLT477wMR5cGQnw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Redis 持久化、集群、MySQL5.6优化、Tomcat7优化"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2i25"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1pskMPA5jJoYfFSw8GJoL7Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"RabbitMQ 消息中间件视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1pskMPA5jJoYfFSw8GJoL7Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1pskMPA5jJoYfFSw8GJoL7Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"RabbitMQ 消息中间件视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：q7zc"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1CBKVk1RzomgfznT_HLFPXg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"RabbitMQ 消息中间件技术精讲"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1CBKVk1RzomgfznT_HLFPXg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1CBKVk1RzomgfznT_HLFPXg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"RabbitMQ 消息中间件技术精讲"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：dd7a"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1QK2kzDC5cb4nDNbJWJRL4g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"RabbitMQ 消息中间件 深入RabbitMQ集群架构"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1QK2kzDC5cb4nDNbJWJRL4g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1QK2kzDC5cb4nDNbJWJRL4g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"RabbitMQ 消息中间件 深入RabbitMQ集群架构"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：zmy7"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WgGlqGlwVYPCAXJbQBIhpw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"RabbitMQ 消息队列从入门到精通"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WgGlqGlwVYPCAXJbQBIhpw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WgGlqGlwVYPCAXJbQBIhpw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"RabbitMQ 消息队列从入门到精通"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：cnxs"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ku7b6Rj_deHmPtHde0Uo0A"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"RabbitMQ 分布式消处理"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ku7b6Rj_deHmPtHde0Uo0A"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ku7b6Rj_deHmPtHde0Uo0A"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"RabbitMQ 分布式消处理"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ap3c"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JVSevonNugvDCu0vcmXSdw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"RabbitMQ ActiveMQ RokcetMQ Kafka实战 视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JVSevonNugvDCu0vcmXSdw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JVSevonNugvDCu0vcmXSdw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"RabbitMQ ActiveMQ RokcetMQ Kafka实战 视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：oykx"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Oas09t36qfeqiQB0pwD8ig"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python3 入门与进阶"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Oas09t36qfeqiQB0pwD8ig"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Oas09t36qfeqiQB0pwD8ig"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python3 入门与进阶"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2du5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1iSRgKuqLvnDx8OONFodqTw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 中文视频教程（全38集）"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1iSRgKuqLvnDx8OONFodqTw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1iSRgKuqLvnDx8OONFodqTw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 中文视频教程（全38集）"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：upit"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1SmeW7Nuv-b1gNy46KDKyjQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 零基础入门Python数据分析师到项目实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1SmeW7Nuv-b1gNy46KDKyjQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1SmeW7Nuv-b1gNy46KDKyjQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 零基础入门Python数据分析师到项目实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：kgih"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1qPcyKXRoYku1qhZv0Jtnbg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 基础"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1qPcyKXRoYku1qhZv0Jtnbg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1qPcyKXRoYku1qhZv0Jtnbg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 基础"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：wdkc"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1SgesOsApZmldzLl3yjvwSw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 定向爬虫入门"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1SgesOsApZmldzLl3yjvwSw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1SgesOsApZmldzLl3yjvwSw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 定向爬虫入门"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：39sh"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1seVu42yxXeyv19uu-zJAug"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python Python实战全套教学视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1seVu42yxXeyv19uu-zJAug"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1seVu42yxXeyv19uu-zJAug"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python Python实战全套教学视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：0wdq"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1sgtRz_ioaQhavGy98Br84Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 大数据项目实战之Python金融应用编程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1sgtRz_ioaQhavGy98Br84Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1sgtRz_ioaQhavGy98Br84Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 大数据项目实战之Python金融应用编程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ukd9"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ELRqaMC6j63bLz63gWr2Gg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 操作三大主流库"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ELRqaMC6j63bLz63gWr2Gg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ELRqaMC6j63bLz63gWr2Gg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 操作三大主流库"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：dhax"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ftLDJsDJTLqAz3NBO1kWJQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Python 6节课掌握Python爬虫视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ftLDJsDJTLqAz3NBO1kWJQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ftLDJsDJTLqAz3NBO1kWJQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Python 6节课掌握Python爬虫视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：89o8"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XgcQnI4NEcbIgtZDSTG3BA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"PowerDesigner 数据库基本原理和数据库设计实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XgcQnI4NEcbIgtZDSTG3BA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1XgcQnI4NEcbIgtZDSTG3BA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"PowerDesigner 数据库基本原理和数据库设计实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ihp4"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1oIuS7613BasJKaW5N8mBlw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 真简单"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1oIuS7613BasJKaW5N8mBlw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1oIuS7613BasJKaW5N8mBlw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 真简单"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：apc6"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1w5p8r8Rffl2QgRy6dpVs8w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 项目实战-仿cnodejs社区论坛"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1w5p8r8Rffl2QgRy6dpVs8w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1w5p8r8Rffl2QgRy6dpVs8w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 项目实战-仿cnodejs社区论坛"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：hk59"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WgWlrU9rOJ4hl0Krk_wGGw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 入门和学习指导"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WgWlrU9rOJ4hl0Krk_wGGw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WgWlrU9rOJ4hl0Krk_wGGw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 入门和学习指导"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：0rvj"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_ZXVQx9V9WsbyzZatlZMRg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 全栈开发"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_ZXVQx9V9WsbyzZatlZMRg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_ZXVQx9V9WsbyzZatlZMRg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 全栈开发"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：u6s0"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mHjxMzx-zclMEVLTXSaFGw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 爬虫应用之资讯助手系统"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mHjxMzx-zclMEVLTXSaFGw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mHjxMzx-zclMEVLTXSaFGw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 爬虫应用之资讯助手系统"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：c73x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1swZQ8GRqfPhOOuXRe_FxXg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 开发个性化全网内容抓取平台视频课程 实战教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1swZQ8GRqfPhOOuXRe_FxXg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1swZQ8GRqfPhOOuXRe_FxXg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 开发个性化全网内容抓取平台视频课程 实战教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：xxng"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/10dvgpJx4cNCKaBX_TaLzkw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 基于Node.js的web实时聊天室项目"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/10dvgpJx4cNCKaBX_TaLzkw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/10dvgpJx4cNCKaBX_TaLzkw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 基于Node.js的web实时聊天室项目"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：829r"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Bqf0Mypc6IkFn2f0qNRgxg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Node.js 7天学会Node.js微信公众号"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Bqf0Mypc6IkFn2f0qNRgxg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Bqf0Mypc6IkFn2f0qNRgxg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Node.js 7天学会Node.js微信公众号"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：id3e"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-vQfY6_fWsL1g_sjEz1maQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Nginx 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-vQfY6_fWsL1g_sjEz1maQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-vQfY6_fWsL1g_sjEz1maQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Nginx 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：etfy"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1py5QIRX_cygYsjI99Un_Hw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty 源码剖析&amp;amp;NIO+Netty5各种RPC架构实战演练"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1py5QIRX_cygYsjI99Un_Hw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1py5QIRX_cygYsjI99Un_Hw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty 源码剖析&amp;NIO+Netty5各种RPC架构实战演练"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：uzno"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yORqWgIZlcX52zaxUlMxVQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty 实战高性能分布式RPC"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yORqWgIZlcX52zaxUlMxVQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yORqWgIZlcX52zaxUlMxVQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty 实战高性能分布式RPC"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：x4zs"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1N2jq13ANQv7aX5KX0S-byQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty NIO+Netty5视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1N2jq13ANQv7aX5KX0S-byQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1N2jq13ANQv7aX5KX0S-byQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty NIO+Netty5视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ostk"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kCLQXrtRyAFiJqLXFidc_Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty Mina、Nio 互联网架构师"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kCLQXrtRyAFiJqLXFidc_Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kCLQXrtRyAFiJqLXFidc_Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty Mina、Nio 互联网架构师"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：cpyu"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1nPLBPJsBP9uOqmqhIPtMLQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty Java读源码之Netty深入剖析"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1nPLBPJsBP9uOqmqhIPtMLQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1nPLBPJsBP9uOqmqhIPtMLQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty Java读源码之Netty深入剖析"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：h24n"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-D1AvBVOS2-XY5rUumEUOg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty 4源码剖析视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-D1AvBVOS2-XY5rUumEUOg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-D1AvBVOS2-XY5rUumEUOg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty 4源码剖析视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：yvu5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gJ6LmUllpyVpoV_iJnF4Tw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Netty SpringBoot+Netty 仿微信聊天全栈实战 从0开发到上线部署"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gJ6LmUllpyVpoV_iJnF4Tw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gJ6LmUllpyVpoV_iJnF4Tw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Netty SpringBoot+Netty 仿微信聊天全栈实战 从0开发到上线部署"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：wl0x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gM_D6o93i_6Kx9hpuhoMVQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"MySQL基础视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gM_D6o93i_6Kx9hpuhoMVQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gM_D6o93i_6Kx9hpuhoMVQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"MySQL基础视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：g96w"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1V6X2_ZtlJ3iPGrRjZ19bzQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"MySQL高级"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1V6X2_ZtlJ3iPGrRjZ19bzQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1V6X2_ZtlJ3iPGrRjZ19bzQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"MySQL高级"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：opwa"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1AkNd3NyTQEFL3hYBs8ziBg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"MySQL DBA及Linux企业集群实战工程师"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1AkNd3NyTQEFL3hYBs8ziBg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1AkNd3NyTQEFL3hYBs8ziBg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"MySQL DBA及Linux企业集群实战工程师"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：60yg"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yMkGh1bHXpjyWviMWVIUyQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Mybatis 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yMkGh1bHXpjyWviMWVIUyQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1yMkGh1bHXpjyWviMWVIUyQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Mybatis 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：3c42"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1htEzePbl5ZFM_8MHnXycjQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Maven 视频 02"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1htEzePbl5ZFM_8MHnXycjQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1htEzePbl5ZFM_8MHnXycjQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Maven 视频 02"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：1vnp"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Vdefu4TUbRHS7J7bBTOO8A"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Maven 视频 01"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Vdefu4TUbRHS7J7bBTOO8A"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Vdefu4TUbRHS7J7bBTOO8A"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Maven 视频 01"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：e1a5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FK2cETDmZVm-XW9ml_A2Ng"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Luncene 2天讲视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FK2cETDmZVm-XW9ml_A2Ng"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1FK2cETDmZVm-XW9ml_A2Ng"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Luncene 2天讲视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：99nn"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/13RULCAhS52iaJt-hKw-nOA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucene 实战视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/13RULCAhS52iaJt-hKw-nOA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/13RULCAhS52iaJt-hKw-nOA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucene 实战视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：pyec"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1KXAQccZ2EiKedbdW9xXfmw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucene Solr 企业搜索引擎实战之Solr 与ELKStack"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1KXAQccZ2EiKedbdW9xXfmw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1KXAQccZ2EiKedbdW9xXfmw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucene Solr 企业搜索引擎实战之Solr 与ELKStack"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：kydl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12Foe4as9XqcVnB52ZcFDrw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucene Solr 企业实战视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12Foe4as9XqcVnB52ZcFDrw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12Foe4as9XqcVnB52ZcFDrw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucene Solr 企业实战视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7h9o"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-15hrTRGzyKU9zqTR8Y4EA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucene Solr 高级进阶版 全文检索"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-15hrTRGzyKU9zqTR8Y4EA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-15hrTRGzyKU9zqTR8Y4EA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucene Solr 高级进阶版 全文检索"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：gn82"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JhfRKyNh0NjgAeYtEjPbsQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucene Solr 垂直化搜索引擎"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JhfRKyNh0NjgAeYtEjPbsQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JhfRKyNh0NjgAeYtEjPbsQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucene Solr 垂直化搜索引擎"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：5i0k"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1v4RPCFNtdDBhw-THvpIYbQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucene Solr ELK Stack及Solr企业级搜索引擎实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1v4RPCFNtdDBhw-THvpIYbQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1v4RPCFNtdDBhw-THvpIYbQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucene Solr ELK Stack及Solr企业级搜索引擎实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：4aih"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_rKA4Lq7CBqbkW8rchgGaQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Lucence 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_rKA4Lq7CBqbkW8rchgGaQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_rKA4Lq7CBqbkW8rchgGaQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Lucence 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：hp23"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1MOHykTZAe49myBFWBqRwIA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Linux 汪利鹏"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1MOHykTZAe49myBFWBqRwIA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1MOHykTZAe49myBFWBqRwIA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Linux 汪利鹏"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7xo9"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1svRmwV0n5WVGhAKZOLeaVw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Linux 视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1svRmwV0n5WVGhAKZOLeaVw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1svRmwV0n5WVGhAKZOLeaVw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Linux 视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：xxb5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1vEv7A1crAeby5YwFidE7Qg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Linux 尚学堂"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1vEv7A1crAeby5YwFidE7Qg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1vEv7A1crAeby5YwFidE7Qg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Linux 尚学堂"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：bv8x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fJL5WmXrB_867smWf-u6GA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Linux 基础"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fJL5WmXrB_867smWf-u6GA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1fJL5WmXrB_867smWf-u6GA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Linux 基础"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：3srt"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1b6W-_CXY2EBUoll0evQ3xQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Linux 韩顺平"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1b6W-_CXY2EBUoll0evQ3xQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1b6W-_CXY2EBUoll0evQ3xQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Linux 韩顺平"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7j8x"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-lGB6tTpjC7BtxLyppb1lQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Linux 操作系统教学视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-lGB6tTpjC7BtxLyppb1lQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-lGB6tTpjC7BtxLyppb1lQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Linux 操作系统教学视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：cpt5"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12wviJ45WkO7DKF-QBC51hA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Kafka 原理剖析及实战演练视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12wviJ45WkO7DKF-QBC51hA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12wviJ45WkO7DKF-QBC51hA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Kafka 原理剖析及实战演练视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：jua3"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-ZYLx3-gObAAqq08zcR4xA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Kafka 原理剖析及实战演练"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-ZYLx3-gObAAqq08zcR4xA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1-ZYLx3-gObAAqq08zcR4xA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Kafka 原理剖析及实战演练"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：5qw8"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12-iyuK49vYRZLjGPxPTDDA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Kafka 消息队列中间件技术视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12-iyuK49vYRZLjGPxPTDDA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/12-iyuK49vYRZLjGPxPTDDA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Kafka 消息队列中间件技术视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：evdu"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1wNOLT3vgMOHoxlcILICrNw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Kafka 高性能之道教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1wNOLT3vgMOHoxlcILICrNw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1wNOLT3vgMOHoxlcILICrNw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Kafka 高性能之道教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2bwq"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1wCjARYgIM1CmZbDIqHls6w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Kafka 高性能消息中间件 分布式集群安装架构原理"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1wCjARYgIM1CmZbDIqHls6w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1wCjARYgIM1CmZbDIqHls6w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Kafka 高性能消息中间件 分布式集群安装架构原理"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ran0"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1nWjv0DtzF1FUzh7C95IIBQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Kafka 分布式消息系统实战与JavaScalaHadoopStorm集成"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1nWjv0DtzF1FUzh7C95IIBQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1nWjv0DtzF1FUzh7C95IIBQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Kafka 分布式消息系统实战与JavaScalaHadoopStorm集成"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：gz9v"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1frYF4ithWTCMyrzuJa7NQw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Jenkins 持续集成实战系列 + 集成端点 + Jenkins可持续集成"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1frYF4ithWTCMyrzuJa7NQw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1frYF4ithWTCMyrzuJa7NQw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Jenkins 持续集成实战系列 + 集成端点 + Jenkins可持续集成"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：pnjl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ko9UmGURFSKlC3MPOya71w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Java 尚学堂_高淇_300集视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ko9UmGURFSKlC3MPOya71w"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ko9UmGURFSKlC3MPOya71w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Java 尚学堂_高淇_300集视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：sqeu"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Fafy6LJUETbo_-AlzrGwWQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Java 尚学堂 高并发 马士兵Java高并发编程，Java虚拟机调优"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Fafy6LJUETbo_-AlzrGwWQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Fafy6LJUETbo_-AlzrGwWQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Java 尚学堂 高并发 马士兵Java高并发编程，Java虚拟机调优"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：mrlt"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1GPnpRBr01K_GVUT2JV59PQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hibernate 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1GPnpRBr01K_GVUT2JV59PQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1GPnpRBr01K_GVUT2JV59PQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hibernate 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：nmme"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Bk3tloX8tHdEWvhbXg7I4g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hibernate 70讲视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Bk3tloX8tHdEWvhbXg7I4g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Bk3tloX8tHdEWvhbXg7I4g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hibernate 70讲视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ffdi"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1oubvyrLtdb-fVrMudDiG3g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hibernate 56讲视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1oubvyrLtdb-fVrMudDiG3g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1oubvyrLtdb-fVrMudDiG3g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hibernate 56讲视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：me65"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JAZqcYYSqzSUx53rshI0kA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hadoop 泰克全套Hadoop视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JAZqcYYSqzSUx53rshI0kA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1JAZqcYYSqzSUx53rshI0kA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hadoop 泰克全套Hadoop视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：vaz1"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1idWVgrBwCaED1BRGhzxalg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hadoop 尚学堂_肖斌hadoop100集全"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1idWVgrBwCaED1BRGhzxalg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1idWVgrBwCaED1BRGhzxalg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hadoop 尚学堂_肖斌hadoop100集全"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：72cl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gJ2_QlJ39bG6cylwoXAPnA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hadoop 马士兵hadoop2.7"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gJ2_QlJ39bG6cylwoXAPnA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gJ2_QlJ39bG6cylwoXAPnA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hadoop 马士兵hadoop2.7"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：tacw"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WumO4mmwDR8i2imWc41Cnw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hadoop 黑马Hadoop 视频教程全套"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WumO4mmwDR8i2imWc41Cnw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1WumO4mmwDR8i2imWc41Cnw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hadoop 黑马Hadoop 视频教程全套"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：t6jm"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1agMtuAnaVNM5HhhZj94qVw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hadoop 大数据 01"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1agMtuAnaVNM5HhhZj94qVw "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1agMtuAnaVNM5HhhZj94qVw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hadoop 大数据 01"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：4uka"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Nr1VKCscPmAeZPI3QmQE0Q"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Hadoop 传智播客Hadoop7天培训 非吴超版"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Nr1VKCscPmAeZPI3QmQE0Q"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Nr1VKCscPmAeZPI3QmQE0Q"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Hadoop 传智播客Hadoop7天培训 非吴超版"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：ukkq"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mtEH1Z_1bSwyhGqnjJGrAQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 资深工程师深度讲解Go语言"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mtEH1Z_1bSwyhGqnjJGrAQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1mtEH1Z_1bSwyhGqnjJGrAQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 资深工程师深度讲解Go语言"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2ttv"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1tBq-9yiUrobqBNQQFQDyyg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 语言实战开发一个WEB项目博客系统"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1tBq-9yiUrobqBNQQFQDyyg"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1tBq-9yiUrobqBNQQFQDyyg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 语言实战开发一个WEB项目博客系统"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：3uh8"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L6jM9dlPshS_W22T0O37bA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 语言基础视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L6jM9dlPshS_W22T0O37bA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L6jM9dlPshS_W22T0O37bA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 语言基础视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：j645"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1u-2jWlx-CAH_U8MRqbpwnw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 无闻Go语言视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1u-2jWlx-CAH_U8MRqbpwnw "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1u-2jWlx-CAH_U8MRqbpwnw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 无闻Go语言视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：p71w"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HqAc3IFiNzembB-B5SmJQw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 慕课网Golang 语言"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HqAc3IFiNzembB-B5SmJQw "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1HqAc3IFiNzembB-B5SmJQw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 慕课网Golang 语言"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：5fot"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/13jyFgam94_9VQkKuZ_42Ig"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 基于Golang协程实现流量统计系统"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/13jyFgam94_9VQkKuZ_42Ig"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/13jyFgam94_9VQkKuZ_42Ig"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 基于Golang协程实现流量统计系统"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：nhnq"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DGuqC4dgin2xLN9vwcoqcA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 传智播客2018Golang 语言"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DGuqC4dgin2xLN9vwcoqcA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DGuqC4dgin2xLN9vwcoqcA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 传智播客2018Golang 语言"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：o4re"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1lzh5OI_8un0x2G5MtTHdxA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Golang 北风网Golang 实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1lzh5OI_8un0x2G5MtTHdxA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1lzh5OI_8un0x2G5MtTHdxA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Golang 北风网Golang 实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：w9ck"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1M-4r10B2tTPEB7Y1FJ9R4g"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"FTP服务器架设"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1M-4r10B2tTPEB7Y1FJ9R4g"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1M-4r10B2tTPEB7Y1FJ9R4g"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"FTP服务器架设"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：r4zi"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gNW9AJCWWNsHc4u3LZiibQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Elasticsearch、Logstash和Kibana ELK Stack深入浅出视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gNW9AJCWWNsHc4u3LZiibQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1gNW9AJCWWNsHc4u3LZiibQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Elasticsearch、Logstash和Kibana ELK Stack深入浅出视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：owbk"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cEQWIcxDjNKE0JypaokNYQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Elasticsearch 分布式全文检索入门视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cEQWIcxDjNKE0JypaokNYQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1cEQWIcxDjNKE0JypaokNYQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Elasticsearch 分布式全文检索入门视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：gaam"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ob053CqywwHpHRwC33sgiw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Elasticsearch 顶尖高手系列课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ob053CqywwHpHRwC33sgiw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1ob053CqywwHpHRwC33sgiw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Elasticsearch 顶尖高手系列课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：zvj0"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Mj331ERJ4lYqYvn-U0gBBw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ElasticSearch 6 实战教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Mj331ERJ4lYqYvn-U0gBBw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Mj331ERJ4lYqYvn-U0gBBw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ElasticSearch 6 实战教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：remv"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UdhWbvzc-LYKo4FpoA0-JA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"ElasticSearch 5 视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UdhWbvzc-LYKo4FpoA0-JA"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1UdhWbvzc-LYKo4FpoA0-JA"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"ElasticSearch 5 视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：2uhg"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DkoQOwAj0Dq6WBbcEqb-bQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 虚拟化轻量容器技术教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DkoQOwAj0Dq6WBbcEqb-bQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1DkoQOwAj0Dq6WBbcEqb-bQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 虚拟化轻量容器技术教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：u8uv"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_VjbZ03VeQUDpxvE4lNQ6A"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 系统学习 践行DevOps理念"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_VjbZ03VeQUDpxvE4lNQ6A"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1_VjbZ03VeQUDpxvE4lNQ6A"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 系统学习 践行DevOps理念"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：9lzl"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1esAj2pjjNIJQLwcZyxpZFQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 系列视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1esAj2pjjNIJQLwcZyxpZFQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1esAj2pjjNIJQLwcZyxpZFQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 系列视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：7r8k"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1m7i5XHkJRHyFUu2Pv3kxBQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1m7i5XHkJRHyFUu2Pv3kxBQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1m7i5XHkJRHyFUu2Pv3kxBQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：egvm"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kRqWqOF4QTEy8MDnEzgPVw"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 实现PaaS平台视频课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kRqWqOF4QTEy8MDnEzgPVw"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1kRqWqOF4QTEy8MDnEzgPVw"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 实现PaaS平台视频课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：i3a1"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/14byor01l4pOPAtgRwaIOPQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 前后端分离"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/14byor01l4pOPAtgRwaIOPQ"</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/14byor01l4pOPAtgRwaIOPQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 前后端分离"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：brt0"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L13Egenv3FcAyVcuedefWQ"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 课程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L13Egenv3FcAyVcuedefWQ "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1L13Egenv3FcAyVcuedefWQ"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 课程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：rupg"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1iZUZIGxrwYalBl0C4TC36w"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker 到Kubernetes技术系列视频教程"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1iZUZIGxrwYalBl0C4TC36w "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1iZUZIGxrwYalBl0C4TC36w"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker 到Kubernetes技术系列视频教程"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：1o6d"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Kiuh-gbNSN4IE9T4TDTktg"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker Jenkins企业实战视频"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Kiuh-gbNSN4IE9T4TDTktg "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1Kiuh-gbNSN4IE9T4TDTktg"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker Jenkins企业实战视频"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：6b77"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/169fAiXwnRfExh0XdJdGaww"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Docker Kubernetes 微服务容器化实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/169fAiXwnRfExh0XdJdGaww "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/169fAiXwnRfExh0XdJdGaww"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Docker Kubernetes 微服务容器化实战"</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">"answer"</span>: [<br>            &#123;<br>                <span class="hljs-attr">"at_users"</span>: [<br>                ],<br>                <span class="hljs-attr">"link_des"</span>: <span class="hljs-string">"提取码：mdf4"</span>,<br>                <span class="hljs-attr">"link_img"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1H69bIw429d3XLtRL-QXXIA"</span>,<br>                <span class="hljs-attr">"link_title"</span>: <span class="hljs-string">"Activiti 6.0工作流引擎深度解析与实战"</span>,<br>                <span class="hljs-attr">"msg_type"</span>: <span class="hljs-number">49</span>,<br>                <span class="hljs-attr">"raw_msg"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1H69bIw429d3XLtRL-QXXIA "</span>,<br>                <span class="hljs-attr">"wxid_to_send"</span>: <span class="hljs-string">""</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">"exact_keywords"</span>: <span class="hljs-string">"https://pan.baidu.com/s/1H69bIw429d3XLtR"</span>,<br>        <span class="hljs-attr">"fuzzy_keywords"</span>: <span class="hljs-string">""</span>,<br>        <span class="hljs-attr">"question"</span>: <span class="hljs-string">"Activiti 6.0工作流引擎深度解析与实战"</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
</search>
